// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`generateServerProject posts 1`] = `
Object {
  "/.npmignore": "tsconfig.json
.pnp.*
.yarn
yarn.lock
*.ts
!*.d.ts",
  "/index.ts": "export * as model from \\"./model\\";
export * as services from \\"./services\\";
",
  "/model/commons/_types/PostId.ts": "/**
 * An ID of a blog post
 */
export type PostId = string;
",
  "/model/commons/_types/index.ts": "export * from \\"./PostId\\";
",
  "/model/commons/index.ts": "export * from \\"./_types\\";
",
  "/model/index.ts": "export * as commons from \\"./commons\\";
export * as posts from \\"./posts\\";
",
  "/model/posts/_errors/PostNotFoundError.ts": "import * as model from \\"../..\\";

export interface PostNotFoundError {
    id: model.commons.PostId;
}
",
  "/model/posts/_errors/index.ts": "export * from \\"./PostNotFoundError\\";
",
  "/model/posts/_service-types/PostsService/createPostErrorBody.ts": "export type createPostErrorBody = never;

export declare namespace createPostErrorBody {
    export interface _Visitor<Result> {
        _unknown: () => Result;
    }
}

export const createPostErrorBody = {
    _visit: <Result>(_value: createPostErrorBody, visitor: createPostErrorBody._Visitor<Result>): Result => {
        return visitor._unknown();
    },

    _types: (): createPostErrorBody[\\"_error\\"][] => [],
} as const;
",
  "/model/posts/_service-types/PostsService/createPostRequest.ts": "import * as model from \\"../../..\\";

export interface createPostRequest {
    xServiceHeader: string;
    xEndpointHeader: string;
    body: model.posts.CreatePostRequest;
}
",
  "/model/posts/_service-types/PostsService/createPostResponse.ts": "import * as model from \\"../../..\\";

export type createPostResponse = createPostResponse.SuccessResponse | createPostResponse.ErrorResponse;

export declare namespace createPostResponse {
    export interface SuccessResponse {
        ok: true;
        body: model.commons.PostId;
    }

    export interface ErrorResponse {
        ok: false;
        error: model.posts.createPostErrorBody;
    }
}
",
  "/model/posts/_service-types/PostsService/deletePostErrorBody.ts": "export type deletePostErrorBody = never;

export declare namespace deletePostErrorBody {
    export interface _Visitor<Result> {
        _unknown: () => Result;
    }
}

export const deletePostErrorBody = {
    _visit: <Result>(_value: deletePostErrorBody, visitor: deletePostErrorBody._Visitor<Result>): Result => {
        return visitor._unknown();
    },

    _types: (): deletePostErrorBody[\\"_error\\"][] => [],
} as const;
",
  "/model/posts/_service-types/PostsService/deletePostRequest.ts": "import * as model from \\"../../..\\";

export interface deletePostRequest {
    postId: model.commons.PostId;
    xServiceHeader: string;
}
",
  "/model/posts/_service-types/PostsService/deletePostResponse.ts": "import * as model from \\"../../..\\";

export type deletePostResponse = deletePostResponse.SuccessResponse | deletePostResponse.ErrorResponse;

export declare namespace deletePostResponse {
    export interface SuccessResponse {
        ok: true;
    }

    export interface ErrorResponse {
        ok: false;
        error: model.posts.deletePostErrorBody;
    }
}
",
  "/model/posts/_service-types/PostsService/getPostErrorBody.ts": "import { posts } from \\"../../..\\";
import * as uuid from \\"uuid\\";

export type getPostErrorBody =
    | getPostErrorBody.PostNotFoundError;

export declare namespace getPostErrorBody {
    interface PostNotFoundError extends posts.PostNotFoundError {
        _error: \\"PostNotFoundError\\";
        _errorInstanceId: string;
    }

    export interface _Visitor<Result> {
        PostNotFoundError: (value: posts.PostNotFoundError) => Result;
        _unknown: () => Result;
    }
}

export const getPostErrorBody = {
    postNotFoundError: (value: posts.PostNotFoundError): getPostErrorBody.PostNotFoundError => ({
        ...value,
        _error: \\"PostNotFoundError\\",
        _errorInstanceId: uuid.v4()
    }),

    _visit: <Result>(value: getPostErrorBody, visitor: getPostErrorBody._Visitor<Result>): Result => {
        switch (value._error) {
            case \\"PostNotFoundError\\": return visitor.PostNotFoundError(value);
            default: return visitor._unknown();
        }
    },

    _types: (): getPostErrorBody[\\"_error\\"][] => [\\"PostNotFoundError\\"],
} as const;
",
  "/model/posts/_service-types/PostsService/getPostRequest.ts": "import * as model from \\"../../..\\";

export interface getPostRequest {
    postId: model.commons.PostId;
    page: number | null | undefined;
    otherParam: number;
    xServiceHeader: string;
}
",
  "/model/posts/_service-types/PostsService/getPostResponse.ts": "import * as model from \\"../../..\\";

export type getPostResponse = getPostResponse.SuccessResponse | getPostResponse.ErrorResponse;

export declare namespace getPostResponse {
    export interface SuccessResponse {
        ok: true;
        body: model.posts.Post;
    }

    export interface ErrorResponse {
        ok: false;
        error: model.posts.getPostErrorBody;
    }
}
",
  "/model/posts/_service-types/PostsService/getPostV2ErrorBody.ts": "import { posts } from \\"../../..\\";
import * as uuid from \\"uuid\\";

export type getPostV2ErrorBody =
    | getPostV2ErrorBody.PostNotFoundError;

export declare namespace getPostV2ErrorBody {
    interface PostNotFoundError extends posts.PostNotFoundError {
        _error: \\"PostNotFoundError\\";
        _errorInstanceId: string;
    }

    export interface _Visitor<Result> {
        PostNotFoundError: (value: posts.PostNotFoundError) => Result;
        _unknown: () => Result;
    }
}

export const getPostV2ErrorBody = {
    postNotFoundError: (value: posts.PostNotFoundError): getPostV2ErrorBody.PostNotFoundError => ({
        ...value,
        _error: \\"PostNotFoundError\\",
        _errorInstanceId: uuid.v4()
    }),

    _visit: <Result>(value: getPostV2ErrorBody, visitor: getPostV2ErrorBody._Visitor<Result>): Result => {
        switch (value._error) {
            case \\"PostNotFoundError\\": return visitor.PostNotFoundError(value);
            default: return visitor._unknown();
        }
    },

    _types: (): getPostV2ErrorBody[\\"_error\\"][] => [\\"PostNotFoundError\\"],
} as const;
",
  "/model/posts/_service-types/PostsService/getPostV2Request.ts": "import * as model from \\"../../..\\";

export interface getPostV2Request {
    xServiceHeader: string;
    body: model.commons.PostId;
}
",
  "/model/posts/_service-types/PostsService/getPostV2Response.ts": "import * as model from \\"../../..\\";

export type getPostV2Response = getPostV2Response.SuccessResponse | getPostV2Response.ErrorResponse;

export declare namespace getPostV2Response {
    export interface SuccessResponse {
        ok: true;
        body: model.posts.Post;
    }

    export interface ErrorResponse {
        ok: false;
        error: model.posts.getPostV2ErrorBody;
    }
}
",
  "/model/posts/_service-types/PostsService/index.ts": "export * from \\"./createPostRequest\\";
export * from \\"./createPostErrorBody\\";
export * from \\"./createPostResponse\\";
export * from \\"./getPostRequest\\";
export * from \\"./getPostErrorBody\\";
export * from \\"./getPostResponse\\";
export * from \\"./getPostV2Request\\";
export * from \\"./getPostV2ErrorBody\\";
export * from \\"./getPostV2Response\\";
export * from \\"./deletePostRequest\\";
export * from \\"./deletePostErrorBody\\";
export * from \\"./deletePostResponse\\";
export * from \\"./noopWithAuthRequest\\";
export * from \\"./noopWithAuthErrorBody\\";
export * from \\"./noopWithAuthResponse\\";
export * from \\"./noopWithoutAuthRequest\\";
export * from \\"./noopWithoutAuthErrorBody\\";
export * from \\"./noopWithoutAuthResponse\\";
",
  "/model/posts/_service-types/PostsService/noopWithAuthErrorBody.ts": "export type noopWithAuthErrorBody = never;

export declare namespace noopWithAuthErrorBody {
    export interface _Visitor<Result> {
        _unknown: () => Result;
    }
}

export const noopWithAuthErrorBody = {
    _visit: <Result>(_value: noopWithAuthErrorBody, visitor: noopWithAuthErrorBody._Visitor<Result>): Result => {
        return visitor._unknown();
    },

    _types: (): noopWithAuthErrorBody[\\"_error\\"][] => [],
} as const;
",
  "/model/posts/_service-types/PostsService/noopWithAuthRequest.ts": "export interface noopWithAuthRequest {
    xServiceHeader: string;
}
",
  "/model/posts/_service-types/PostsService/noopWithAuthResponse.ts": "import * as model from \\"../../..\\";

export type noopWithAuthResponse = noopWithAuthResponse.SuccessResponse | noopWithAuthResponse.ErrorResponse;

export declare namespace noopWithAuthResponse {
    export interface SuccessResponse {
        ok: true;
    }

    export interface ErrorResponse {
        ok: false;
        error: model.posts.noopWithAuthErrorBody;
    }
}
",
  "/model/posts/_service-types/PostsService/noopWithoutAuthErrorBody.ts": "export type noopWithoutAuthErrorBody = never;

export declare namespace noopWithoutAuthErrorBody {
    export interface _Visitor<Result> {
        _unknown: () => Result;
    }
}

export const noopWithoutAuthErrorBody = {
    _visit: <Result>(_value: noopWithoutAuthErrorBody, visitor: noopWithoutAuthErrorBody._Visitor<Result>): Result => {
        return visitor._unknown();
    },

    _types: (): noopWithoutAuthErrorBody[\\"_error\\"][] => [],
} as const;
",
  "/model/posts/_service-types/PostsService/noopWithoutAuthRequest.ts": "export interface noopWithoutAuthRequest {
    xServiceHeader: string;
}
",
  "/model/posts/_service-types/PostsService/noopWithoutAuthResponse.ts": "import * as model from \\"../../..\\";

export type noopWithoutAuthResponse = noopWithoutAuthResponse.SuccessResponse | noopWithoutAuthResponse.ErrorResponse;

export declare namespace noopWithoutAuthResponse {
    export interface SuccessResponse {
        ok: true;
    }

    export interface ErrorResponse {
        ok: false;
        error: model.posts.noopWithoutAuthErrorBody;
    }
}
",
  "/model/posts/_service-types/index.ts": "export * from \\"./PostsService\\";
",
  "/model/posts/_types/Author.ts": "export type Author =
    | Author.Anonymous
    | Author.Named;

export declare namespace Author {
    interface Anonymous {
        _type: \\"anonymous\\";
    }

    interface Named {
        _type: \\"named\\";
        named: string;
    }

    export interface _Visitor<Result> {
        anonymous: () => Result;
        named: (value: string) => Result;
        _unknown: () => Result;
    }
}

export const Author = {
    anonymous: (): Author.Anonymous => ({
        _type: \\"anonymous\\"
    }),

    named: (value: string): Author.Named => ({
        named: value,
        _type: \\"named\\"
    }),

    _visit: <Result>(value: Author, visitor: Author._Visitor<Result>): Result => {
        switch (value._type) {
            case \\"anonymous\\": return visitor.anonymous();
            case \\"named\\": return visitor.named(value.named);
            default: return visitor._unknown();
        }
    },

    _types: (): Author[\\"_type\\"][] => [\\"anonymous\\", \\"named\\"],
} as const;
",
  "/model/posts/_types/CreatePostRequest.ts": "import * as model from \\"../..\\";

export interface CreatePostRequest {
    type: model.posts.PostType;
    title: string;
    author: model.posts.Author;
    content: string;
}
",
  "/model/posts/_types/Post.ts": "import * as model from \\"../..\\";

/**
 * A blog post
 */
export interface Post {
    id: model.commons.PostId;
    type: model.posts.PostType;
    title: string;
    author: model.posts.Author;
    content: string;
    relatedPosts: model.posts.Post[];
}
",
  "/model/posts/_types/PostType.ts": "export type PostType =
    | \\"LONG\\"
    | \\"SHORT\\";

export const PostType = {
    Long: \\"LONG\\",
    Short: \\"SHORT\\",

    _visit: <Result>(value: PostType, visitor: PostType._Visitor<Result>): Result => {
        switch (value) {
            case PostType.Long: return visitor.long();
            case PostType.Short: return visitor.short();
            default: return visitor._unknown();
        }
    },

    _values: (): PostType[] => [PostType.Long, PostType.Short],
} as const;

export declare namespace PostType {
    type Long = \\"LONG\\";
    type Short = \\"SHORT\\";

    export interface _Visitor<Result> {
        long: () => Result;
        short: () => Result;
        _unknown: () => Result;
    }
}
",
  "/model/posts/_types/index.ts": "export * from \\"./Post\\";
export * from \\"./CreatePostRequest\\";
export * from \\"./PostType\\";
export * from \\"./Author\\";
",
  "/model/posts/index.ts": "export * from \\"./_types\\";
export * from \\"./_errors\\";
export * from \\"./_service-types\\";
",
  "/package.json": "{
    \\"name\\": \\"posts\\",
    \\"version\\": \\"0.0.0\\",
    \\"main\\": \\"./index.js\\",
    \\"types\\": \\"./index.d.ts\\",
    \\"scripts\\": {
        \\"build\\": \\"esbuild $(find . -name '*.ts' -not -path './node_modules/*') --format=cjs --sourcemap --outdir=. && tsc\\"
    },
    \\"dependencies\\": {
        \\"uuid\\": \\"8.3.2\\",
        \\"@types/uuid\\": \\"8.3.4\\",
        \\"express\\": \\"4.18.1\\",
        \\"@types/express\\": \\"4.17.13\\"
    },
    \\"peerDependencies\\": {
        \\"express\\": \\"*\\",
        \\"@types/express\\": \\"*\\"
    },
    \\"devDependencies\\": {
        \\"@types/node\\": \\"17.0.33\\",
        \\"esbuild\\": \\"0.14.47\\",
        \\"typescript\\": \\"4.6.4\\"
    }
}",
  "/services/index.ts": "export * as posts from \\"./posts\\";
",
  "/services/posts/PostsService.ts": "import * as model from \\"../../model\\";
import express, { Express } from \\"express\\";

export interface PostsService {
    createPost(request: model.posts.createPostRequest): model.posts.createPostResponse | Promise<model.posts.createPostResponse>;
    getPost(request: model.posts.getPostRequest): model.posts.getPostResponse | Promise<model.posts.getPostResponse>;
    getPostV2(request: model.posts.getPostV2Request): model.posts.getPostV2Response | Promise<model.posts.getPostV2Response>;
    deletePost(request: model.posts.deletePostRequest): model.posts.deletePostResponse | Promise<model.posts.deletePostResponse>;
    noopWithAuth(request: model.posts.noopWithAuthRequest): model.posts.noopWithAuthResponse | Promise<model.posts.noopWithAuthResponse>;
    noopWithoutAuth(request: model.posts.noopWithoutAuthRequest): model.posts.noopWithoutAuthResponse | Promise<model.posts.noopWithoutAuthResponse>;
}

export const PostsService = {
    expressMiddleware: (impl: PostsService): Express => {
        const app = express();
        app.use(express.json());
        app.post(\\"/posts/\\", async (request, response) => {
            const result = await impl.createPost({
                \\"xServiceHeader\\": request.header(\\"X-Service-Header\\")!,
                \\"xEndpointHeader\\": request.header(\\"X-Endpoint-Header\\")!,
                body: request.body
            });
            if (result.ok) {
                response.send(result.body);
            }
            else {
                response.sendStatus(500);
            }
        });
        app.get(\\"/posts/:postId\\", async (request, response) => {
            const result = await impl.getPost({
                postId: request.params.postId,
                page: request.query.page != null ? Number(request.query.page) : undefined,
                otherParam: Number(request.query.otherParam),
                \\"xServiceHeader\\": request.header(\\"X-Service-Header\\")!
            });
            if (result.ok) {
                response.send(result.body);
            }
            else {
                const statusCode = model.posts.getPostErrorBody._visit(result.error, {
                    PostNotFoundError: () => 404,
                    _unknown: () => 500
                });
                response.status(statusCode).send(result.error);
            }
        });
        app.get(\\"/posts/get\\", async (request, response) => {
            const result = await impl.getPostV2({
                \\"xServiceHeader\\": request.header(\\"X-Service-Header\\")!,
                body: request.body
            });
            if (result.ok) {
                response.send(result.body);
            }
            else {
                const statusCode = model.posts.getPostV2ErrorBody._visit(result.error, {
                    PostNotFoundError: () => 404,
                    _unknown: () => 500
                });
                response.status(statusCode).send(result.error);
            }
        });
        app.delete(\\"/posts/:postId\\", async (request, response) => {
            const result = await impl.deletePost({
                postId: request.params.postId,
                \\"xServiceHeader\\": request.header(\\"X-Service-Header\\")!
            });
            if (result.ok) {
                response.end();
            }
            else {
                response.sendStatus(500);
            }
        });
        app.get(\\"/posts/\\", async (request, response) => {
            const result = await impl.noopWithAuth({
                \\"xServiceHeader\\": request.header(\\"X-Service-Header\\")!
            });
            if (result.ok) {
                response.end();
            }
            else {
                response.sendStatus(500);
            }
        });
        app.get(\\"/posts/\\", async (request, response) => {
            const result = await impl.noopWithoutAuth({
                \\"xServiceHeader\\": request.header(\\"X-Service-Header\\")!
            });
            if (result.ok) {
                response.end();
            }
            else {
                response.sendStatus(500);
            }
        });
        return app;
    }
};
",
  "/services/posts/index.ts": "export * from \\"./PostsService\\";
",
  "/tsconfig.json": "{
    \\"compilerOptions\\": {
        \\"strict\\": true,
        \\"skipLibCheck\\": true,
        \\"declaration\\": true,
        \\"sourceMap\\": true,
        \\"emitDeclarationOnly\\": true,
        \\"esModuleInterop\\": true,
        \\"noUncheckedIndexedAccess\\": true,
        \\"noUnusedLocals\\": true,
        \\"noUnusedParameters\\": true
    }
}",
}
`;
