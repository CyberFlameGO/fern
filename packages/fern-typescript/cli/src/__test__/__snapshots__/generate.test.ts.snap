// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`runGenerator trace 1`] = `
Array [
  Object {
    "contents": Array [
      Object {
        "contents": Array [
          Object {
            "contents": "export * from \\"./service-types\\";
",
            "name": "index.ts",
            "type": "file",
          },
          Object {
            "contents": Array [
              Object {
                "contents": Array [
                  Object {
                    "contents": "export type SendTestSubmissionUpdateErrorBody = never;

export declare namespace SendTestSubmissionUpdateErrorBody {
    export interface _Visitor<Result> {
        _unknown: () => Result;
    }
}

export const SendTestSubmissionUpdateErrorBody = {
    _visit: <Result>(_value: SendTestSubmissionUpdateErrorBody, visitor: SendTestSubmissionUpdateErrorBody._Visitor<Result>): Result => {
        return visitor._unknown();
    },

    _types: (): SendTestSubmissionUpdateErrorBody[\\"_error\\"][] => [],
} as const;
",
                    "name": "SendTestSubmissionUpdateErrorBody.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../../..\\";

export interface SendTestSubmissionUpdateRequest {
    submissionId: model.submission.SubmissionId;
    body: model.submission.TestSubmissionUpdate;
}
",
                    "name": "SendTestSubmissionUpdateRequest.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../../..\\";

export type SendTestSubmissionUpdateResponse = SendTestSubmissionUpdateResponse.SuccessResponse | SendTestSubmissionUpdateResponse.ErrorResponse;

namespace SendTestSubmissionUpdateResponse {
    export interface SuccessResponse {
        ok: true;
    }

    export interface ErrorResponse {
        ok: false;
        error: model.admin.SendTestSubmissionUpdateErrorBody;
    }
}
",
                    "name": "SendTestSubmissionUpdateResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export type SendWorkspaceSubmissionUpdateErrorBody = never;

export declare namespace SendWorkspaceSubmissionUpdateErrorBody {
    export interface _Visitor<Result> {
        _unknown: () => Result;
    }
}

export const SendWorkspaceSubmissionUpdateErrorBody = {
    _visit: <Result>(_value: SendWorkspaceSubmissionUpdateErrorBody, visitor: SendWorkspaceSubmissionUpdateErrorBody._Visitor<Result>): Result => {
        return visitor._unknown();
    },

    _types: (): SendWorkspaceSubmissionUpdateErrorBody[\\"_error\\"][] => [],
} as const;
",
                    "name": "SendWorkspaceSubmissionUpdateErrorBody.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../../..\\";

export interface SendWorkspaceSubmissionUpdateRequest {
    submissionId: model.submission.SubmissionId;
    body: model.submission.WorkspaceSubmissionUpdate;
}
",
                    "name": "SendWorkspaceSubmissionUpdateRequest.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../../..\\";

export type SendWorkspaceSubmissionUpdateResponse = SendWorkspaceSubmissionUpdateResponse.SuccessResponse | SendWorkspaceSubmissionUpdateResponse.ErrorResponse;

namespace SendWorkspaceSubmissionUpdateResponse {
    export interface SuccessResponse {
        ok: true;
    }

    export interface ErrorResponse {
        ok: false;
        error: model.admin.SendWorkspaceSubmissionUpdateErrorBody;
    }
}
",
                    "name": "SendWorkspaceSubmissionUpdateResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export type StoreTracedTestCaseErrorBody = never;

export declare namespace StoreTracedTestCaseErrorBody {
    export interface _Visitor<Result> {
        _unknown: () => Result;
    }
}

export const StoreTracedTestCaseErrorBody = {
    _visit: <Result>(_value: StoreTracedTestCaseErrorBody, visitor: StoreTracedTestCaseErrorBody._Visitor<Result>): Result => {
        return visitor._unknown();
    },

    _types: (): StoreTracedTestCaseErrorBody[\\"_error\\"][] => [],
} as const;
",
                    "name": "StoreTracedTestCaseErrorBody.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../../..\\";

export interface StoreTracedTestCaseRequest {
    submissionId: model.submission.SubmissionId;
    testCaseId: string;
    body: model.admin.StoreTracedTestCaseRequestBody;
}
",
                    "name": "StoreTracedTestCaseRequest.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../../..\\";

export interface StoreTracedTestCaseRequestBody {
    result: model.submission.TestCaseResultWithStdout;
    traceResponses: model.submission.TraceResponse[];
}
",
                    "name": "StoreTracedTestCaseRequestBody.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../../..\\";

export type StoreTracedTestCaseResponse = StoreTracedTestCaseResponse.SuccessResponse | StoreTracedTestCaseResponse.ErrorResponse;

namespace StoreTracedTestCaseResponse {
    export interface SuccessResponse {
        ok: true;
    }

    export interface ErrorResponse {
        ok: false;
        error: model.admin.StoreTracedTestCaseErrorBody;
    }
}
",
                    "name": "StoreTracedTestCaseResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export type StoreTracedTestCaseV2ErrorBody = never;

export declare namespace StoreTracedTestCaseV2ErrorBody {
    export interface _Visitor<Result> {
        _unknown: () => Result;
    }
}

export const StoreTracedTestCaseV2ErrorBody = {
    _visit: <Result>(_value: StoreTracedTestCaseV2ErrorBody, visitor: StoreTracedTestCaseV2ErrorBody._Visitor<Result>): Result => {
        return visitor._unknown();
    },

    _types: (): StoreTracedTestCaseV2ErrorBody[\\"_error\\"][] => [],
} as const;
",
                    "name": "StoreTracedTestCaseV2ErrorBody.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../../..\\";

export interface StoreTracedTestCaseV2Request {
    submissionId: model.submission.SubmissionId;
    testCaseId: model.problemV2.TestCaseId;
    body: model.submission.TraceResponseV2[];
}
",
                    "name": "StoreTracedTestCaseV2Request.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../../..\\";

export type StoreTracedTestCaseV2Response = StoreTracedTestCaseV2Response.SuccessResponse | StoreTracedTestCaseV2Response.ErrorResponse;

namespace StoreTracedTestCaseV2Response {
    export interface SuccessResponse {
        ok: true;
    }

    export interface ErrorResponse {
        ok: false;
        error: model.admin.StoreTracedTestCaseV2ErrorBody;
    }
}
",
                    "name": "StoreTracedTestCaseV2Response.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export type StoreTracedWorkspaceErrorBody = never;

export declare namespace StoreTracedWorkspaceErrorBody {
    export interface _Visitor<Result> {
        _unknown: () => Result;
    }
}

export const StoreTracedWorkspaceErrorBody = {
    _visit: <Result>(_value: StoreTracedWorkspaceErrorBody, visitor: StoreTracedWorkspaceErrorBody._Visitor<Result>): Result => {
        return visitor._unknown();
    },

    _types: (): StoreTracedWorkspaceErrorBody[\\"_error\\"][] => [],
} as const;
",
                    "name": "StoreTracedWorkspaceErrorBody.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../../..\\";

export interface StoreTracedWorkspaceRequest {
    submissionId: model.submission.SubmissionId;
    body: model.admin.StoreTracedWorkspaceRequestBody;
}
",
                    "name": "StoreTracedWorkspaceRequest.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../../..\\";

export interface StoreTracedWorkspaceRequestBody {
    workspaceRunDetails: model.submission.WorkspaceRunDetails;
    traceResponses: model.submission.TraceResponse[];
}
",
                    "name": "StoreTracedWorkspaceRequestBody.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../../..\\";

export type StoreTracedWorkspaceResponse = StoreTracedWorkspaceResponse.SuccessResponse | StoreTracedWorkspaceResponse.ErrorResponse;

namespace StoreTracedWorkspaceResponse {
    export interface SuccessResponse {
        ok: true;
    }

    export interface ErrorResponse {
        ok: false;
        error: model.admin.StoreTracedWorkspaceErrorBody;
    }
}
",
                    "name": "StoreTracedWorkspaceResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export type StoreTracedWorkspaceV2ErrorBody = never;

export declare namespace StoreTracedWorkspaceV2ErrorBody {
    export interface _Visitor<Result> {
        _unknown: () => Result;
    }
}

export const StoreTracedWorkspaceV2ErrorBody = {
    _visit: <Result>(_value: StoreTracedWorkspaceV2ErrorBody, visitor: StoreTracedWorkspaceV2ErrorBody._Visitor<Result>): Result => {
        return visitor._unknown();
    },

    _types: (): StoreTracedWorkspaceV2ErrorBody[\\"_error\\"][] => [],
} as const;
",
                    "name": "StoreTracedWorkspaceV2ErrorBody.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../../..\\";

export interface StoreTracedWorkspaceV2Request {
    submissionId: model.submission.SubmissionId;
    body: model.submission.TraceResponseV2[];
}
",
                    "name": "StoreTracedWorkspaceV2Request.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../../..\\";

export type StoreTracedWorkspaceV2Response = StoreTracedWorkspaceV2Response.SuccessResponse | StoreTracedWorkspaceV2Response.ErrorResponse;

namespace StoreTracedWorkspaceV2Response {
    export interface SuccessResponse {
        ok: true;
    }

    export interface ErrorResponse {
        ok: false;
        error: model.admin.StoreTracedWorkspaceV2ErrorBody;
    }
}
",
                    "name": "StoreTracedWorkspaceV2Response.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export type UpdateTestSubmissionStatusErrorBody = never;

export declare namespace UpdateTestSubmissionStatusErrorBody {
    export interface _Visitor<Result> {
        _unknown: () => Result;
    }
}

export const UpdateTestSubmissionStatusErrorBody = {
    _visit: <Result>(_value: UpdateTestSubmissionStatusErrorBody, visitor: UpdateTestSubmissionStatusErrorBody._Visitor<Result>): Result => {
        return visitor._unknown();
    },

    _types: (): UpdateTestSubmissionStatusErrorBody[\\"_error\\"][] => [],
} as const;
",
                    "name": "UpdateTestSubmissionStatusErrorBody.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../../..\\";

export interface UpdateTestSubmissionStatusRequest {
    submissionId: model.submission.SubmissionId;
    body: model.submission.TestSubmissionStatus;
}
",
                    "name": "UpdateTestSubmissionStatusRequest.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../../..\\";

export type UpdateTestSubmissionStatusResponse = UpdateTestSubmissionStatusResponse.SuccessResponse | UpdateTestSubmissionStatusResponse.ErrorResponse;

namespace UpdateTestSubmissionStatusResponse {
    export interface SuccessResponse {
        ok: true;
    }

    export interface ErrorResponse {
        ok: false;
        error: model.admin.UpdateTestSubmissionStatusErrorBody;
    }
}
",
                    "name": "UpdateTestSubmissionStatusResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export type UpdateWorkspaceSubmissionStatusErrorBody = never;

export declare namespace UpdateWorkspaceSubmissionStatusErrorBody {
    export interface _Visitor<Result> {
        _unknown: () => Result;
    }
}

export const UpdateWorkspaceSubmissionStatusErrorBody = {
    _visit: <Result>(_value: UpdateWorkspaceSubmissionStatusErrorBody, visitor: UpdateWorkspaceSubmissionStatusErrorBody._Visitor<Result>): Result => {
        return visitor._unknown();
    },

    _types: (): UpdateWorkspaceSubmissionStatusErrorBody[\\"_error\\"][] => [],
} as const;
",
                    "name": "UpdateWorkspaceSubmissionStatusErrorBody.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../../..\\";

export interface UpdateWorkspaceSubmissionStatusRequest {
    submissionId: model.submission.SubmissionId;
    body: model.submission.WorkspaceSubmissionStatus;
}
",
                    "name": "UpdateWorkspaceSubmissionStatusRequest.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../../..\\";

export type UpdateWorkspaceSubmissionStatusResponse = UpdateWorkspaceSubmissionStatusResponse.SuccessResponse | UpdateWorkspaceSubmissionStatusResponse.ErrorResponse;

namespace UpdateWorkspaceSubmissionStatusResponse {
    export interface SuccessResponse {
        ok: true;
    }

    export interface ErrorResponse {
        ok: false;
        error: model.admin.UpdateWorkspaceSubmissionStatusErrorBody;
    }
}
",
                    "name": "UpdateWorkspaceSubmissionStatusResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export * from \\"./UpdateTestSubmissionStatusRequest\\";
export * from \\"./UpdateTestSubmissionStatusErrorBody\\";
export * from \\"./UpdateTestSubmissionStatusResponse\\";
export * from \\"./SendTestSubmissionUpdateRequest\\";
export * from \\"./SendTestSubmissionUpdateErrorBody\\";
export * from \\"./SendTestSubmissionUpdateResponse\\";
export * from \\"./UpdateWorkspaceSubmissionStatusRequest\\";
export * from \\"./UpdateWorkspaceSubmissionStatusErrorBody\\";
export * from \\"./UpdateWorkspaceSubmissionStatusResponse\\";
export * from \\"./SendWorkspaceSubmissionUpdateRequest\\";
export * from \\"./SendWorkspaceSubmissionUpdateErrorBody\\";
export * from \\"./SendWorkspaceSubmissionUpdateResponse\\";
export * from \\"./StoreTracedTestCaseRequestBody\\";
export * from \\"./StoreTracedTestCaseRequest\\";
export * from \\"./StoreTracedTestCaseErrorBody\\";
export * from \\"./StoreTracedTestCaseResponse\\";
export * from \\"./StoreTracedTestCaseV2Request\\";
export * from \\"./StoreTracedTestCaseV2ErrorBody\\";
export * from \\"./StoreTracedTestCaseV2Response\\";
export * from \\"./StoreTracedWorkspaceRequestBody\\";
export * from \\"./StoreTracedWorkspaceRequest\\";
export * from \\"./StoreTracedWorkspaceErrorBody\\";
export * from \\"./StoreTracedWorkspaceResponse\\";
export * from \\"./StoreTracedWorkspaceV2Request\\";
export * from \\"./StoreTracedWorkspaceV2ErrorBody\\";
export * from \\"./StoreTracedWorkspaceV2Response\\";
",
                    "name": "index.ts",
                    "type": "file",
                  },
                ],
                "name": "AdminService",
                "type": "directory",
              },
              Object {
                "contents": "export * from \\"./AdminService\\";
",
                "name": "index.ts",
                "type": "file",
              },
            ],
            "name": "service-types",
            "type": "directory",
          },
        ],
        "name": "admin",
        "type": "directory",
      },
      Object {
        "contents": Array [
          Object {
            "contents": "export * from \\"./types\\";
",
            "name": "index.ts",
            "type": "file",
          },
          Object {
            "contents": Array [
              Object {
                "contents": "import * as model from \\"../..\\";

export interface BinaryTreeNodeAndTreeValue {
    nodeId: model.commons.NodeId;
    fullTree: model.commons.BinaryTreeValue;
}
",
                "name": "BinaryTreeNodeAndTreeValue.ts",
                "type": "file",
              },
              Object {
                "contents": "import * as model from \\"../..\\";

export interface BinaryTreeNodeValue {
    nodeId: model.commons.NodeId;
    val: number;
    right: model.commons.NodeId | null | undefined;
    left: model.commons.NodeId | null | undefined;
}
",
                "name": "BinaryTreeNodeValue.ts",
                "type": "file",
              },
              Object {
                "contents": "import * as model from \\"../..\\";

export interface BinaryTreeValue {
    root: model.commons.NodeId | null | undefined;
    nodes: Record<model.commons.NodeId, model.commons.BinaryTreeNodeValue>;
}
",
                "name": "BinaryTreeValue.ts",
                "type": "file",
              },
              Object {
                "contents": "import * as model from \\"../..\\";

export interface DebugKeyValuePairs {
    key: model.commons.DebugVariableValue;
    value: model.commons.DebugVariableValue;
}
",
                "name": "DebugKeyValuePairs.ts",
                "type": "file",
              },
              Object {
                "contents": "import * as model from \\"../..\\";

export interface DebugMapValue {
    keyValuePairs: model.commons.DebugKeyValuePairs[];
}
",
                "name": "DebugMapValue.ts",
                "type": "file",
              },
              Object {
                "contents": "import { commons } from \\"../..\\";

export type DebugVariableValue =
    | DebugVariableValue.IntegerValue
    | DebugVariableValue.BooleanValue
    | DebugVariableValue.DoubleValue
    | DebugVariableValue.StringValue
    | DebugVariableValue.CharValue
    | DebugVariableValue.MapValue
    | DebugVariableValue.ListValue
    | DebugVariableValue.BinaryTreeNodeValue
    | DebugVariableValue.SinglyLinkedListNodeValue
    | DebugVariableValue.DoublyLinkedListNodeValue
    | DebugVariableValue.UndefinedValue
    | DebugVariableValue.NullValue
    | DebugVariableValue.GenericValue;

export declare namespace DebugVariableValue {
    interface IntegerValue {
        _type: \\"integerValue\\";
        integerValue: number;
    }

    interface BooleanValue {
        _type: \\"booleanValue\\";
        booleanValue: boolean;
    }

    interface DoubleValue {
        _type: \\"doubleValue\\";
        doubleValue: number;
    }

    interface StringValue {
        _type: \\"stringValue\\";
        stringValue: string;
    }

    interface CharValue {
        _type: \\"charValue\\";
        charValue: string;
    }

    interface MapValue extends commons.DebugMapValue {
        _type: \\"mapValue\\";
    }

    interface ListValue {
        _type: \\"listValue\\";
        listValue: commons.DebugVariableValue[];
    }

    interface BinaryTreeNodeValue extends commons.BinaryTreeNodeAndTreeValue {
        _type: \\"binaryTreeNodeValue\\";
    }

    interface SinglyLinkedListNodeValue extends commons.SinglyLinkedListNodeAndListValue {
        _type: \\"singlyLinkedListNodeValue\\";
    }

    interface DoublyLinkedListNodeValue extends commons.DoublyLinkedListNodeAndListValue {
        _type: \\"doublyLinkedListNodeValue\\";
    }

    interface UndefinedValue {
        _type: \\"undefinedValue\\";
    }

    interface NullValue {
        _type: \\"nullValue\\";
    }

    interface GenericValue extends commons.GenericValue {
        _type: \\"genericValue\\";
    }

    export interface _Visitor<Result> {
        integerValue: (value: number) => Result;
        booleanValue: (value: boolean) => Result;
        doubleValue: (value: number) => Result;
        stringValue: (value: string) => Result;
        charValue: (value: string) => Result;
        mapValue: (value: commons.DebugMapValue) => Result;
        listValue: (value: commons.DebugVariableValue[]) => Result;
        binaryTreeNodeValue: (value: commons.BinaryTreeNodeAndTreeValue) => Result;
        singlyLinkedListNodeValue: (value: commons.SinglyLinkedListNodeAndListValue) => Result;
        doublyLinkedListNodeValue: (value: commons.DoublyLinkedListNodeAndListValue) => Result;
        undefinedValue: () => Result;
        nullValue: () => Result;
        genericValue: (value: commons.GenericValue) => Result;
        _unknown: () => Result;
    }
}

export const DebugVariableValue = {
    integerValue: (value: number): DebugVariableValue.IntegerValue => ({
        integerValue: value,
        _type: \\"integerValue\\"
    }),

    booleanValue: (value: boolean): DebugVariableValue.BooleanValue => ({
        booleanValue: value,
        _type: \\"booleanValue\\"
    }),

    doubleValue: (value: number): DebugVariableValue.DoubleValue => ({
        doubleValue: value,
        _type: \\"doubleValue\\"
    }),

    stringValue: (value: string): DebugVariableValue.StringValue => ({
        stringValue: value,
        _type: \\"stringValue\\"
    }),

    charValue: (value: string): DebugVariableValue.CharValue => ({
        charValue: value,
        _type: \\"charValue\\"
    }),

    mapValue: (value: commons.DebugMapValue): DebugVariableValue.MapValue => ({
        ...value,
        _type: \\"mapValue\\"
    }),

    listValue: (value: commons.DebugVariableValue[]): DebugVariableValue.ListValue => ({
        listValue: value,
        _type: \\"listValue\\"
    }),

    binaryTreeNodeValue: (value: commons.BinaryTreeNodeAndTreeValue): DebugVariableValue.BinaryTreeNodeValue => ({
        ...value,
        _type: \\"binaryTreeNodeValue\\"
    }),

    singlyLinkedListNodeValue: (value: commons.SinglyLinkedListNodeAndListValue): DebugVariableValue.SinglyLinkedListNodeValue => ({
        ...value,
        _type: \\"singlyLinkedListNodeValue\\"
    }),

    doublyLinkedListNodeValue: (value: commons.DoublyLinkedListNodeAndListValue): DebugVariableValue.DoublyLinkedListNodeValue => ({
        ...value,
        _type: \\"doublyLinkedListNodeValue\\"
    }),

    undefinedValue: (): DebugVariableValue.UndefinedValue => ({
        _type: \\"undefinedValue\\"
    }),

    nullValue: (): DebugVariableValue.NullValue => ({
        _type: \\"nullValue\\"
    }),

    genericValue: (value: commons.GenericValue): DebugVariableValue.GenericValue => ({
        ...value,
        _type: \\"genericValue\\"
    }),

    _visit: <Result>(value: DebugVariableValue, visitor: DebugVariableValue._Visitor<Result>): Result => {
        switch (value._type) {
            case \\"integerValue\\": return visitor.integerValue(value.integerValue);
            case \\"booleanValue\\": return visitor.booleanValue(value.booleanValue);
            case \\"doubleValue\\": return visitor.doubleValue(value.doubleValue);
            case \\"stringValue\\": return visitor.stringValue(value.stringValue);
            case \\"charValue\\": return visitor.charValue(value.charValue);
            case \\"mapValue\\": return visitor.mapValue(value);
            case \\"listValue\\": return visitor.listValue(value.listValue);
            case \\"binaryTreeNodeValue\\": return visitor.binaryTreeNodeValue(value);
            case \\"singlyLinkedListNodeValue\\": return visitor.singlyLinkedListNodeValue(value);
            case \\"doublyLinkedListNodeValue\\": return visitor.doublyLinkedListNodeValue(value);
            case \\"undefinedValue\\": return visitor.undefinedValue();
            case \\"nullValue\\": return visitor.nullValue();
            case \\"genericValue\\": return visitor.genericValue(value);
            default: return visitor._unknown();
        }
    },

    _types: (): DebugVariableValue[\\"_type\\"][] => [\\"integerValue\\", \\"booleanValue\\", \\"doubleValue\\", \\"stringValue\\", \\"charValue\\", \\"mapValue\\", \\"listValue\\", \\"binaryTreeNodeValue\\", \\"singlyLinkedListNodeValue\\", \\"doublyLinkedListNodeValue\\", \\"undefinedValue\\", \\"nullValue\\", \\"genericValue\\"],
} as const;
",
                "name": "DebugVariableValue.ts",
                "type": "file",
              },
              Object {
                "contents": "import * as model from \\"../..\\";

export interface DoublyLinkedListNodeAndListValue {
    nodeId: model.commons.NodeId;
    fullList: model.commons.DoublyLinkedListValue;
}
",
                "name": "DoublyLinkedListNodeAndListValue.ts",
                "type": "file",
              },
              Object {
                "contents": "import * as model from \\"../..\\";

export interface DoublyLinkedListNodeValue {
    nodeId: model.commons.NodeId;
    val: number;
    next: model.commons.NodeId | null | undefined;
    prev: model.commons.NodeId | null | undefined;
}
",
                "name": "DoublyLinkedListNodeValue.ts",
                "type": "file",
              },
              Object {
                "contents": "import * as model from \\"../..\\";

export interface DoublyLinkedListValue {
    head: model.commons.NodeId | null | undefined;
    nodes: Record<model.commons.NodeId, model.commons.DoublyLinkedListNodeValue>;
}
",
                "name": "DoublyLinkedListValue.ts",
                "type": "file",
              },
              Object {
                "contents": "export interface FileInfo {
    filename: string;
    contents: string;
}
",
                "name": "FileInfo.ts",
                "type": "file",
              },
              Object {
                "contents": "export interface GenericValue {
    stringifiedType: string | null | undefined;
    stringifiedValue: string;
}
",
                "name": "GenericValue.ts",
                "type": "file",
              },
              Object {
                "contents": "import * as model from \\"../..\\";

export interface KeyValuePair {
    key: model.commons.VariableValue;
    value: model.commons.VariableValue;
}
",
                "name": "KeyValuePair.ts",
                "type": "file",
              },
              Object {
                "contents": "export type Language =
    | \\"JAVA\\"
    | \\"JAVASCRIPT\\"
    | \\"PYTHON\\";

export const Language = {
    Java: \\"JAVA\\",
    Javascript: \\"JAVASCRIPT\\",
    Python: \\"PYTHON\\",

    _visit: <Result>(value: Language, visitor: Language._Visitor<Result>): Result => {
        switch (value) {
            case Language.Java: return visitor.java();
            case Language.Javascript: return visitor.javascript();
            case Language.Python: return visitor.python();
            default: return visitor._unknown();
        }
    },

    _values: (): Language[] => [Language.Java, Language.Javascript, Language.Python],
} as const;

export declare namespace Language {
    type Java = \\"JAVA\\";
    type Javascript = \\"JAVASCRIPT\\";
    type Python = \\"PYTHON\\";

    export interface _Visitor<Result> {
        java: () => Result;
        javascript: () => Result;
        python: () => Result;
        _unknown: () => Result;
    }
}
",
                "name": "Language.ts",
                "type": "file",
              },
              Object {
                "contents": "import * as model from \\"../..\\";

export interface ListType {
    valueType: model.commons.VariableType;
    /** Whether this list is fixed-size (for languages that supports fixed-size lists). Defaults to false. */
    isFixedLength: boolean | null | undefined;
}
",
                "name": "ListType.ts",
                "type": "file",
              },
              Object {
                "contents": "import * as model from \\"../..\\";

export interface MapType {
    keyType: model.commons.VariableType;
    valueType: model.commons.VariableType;
}
",
                "name": "MapType.ts",
                "type": "file",
              },
              Object {
                "contents": "import * as model from \\"../..\\";

export interface MapValue {
    keyValuePairs: model.commons.KeyValuePair[];
}
",
                "name": "MapValue.ts",
                "type": "file",
              },
              Object {
                "contents": "export type NodeId = string & {
    __NodeId: void;
};

export const NodeId = {
    of: (value: string): NodeId => value as NodeId
};
",
                "name": "NodeId.ts",
                "type": "file",
              },
              Object {
                "contents": "export type ProblemId = string & {
    __ProblemId: void;
};

export const ProblemId = {
    of: (value: string): ProblemId => value as ProblemId
};
",
                "name": "ProblemId.ts",
                "type": "file",
              },
              Object {
                "contents": "import * as model from \\"../..\\";

export interface SinglyLinkedListNodeAndListValue {
    nodeId: model.commons.NodeId;
    fullList: model.commons.SinglyLinkedListValue;
}
",
                "name": "SinglyLinkedListNodeAndListValue.ts",
                "type": "file",
              },
              Object {
                "contents": "import * as model from \\"../..\\";

export interface SinglyLinkedListNodeValue {
    nodeId: model.commons.NodeId;
    val: number;
    next: model.commons.NodeId | null | undefined;
}
",
                "name": "SinglyLinkedListNodeValue.ts",
                "type": "file",
              },
              Object {
                "contents": "import * as model from \\"../..\\";

export interface SinglyLinkedListValue {
    head: model.commons.NodeId | null | undefined;
    nodes: Record<model.commons.NodeId, model.commons.SinglyLinkedListNodeValue>;
}
",
                "name": "SinglyLinkedListValue.ts",
                "type": "file",
              },
              Object {
                "contents": "import * as model from \\"../..\\";

export interface TestCase {
    id: string;
    params: model.commons.VariableValue[];
}
",
                "name": "TestCase.ts",
                "type": "file",
              },
              Object {
                "contents": "import * as model from \\"../..\\";

export interface TestCaseWithExpectedResult {
    testCase: model.commons.TestCase;
    expectedResult: model.commons.VariableValue;
}
",
                "name": "TestCaseWithExpectedResult.ts",
                "type": "file",
              },
              Object {
                "contents": "export type UserId = string & {
    __UserId: void;
};

export const UserId = {
    of: (value: string): UserId => value as UserId
};
",
                "name": "UserId.ts",
                "type": "file",
              },
              Object {
                "contents": "import { commons } from \\"../..\\";

export type VariableType =
    | VariableType.IntegerType
    | VariableType.DoubleType
    | VariableType.BooleanType
    | VariableType.StringType
    | VariableType.CharType
    | VariableType.ListType
    | VariableType.MapType
    | VariableType.BinaryTreeType
    | VariableType.SinglyLinkedListType
    | VariableType.DoublyLinkedListType;

export declare namespace VariableType {
    interface IntegerType {
        _type: \\"integerType\\";
    }

    interface DoubleType {
        _type: \\"doubleType\\";
    }

    interface BooleanType {
        _type: \\"booleanType\\";
    }

    interface StringType {
        _type: \\"stringType\\";
    }

    interface CharType {
        _type: \\"charType\\";
    }

    interface ListType extends commons.ListType {
        _type: \\"listType\\";
    }

    interface MapType extends commons.MapType {
        _type: \\"mapType\\";
    }

    interface BinaryTreeType {
        _type: \\"binaryTreeType\\";
    }

    interface SinglyLinkedListType {
        _type: \\"singlyLinkedListType\\";
    }

    interface DoublyLinkedListType {
        _type: \\"doublyLinkedListType\\";
    }

    export interface _Visitor<Result> {
        integerType: () => Result;
        doubleType: () => Result;
        booleanType: () => Result;
        stringType: () => Result;
        charType: () => Result;
        listType: (value: commons.ListType) => Result;
        mapType: (value: commons.MapType) => Result;
        binaryTreeType: () => Result;
        singlyLinkedListType: () => Result;
        doublyLinkedListType: () => Result;
        _unknown: () => Result;
    }
}

export const VariableType = {
    integerType: (): VariableType.IntegerType => ({
        _type: \\"integerType\\"
    }),

    doubleType: (): VariableType.DoubleType => ({
        _type: \\"doubleType\\"
    }),

    booleanType: (): VariableType.BooleanType => ({
        _type: \\"booleanType\\"
    }),

    stringType: (): VariableType.StringType => ({
        _type: \\"stringType\\"
    }),

    charType: (): VariableType.CharType => ({
        _type: \\"charType\\"
    }),

    listType: (value: commons.ListType): VariableType.ListType => ({
        ...value,
        _type: \\"listType\\"
    }),

    mapType: (value: commons.MapType): VariableType.MapType => ({
        ...value,
        _type: \\"mapType\\"
    }),

    binaryTreeType: (): VariableType.BinaryTreeType => ({
        _type: \\"binaryTreeType\\"
    }),

    singlyLinkedListType: (): VariableType.SinglyLinkedListType => ({
        _type: \\"singlyLinkedListType\\"
    }),

    doublyLinkedListType: (): VariableType.DoublyLinkedListType => ({
        _type: \\"doublyLinkedListType\\"
    }),

    _visit: <Result>(value: VariableType, visitor: VariableType._Visitor<Result>): Result => {
        switch (value._type) {
            case \\"integerType\\": return visitor.integerType();
            case \\"doubleType\\": return visitor.doubleType();
            case \\"booleanType\\": return visitor.booleanType();
            case \\"stringType\\": return visitor.stringType();
            case \\"charType\\": return visitor.charType();
            case \\"listType\\": return visitor.listType(value);
            case \\"mapType\\": return visitor.mapType(value);
            case \\"binaryTreeType\\": return visitor.binaryTreeType();
            case \\"singlyLinkedListType\\": return visitor.singlyLinkedListType();
            case \\"doublyLinkedListType\\": return visitor.doublyLinkedListType();
            default: return visitor._unknown();
        }
    },

    _types: (): VariableType[\\"_type\\"][] => [\\"integerType\\", \\"doubleType\\", \\"booleanType\\", \\"stringType\\", \\"charType\\", \\"listType\\", \\"mapType\\", \\"binaryTreeType\\", \\"singlyLinkedListType\\", \\"doublyLinkedListType\\"],
} as const;
",
                "name": "VariableType.ts",
                "type": "file",
              },
              Object {
                "contents": "import { commons } from \\"../..\\";

export type VariableValue =
    | VariableValue.IntegerValue
    | VariableValue.BooleanValue
    | VariableValue.DoubleValue
    | VariableValue.StringValue
    | VariableValue.CharValue
    | VariableValue.MapValue
    | VariableValue.ListValue
    | VariableValue.BinaryTreeValue
    | VariableValue.SinglyLinkedListValue
    | VariableValue.DoublyLinkedListValue
    | VariableValue.NullValue;

export declare namespace VariableValue {
    interface IntegerValue {
        _type: \\"integerValue\\";
        integerValue: number;
    }

    interface BooleanValue {
        _type: \\"booleanValue\\";
        booleanValue: boolean;
    }

    interface DoubleValue {
        _type: \\"doubleValue\\";
        doubleValue: number;
    }

    interface StringValue {
        _type: \\"stringValue\\";
        stringValue: string;
    }

    interface CharValue {
        _type: \\"charValue\\";
        charValue: string;
    }

    interface MapValue extends commons.MapValue {
        _type: \\"mapValue\\";
    }

    interface ListValue {
        _type: \\"listValue\\";
        listValue: commons.VariableValue[];
    }

    interface BinaryTreeValue extends commons.BinaryTreeValue {
        _type: \\"binaryTreeValue\\";
    }

    interface SinglyLinkedListValue extends commons.SinglyLinkedListValue {
        _type: \\"singlyLinkedListValue\\";
    }

    interface DoublyLinkedListValue extends commons.DoublyLinkedListValue {
        _type: \\"doublyLinkedListValue\\";
    }

    interface NullValue {
        _type: \\"nullValue\\";
    }

    export interface _Visitor<Result> {
        integerValue: (value: number) => Result;
        booleanValue: (value: boolean) => Result;
        doubleValue: (value: number) => Result;
        stringValue: (value: string) => Result;
        charValue: (value: string) => Result;
        mapValue: (value: commons.MapValue) => Result;
        listValue: (value: commons.VariableValue[]) => Result;
        binaryTreeValue: (value: commons.BinaryTreeValue) => Result;
        singlyLinkedListValue: (value: commons.SinglyLinkedListValue) => Result;
        doublyLinkedListValue: (value: commons.DoublyLinkedListValue) => Result;
        nullValue: () => Result;
        _unknown: () => Result;
    }
}

export const VariableValue = {
    integerValue: (value: number): VariableValue.IntegerValue => ({
        integerValue: value,
        _type: \\"integerValue\\"
    }),

    booleanValue: (value: boolean): VariableValue.BooleanValue => ({
        booleanValue: value,
        _type: \\"booleanValue\\"
    }),

    doubleValue: (value: number): VariableValue.DoubleValue => ({
        doubleValue: value,
        _type: \\"doubleValue\\"
    }),

    stringValue: (value: string): VariableValue.StringValue => ({
        stringValue: value,
        _type: \\"stringValue\\"
    }),

    charValue: (value: string): VariableValue.CharValue => ({
        charValue: value,
        _type: \\"charValue\\"
    }),

    mapValue: (value: commons.MapValue): VariableValue.MapValue => ({
        ...value,
        _type: \\"mapValue\\"
    }),

    listValue: (value: commons.VariableValue[]): VariableValue.ListValue => ({
        listValue: value,
        _type: \\"listValue\\"
    }),

    binaryTreeValue: (value: commons.BinaryTreeValue): VariableValue.BinaryTreeValue => ({
        ...value,
        _type: \\"binaryTreeValue\\"
    }),

    singlyLinkedListValue: (value: commons.SinglyLinkedListValue): VariableValue.SinglyLinkedListValue => ({
        ...value,
        _type: \\"singlyLinkedListValue\\"
    }),

    doublyLinkedListValue: (value: commons.DoublyLinkedListValue): VariableValue.DoublyLinkedListValue => ({
        ...value,
        _type: \\"doublyLinkedListValue\\"
    }),

    nullValue: (): VariableValue.NullValue => ({
        _type: \\"nullValue\\"
    }),

    _visit: <Result>(value: VariableValue, visitor: VariableValue._Visitor<Result>): Result => {
        switch (value._type) {
            case \\"integerValue\\": return visitor.integerValue(value.integerValue);
            case \\"booleanValue\\": return visitor.booleanValue(value.booleanValue);
            case \\"doubleValue\\": return visitor.doubleValue(value.doubleValue);
            case \\"stringValue\\": return visitor.stringValue(value.stringValue);
            case \\"charValue\\": return visitor.charValue(value.charValue);
            case \\"mapValue\\": return visitor.mapValue(value);
            case \\"listValue\\": return visitor.listValue(value.listValue);
            case \\"binaryTreeValue\\": return visitor.binaryTreeValue(value);
            case \\"singlyLinkedListValue\\": return visitor.singlyLinkedListValue(value);
            case \\"doublyLinkedListValue\\": return visitor.doublyLinkedListValue(value);
            case \\"nullValue\\": return visitor.nullValue();
            default: return visitor._unknown();
        }
    },

    _types: (): VariableValue[\\"_type\\"][] => [\\"integerValue\\", \\"booleanValue\\", \\"doubleValue\\", \\"stringValue\\", \\"charValue\\", \\"mapValue\\", \\"listValue\\", \\"binaryTreeValue\\", \\"singlyLinkedListValue\\", \\"doublyLinkedListValue\\", \\"nullValue\\"],
} as const;
",
                "name": "VariableValue.ts",
                "type": "file",
              },
              Object {
                "contents": "export * from \\"./UserId\\";
export * from \\"./ProblemId\\";
export * from \\"./NodeId\\";
export * from \\"./VariableType\\";
export * from \\"./ListType\\";
export * from \\"./MapType\\";
export * from \\"./VariableValue\\";
export * from \\"./DebugVariableValue\\";
export * from \\"./GenericValue\\";
export * from \\"./MapValue\\";
export * from \\"./KeyValuePair\\";
export * from \\"./BinaryTreeValue\\";
export * from \\"./BinaryTreeNodeValue\\";
export * from \\"./BinaryTreeNodeAndTreeValue\\";
export * from \\"./SinglyLinkedListValue\\";
export * from \\"./SinglyLinkedListNodeValue\\";
export * from \\"./SinglyLinkedListNodeAndListValue\\";
export * from \\"./DoublyLinkedListValue\\";
export * from \\"./DoublyLinkedListNodeValue\\";
export * from \\"./DoublyLinkedListNodeAndListValue\\";
export * from \\"./DebugMapValue\\";
export * from \\"./DebugKeyValuePairs\\";
export * from \\"./TestCase\\";
export * from \\"./TestCaseWithExpectedResult\\";
export * from \\"./FileInfo\\";
export * from \\"./Language\\";
",
                "name": "index.ts",
                "type": "file",
              },
            ],
            "name": "types",
            "type": "directory",
          },
        ],
        "name": "commons",
        "type": "directory",
      },
      Object {
        "contents": Array [
          Object {
            "contents": "export * from \\"./service-types\\";
",
            "name": "index.ts",
            "type": "file",
          },
          Object {
            "contents": Array [
              Object {
                "contents": Array [
                  Object {
                    "contents": "export type GetHomepageProblemsErrorBody = never;

export declare namespace GetHomepageProblemsErrorBody {
    export interface _Visitor<Result> {
        _unknown: () => Result;
    }
}

export const GetHomepageProblemsErrorBody = {
    _visit: <Result>(_value: GetHomepageProblemsErrorBody, visitor: GetHomepageProblemsErrorBody._Visitor<Result>): Result => {
        return visitor._unknown();
    },

    _types: (): GetHomepageProblemsErrorBody[\\"_error\\"][] => [],
} as const;
",
                    "name": "GetHomepageProblemsErrorBody.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../../..\\";

export type GetHomepageProblemsResponse = GetHomepageProblemsResponse.SuccessResponse | GetHomepageProblemsResponse.ErrorResponse;

namespace GetHomepageProblemsResponse {
    export interface SuccessResponse {
        ok: true;
        body: model.commons.ProblemId[];
    }

    export interface ErrorResponse {
        ok: false;
        error: model.homepage.GetHomepageProblemsErrorBody;
    }
}
",
                    "name": "GetHomepageProblemsResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export type SetHomepageProblemsErrorBody = never;

export declare namespace SetHomepageProblemsErrorBody {
    export interface _Visitor<Result> {
        _unknown: () => Result;
    }
}

export const SetHomepageProblemsErrorBody = {
    _visit: <Result>(_value: SetHomepageProblemsErrorBody, visitor: SetHomepageProblemsErrorBody._Visitor<Result>): Result => {
        return visitor._unknown();
    },

    _types: (): SetHomepageProblemsErrorBody[\\"_error\\"][] => [],
} as const;
",
                    "name": "SetHomepageProblemsErrorBody.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../../..\\";

export type SetHomepageProblemsResponse = SetHomepageProblemsResponse.SuccessResponse | SetHomepageProblemsResponse.ErrorResponse;

namespace SetHomepageProblemsResponse {
    export interface SuccessResponse {
        ok: true;
    }

    export interface ErrorResponse {
        ok: false;
        error: model.homepage.SetHomepageProblemsErrorBody;
    }
}
",
                    "name": "SetHomepageProblemsResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export * from \\"./GetHomepageProblemsErrorBody\\";
export * from \\"./GetHomepageProblemsResponse\\";
export * from \\"./SetHomepageProblemsErrorBody\\";
export * from \\"./SetHomepageProblemsResponse\\";
",
                    "name": "index.ts",
                    "type": "file",
                  },
                ],
                "name": "HomepageProblemService",
                "type": "directory",
              },
              Object {
                "contents": "export * from \\"./HomepageProblemService\\";
",
                "name": "index.ts",
                "type": "file",
              },
            ],
            "name": "service-types",
            "type": "directory",
          },
        ],
        "name": "homepage",
        "type": "directory",
      },
      Object {
        "contents": "export * as commons from \\"./commons\\";
export * as langserver from \\"./langserver\\";
export * as migration from \\"./migration\\";
export * as playlist from \\"./playlist\\";
export * as problem from \\"./problem\\";
export * as problemV2 from \\"./problemV2\\";
export * as submission from \\"./submission\\";
export * as admin from \\"./admin\\";
export * as homepage from \\"./homepage\\";
export * as sysprop from \\"./sysprop\\";
",
        "name": "index.ts",
        "type": "file",
      },
      Object {
        "contents": Array [
          Object {
            "contents": "export * from \\"./types\\";
",
            "name": "index.ts",
            "type": "file",
          },
          Object {
            "contents": Array [
              Object {
                "contents": "export interface LangServerRequest {
    request: unknown;
}
",
                "name": "LangServerRequest.ts",
                "type": "file",
              },
              Object {
                "contents": "export interface LangServerResponse {
    response: unknown;
}
",
                "name": "LangServerResponse.ts",
                "type": "file",
              },
              Object {
                "contents": "export * from \\"./LangServerRequest\\";
export * from \\"./LangServerResponse\\";
",
                "name": "index.ts",
                "type": "file",
              },
            ],
            "name": "types",
            "type": "directory",
          },
        ],
        "name": "langserver",
        "type": "directory",
      },
      Object {
        "contents": Array [
          Object {
            "contents": "export * from \\"./types\\";
export * from \\"./service-types\\";
",
            "name": "index.ts",
            "type": "file",
          },
          Object {
            "contents": Array [
              Object {
                "contents": Array [
                  Object {
                    "contents": "export type GetAttemptedMigrationsErrorBody = never;

export declare namespace GetAttemptedMigrationsErrorBody {
    export interface _Visitor<Result> {
        _unknown: () => Result;
    }
}

export const GetAttemptedMigrationsErrorBody = {
    _visit: <Result>(_value: GetAttemptedMigrationsErrorBody, visitor: GetAttemptedMigrationsErrorBody._Visitor<Result>): Result => {
        return visitor._unknown();
    },

    _types: (): GetAttemptedMigrationsErrorBody[\\"_error\\"][] => [],
} as const;
",
                    "name": "GetAttemptedMigrationsErrorBody.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../../..\\";

export type GetAttemptedMigrationsResponse = GetAttemptedMigrationsResponse.SuccessResponse | GetAttemptedMigrationsResponse.ErrorResponse;

namespace GetAttemptedMigrationsResponse {
    export interface SuccessResponse {
        ok: true;
        body: model.migration.Migration[];
    }

    export interface ErrorResponse {
        ok: false;
        error: model.migration.GetAttemptedMigrationsErrorBody;
    }
}
",
                    "name": "GetAttemptedMigrationsResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export * from \\"./GetAttemptedMigrationsErrorBody\\";
export * from \\"./GetAttemptedMigrationsResponse\\";
",
                    "name": "index.ts",
                    "type": "file",
                  },
                ],
                "name": "MigrationInfoService",
                "type": "directory",
              },
              Object {
                "contents": "export * from \\"./MigrationInfoService\\";
",
                "name": "index.ts",
                "type": "file",
              },
            ],
            "name": "service-types",
            "type": "directory",
          },
          Object {
            "contents": Array [
              Object {
                "contents": "import * as model from \\"../..\\";

export interface Migration {
    name: string;
    status: model.migration.MigrationStatus;
}
",
                "name": "Migration.ts",
                "type": "file",
              },
              Object {
                "contents": "export type MigrationStatus =
    | \\"RUNNING\\"
    | \\"FAILED\\"
    | \\"FINISHED\\";

export const MigrationStatus = {
    Running: \\"RUNNING\\",
    Failed: \\"FAILED\\",
    Finished: \\"FINISHED\\",

    _visit: <Result>(value: MigrationStatus, visitor: MigrationStatus._Visitor<Result>): Result => {
        switch (value) {
            case MigrationStatus.Running: return visitor.running();
            case MigrationStatus.Failed: return visitor.failed();
            case MigrationStatus.Finished: return visitor.finished();
            default: return visitor._unknown();
        }
    },

    _values: (): MigrationStatus[] => [MigrationStatus.Running, MigrationStatus.Failed, MigrationStatus.Finished],
} as const;

export declare namespace MigrationStatus {
    type Running = \\"RUNNING\\";
    type Failed = \\"FAILED\\";
    type Finished = \\"FINISHED\\";

    export interface _Visitor<Result> {
        running: () => Result;
        failed: () => Result;
        finished: () => Result;
        _unknown: () => Result;
    }
}
",
                "name": "MigrationStatus.ts",
                "type": "file",
              },
              Object {
                "contents": "export * from \\"./MigrationStatus\\";
export * from \\"./Migration\\";
",
                "name": "index.ts",
                "type": "file",
              },
            ],
            "name": "types",
            "type": "directory",
          },
        ],
        "name": "migration",
        "type": "directory",
      },
      Object {
        "contents": Array [
          Object {
            "contents": "export * from \\"./types\\";
export * from \\"./service-types\\";
",
            "name": "index.ts",
            "type": "file",
          },
          Object {
            "contents": Array [
              Object {
                "contents": Array [
                  Object {
                    "contents": "export type CreatePlaylistErrorBody = never;

export declare namespace CreatePlaylistErrorBody {
    export interface _Visitor<Result> {
        _unknown: () => Result;
    }
}

export const CreatePlaylistErrorBody = {
    _visit: <Result>(_value: CreatePlaylistErrorBody, visitor: CreatePlaylistErrorBody._Visitor<Result>): Result => {
        return visitor._unknown();
    },

    _types: (): CreatePlaylistErrorBody[\\"_error\\"][] => [],
} as const;
",
                    "name": "CreatePlaylistErrorBody.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../../..\\";

export interface CreatePlaylistRequest {
    name: string;
    problems: model.commons.ProblemId[];
}
",
                    "name": "CreatePlaylistRequest.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../../..\\";

export type CreatePlaylistResponse = CreatePlaylistResponse.SuccessResponse | CreatePlaylistResponse.ErrorResponse;

namespace CreatePlaylistResponse {
    export interface SuccessResponse {
        ok: true;
        body: model.playlist.Playlist;
    }

    export interface ErrorResponse {
        ok: false;
        error: model.playlist.CreatePlaylistErrorBody;
    }
}
",
                    "name": "CreatePlaylistResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export type DeletePlaylistErrorBody = never;

export declare namespace DeletePlaylistErrorBody {
    export interface _Visitor<Result> {
        _unknown: () => Result;
    }
}

export const DeletePlaylistErrorBody = {
    _visit: <Result>(_value: DeletePlaylistErrorBody, visitor: DeletePlaylistErrorBody._Visitor<Result>): Result => {
        return visitor._unknown();
    },

    _types: (): DeletePlaylistErrorBody[\\"_error\\"][] => [],
} as const;
",
                    "name": "DeletePlaylistErrorBody.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../../..\\";

export interface DeletePlaylistRequest {
    playlistId: model.playlist.PlaylistId;
}
",
                    "name": "DeletePlaylistRequest.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../../..\\";

export type DeletePlaylistResponse = DeletePlaylistResponse.SuccessResponse | DeletePlaylistResponse.ErrorResponse;

namespace DeletePlaylistResponse {
    export interface SuccessResponse {
        ok: true;
    }

    export interface ErrorResponse {
        ok: false;
        error: model.playlist.DeletePlaylistErrorBody;
    }
}
",
                    "name": "DeletePlaylistResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export type GetPlaylistErrorBody = never;

export declare namespace GetPlaylistErrorBody {
    export interface _Visitor<Result> {
        _unknown: () => Result;
    }
}

export const GetPlaylistErrorBody = {
    _visit: <Result>(_value: GetPlaylistErrorBody, visitor: GetPlaylistErrorBody._Visitor<Result>): Result => {
        return visitor._unknown();
    },

    _types: (): GetPlaylistErrorBody[\\"_error\\"][] => [],
} as const;
",
                    "name": "GetPlaylistErrorBody.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../../..\\";

export interface GetPlaylistRequest {
    playlistId: model.playlist.PlaylistId;
}
",
                    "name": "GetPlaylistRequest.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../../..\\";

export type GetPlaylistResponse = GetPlaylistResponse.SuccessResponse | GetPlaylistResponse.ErrorResponse;

namespace GetPlaylistResponse {
    export interface SuccessResponse {
        ok: true;
        body: model.playlist.Playlist;
    }

    export interface ErrorResponse {
        ok: false;
        error: model.playlist.GetPlaylistErrorBody;
    }
}
",
                    "name": "GetPlaylistResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export type GetPlaylistsErrorBody = never;

export declare namespace GetPlaylistsErrorBody {
    export interface _Visitor<Result> {
        _unknown: () => Result;
    }
}

export const GetPlaylistsErrorBody = {
    _visit: <Result>(_value: GetPlaylistsErrorBody, visitor: GetPlaylistsErrorBody._Visitor<Result>): Result => {
        return visitor._unknown();
    },

    _types: (): GetPlaylistsErrorBody[\\"_error\\"][] => [],
} as const;
",
                    "name": "GetPlaylistsErrorBody.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../../..\\";

export type GetPlaylistsResponse = GetPlaylistsResponse.SuccessResponse | GetPlaylistsResponse.ErrorResponse;

namespace GetPlaylistsResponse {
    export interface SuccessResponse {
        ok: true;
        body: model.playlist.Playlist[];
    }

    export interface ErrorResponse {
        ok: false;
        error: model.playlist.GetPlaylistsErrorBody;
    }
}
",
                    "name": "GetPlaylistsResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export type UpdatePlaylistErrorBody = never;

export declare namespace UpdatePlaylistErrorBody {
    export interface _Visitor<Result> {
        _unknown: () => Result;
    }
}

export const UpdatePlaylistErrorBody = {
    _visit: <Result>(_value: UpdatePlaylistErrorBody, visitor: UpdatePlaylistErrorBody._Visitor<Result>): Result => {
        return visitor._unknown();
    },

    _types: (): UpdatePlaylistErrorBody[\\"_error\\"][] => [],
} as const;
",
                    "name": "UpdatePlaylistErrorBody.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../../..\\";

export interface UpdatePlaylistRequest {
    playlistId: model.playlist.PlaylistId;
    body: model.playlist.UpdatePlaylistRequestBody;
}
",
                    "name": "UpdatePlaylistRequest.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../../..\\";

export interface UpdatePlaylistRequestBody {
    name: string;
    problems: model.commons.ProblemId[];
}
",
                    "name": "UpdatePlaylistRequestBody.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../../..\\";

export type UpdatePlaylistResponse = UpdatePlaylistResponse.SuccessResponse | UpdatePlaylistResponse.ErrorResponse;

namespace UpdatePlaylistResponse {
    export interface SuccessResponse {
        ok: true;
        body: model.playlist.Playlist;
    }

    export interface ErrorResponse {
        ok: false;
        error: model.playlist.UpdatePlaylistErrorBody;
    }
}
",
                    "name": "UpdatePlaylistResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export * from \\"./CreatePlaylistRequest\\";
export * from \\"./CreatePlaylistErrorBody\\";
export * from \\"./CreatePlaylistResponse\\";
export * from \\"./GetPlaylistsErrorBody\\";
export * from \\"./GetPlaylistsResponse\\";
export * from \\"./GetPlaylistRequest\\";
export * from \\"./GetPlaylistErrorBody\\";
export * from \\"./GetPlaylistResponse\\";
export * from \\"./UpdatePlaylistRequestBody\\";
export * from \\"./UpdatePlaylistRequest\\";
export * from \\"./UpdatePlaylistErrorBody\\";
export * from \\"./UpdatePlaylistResponse\\";
export * from \\"./DeletePlaylistRequest\\";
export * from \\"./DeletePlaylistErrorBody\\";
export * from \\"./DeletePlaylistResponse\\";
",
                    "name": "index.ts",
                    "type": "file",
                  },
                ],
                "name": "PlaylistCrudService",
                "type": "directory",
              },
              Object {
                "contents": "export * from \\"./PlaylistCrudService\\";
",
                "name": "index.ts",
                "type": "file",
              },
            ],
            "name": "service-types",
            "type": "directory",
          },
          Object {
            "contents": Array [
              Object {
                "contents": "import * as model from \\"../..\\";

export interface Playlist {
    playlistId: model.playlist.PlaylistId;
    name: string;
    problems: model.commons.ProblemId[];
    ownerId: model.commons.UserId;
}
",
                "name": "Playlist.ts",
                "type": "file",
              },
              Object {
                "contents": "export type PlaylistId = string & {
    __PlaylistId: void;
};

export const PlaylistId = {
    of: (value: string): PlaylistId => value as PlaylistId
};
",
                "name": "PlaylistId.ts",
                "type": "file",
              },
              Object {
                "contents": "export * from \\"./PlaylistId\\";
export * from \\"./Playlist\\";
",
                "name": "index.ts",
                "type": "file",
              },
            ],
            "name": "types",
            "type": "directory",
          },
        ],
        "name": "playlist",
        "type": "directory",
      },
      Object {
        "contents": Array [
          Object {
            "contents": "export * from \\"./types\\";
export * from \\"./service-types\\";
",
            "name": "index.ts",
            "type": "file",
          },
          Object {
            "contents": Array [
              Object {
                "contents": Array [
                  Object {
                    "contents": "export type CreateProblemErrorBody = never;

export declare namespace CreateProblemErrorBody {
    export interface _Visitor<Result> {
        _unknown: () => Result;
    }
}

export const CreateProblemErrorBody = {
    _visit: <Result>(_value: CreateProblemErrorBody, visitor: CreateProblemErrorBody._Visitor<Result>): Result => {
        return visitor._unknown();
    },

    _types: (): CreateProblemErrorBody[\\"_error\\"][] => [],
} as const;
",
                    "name": "CreateProblemErrorBody.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export type DeleteProblemErrorBody = never;

export declare namespace DeleteProblemErrorBody {
    export interface _Visitor<Result> {
        _unknown: () => Result;
    }
}

export const DeleteProblemErrorBody = {
    _visit: <Result>(_value: DeleteProblemErrorBody, visitor: DeleteProblemErrorBody._Visitor<Result>): Result => {
        return visitor._unknown();
    },

    _types: (): DeleteProblemErrorBody[\\"_error\\"][] => [],
} as const;
",
                    "name": "DeleteProblemErrorBody.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../../..\\";

export interface DeleteProblemRequest {
    problemId: model.commons.ProblemId;
}
",
                    "name": "DeleteProblemRequest.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../../..\\";

export type DeleteProblemResponse = DeleteProblemResponse.SuccessResponse | DeleteProblemResponse.ErrorResponse;

namespace DeleteProblemResponse {
    export interface SuccessResponse {
        ok: true;
    }

    export interface ErrorResponse {
        ok: false;
        error: model.problem.DeleteProblemErrorBody;
    }
}
",
                    "name": "DeleteProblemResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export type GetDefaultStarterFilesErrorBody = never;

export declare namespace GetDefaultStarterFilesErrorBody {
    export interface _Visitor<Result> {
        _unknown: () => Result;
    }
}

export const GetDefaultStarterFilesErrorBody = {
    _visit: <Result>(_value: GetDefaultStarterFilesErrorBody, visitor: GetDefaultStarterFilesErrorBody._Visitor<Result>): Result => {
        return visitor._unknown();
    },

    _types: (): GetDefaultStarterFilesErrorBody[\\"_error\\"][] => [],
} as const;
",
                    "name": "GetDefaultStarterFilesErrorBody.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../../..\\";

export interface GetDefaultStarterFilesRequest {
    inputParams: model.problem.VariableTypeAndName[];
    outputType: model.commons.VariableType;
    methodName: string;
}
",
                    "name": "GetDefaultStarterFilesRequest.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../../..\\";

export type GetDefaultStarterFilesResponse = GetDefaultStarterFilesResponse.SuccessResponse | GetDefaultStarterFilesResponse.ErrorResponse;

namespace GetDefaultStarterFilesResponse {
    export interface SuccessResponse {
        ok: true;
        body: model.problem.GetDefaultStarterFilesResponseBody;
    }

    export interface ErrorResponse {
        ok: false;
        error: model.problem.GetDefaultStarterFilesErrorBody;
    }
}
",
                    "name": "GetDefaultStarterFilesResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../../..\\";

export interface GetDefaultStarterFilesResponseBody {
    files: Record<model.commons.Language, model.problem.ProblemFiles>;
}
",
                    "name": "GetDefaultStarterFilesResponseBody.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export type UpdateProblemErrorBody = never;

export declare namespace UpdateProblemErrorBody {
    export interface _Visitor<Result> {
        _unknown: () => Result;
    }
}

export const UpdateProblemErrorBody = {
    _visit: <Result>(_value: UpdateProblemErrorBody, visitor: UpdateProblemErrorBody._Visitor<Result>): Result => {
        return visitor._unknown();
    },

    _types: (): UpdateProblemErrorBody[\\"_error\\"][] => [],
} as const;
",
                    "name": "UpdateProblemErrorBody.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../../..\\";

export interface UpdateProblemRequest {
    problemId: model.commons.ProblemId;
    body: model.problem.CreateProblemRequest;
}
",
                    "name": "UpdateProblemRequest.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../../..\\";

export type _CreateProblemResponse = _CreateProblemResponse.SuccessResponse | _CreateProblemResponse.ErrorResponse;

namespace _CreateProblemResponse {
    export interface SuccessResponse {
        ok: true;
        body: model.problem.CreateProblemResponse;
    }

    export interface ErrorResponse {
        ok: false;
        error: model.problem.CreateProblemErrorBody;
    }
}
",
                    "name": "_CreateProblemResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../../..\\";

export type _UpdateProblemResponse = _UpdateProblemResponse.SuccessResponse | _UpdateProblemResponse.ErrorResponse;

namespace _UpdateProblemResponse {
    export interface SuccessResponse {
        ok: true;
        body: model.problem.UpdateProblemResponse;
    }

    export interface ErrorResponse {
        ok: false;
        error: model.problem.UpdateProblemErrorBody;
    }
}
",
                    "name": "_UpdateProblemResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export * from \\"./CreateProblemErrorBody\\";
export * from \\"./_CreateProblemResponse\\";
export * from \\"./UpdateProblemRequest\\";
export * from \\"./UpdateProblemErrorBody\\";
export * from \\"./_UpdateProblemResponse\\";
export * from \\"./DeleteProblemRequest\\";
export * from \\"./DeleteProblemErrorBody\\";
export * from \\"./DeleteProblemResponse\\";
export * from \\"./GetDefaultStarterFilesRequest\\";
export * from \\"./GetDefaultStarterFilesResponseBody\\";
export * from \\"./GetDefaultStarterFilesErrorBody\\";
export * from \\"./GetDefaultStarterFilesResponse\\";
",
                    "name": "index.ts",
                    "type": "file",
                  },
                ],
                "name": "ProblemCrudService",
                "type": "directory",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "export type GetExpectedResultErrorBody = never;

export declare namespace GetExpectedResultErrorBody {
    export interface _Visitor<Result> {
        _unknown: () => Result;
    }
}

export const GetExpectedResultErrorBody = {
    _visit: <Result>(_value: GetExpectedResultErrorBody, visitor: GetExpectedResultErrorBody._Visitor<Result>): Result => {
        return visitor._unknown();
    },

    _types: (): GetExpectedResultErrorBody[\\"_error\\"][] => [],
} as const;
",
                    "name": "GetExpectedResultErrorBody.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../../..\\";

export interface GetExpectedResultRequest {
    problemId: model.commons.ProblemId;
    testCase: model.commons.TestCase;
}
",
                    "name": "GetExpectedResultRequest.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../../..\\";

export type GetExpectedResultResponse = GetExpectedResultResponse.SuccessResponse | GetExpectedResultResponse.ErrorResponse;

namespace GetExpectedResultResponse {
    export interface SuccessResponse {
        ok: true;
        body: model.commons.TestCaseWithExpectedResult;
    }

    export interface ErrorResponse {
        ok: false;
        error: model.problem.GetExpectedResultErrorBody;
    }
}
",
                    "name": "GetExpectedResultResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export type GetLatestProblemErrorBody = never;

export declare namespace GetLatestProblemErrorBody {
    export interface _Visitor<Result> {
        _unknown: () => Result;
    }
}

export const GetLatestProblemErrorBody = {
    _visit: <Result>(_value: GetLatestProblemErrorBody, visitor: GetLatestProblemErrorBody._Visitor<Result>): Result => {
        return visitor._unknown();
    },

    _types: (): GetLatestProblemErrorBody[\\"_error\\"][] => [],
} as const;
",
                    "name": "GetLatestProblemErrorBody.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../../..\\";

export interface GetLatestProblemRequest {
    problemId: model.commons.ProblemId;
}
",
                    "name": "GetLatestProblemRequest.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../../..\\";

export type GetLatestProblemResponse = GetLatestProblemResponse.SuccessResponse | GetLatestProblemResponse.ErrorResponse;

namespace GetLatestProblemResponse {
    export interface SuccessResponse {
        ok: true;
        body: model.problem.ProblemInfo;
    }

    export interface ErrorResponse {
        ok: false;
        error: model.problem.GetLatestProblemErrorBody;
    }
}
",
                    "name": "GetLatestProblemResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export type GetProblemVersionErrorBody = never;

export declare namespace GetProblemVersionErrorBody {
    export interface _Visitor<Result> {
        _unknown: () => Result;
    }
}

export const GetProblemVersionErrorBody = {
    _visit: <Result>(_value: GetProblemVersionErrorBody, visitor: GetProblemVersionErrorBody._Visitor<Result>): Result => {
        return visitor._unknown();
    },

    _types: (): GetProblemVersionErrorBody[\\"_error\\"][] => [],
} as const;
",
                    "name": "GetProblemVersionErrorBody.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../../..\\";

export interface GetProblemVersionRequest {
    problemId: model.commons.ProblemId;
    problemVersion: number;
}
",
                    "name": "GetProblemVersionRequest.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../../..\\";

export type GetProblemVersionResponse = GetProblemVersionResponse.SuccessResponse | GetProblemVersionResponse.ErrorResponse;

namespace GetProblemVersionResponse {
    export interface SuccessResponse {
        ok: true;
        body: model.problem.ProblemInfo;
    }

    export interface ErrorResponse {
        ok: false;
        error: model.problem.GetProblemVersionErrorBody;
    }
}
",
                    "name": "GetProblemVersionResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export type GetProblemsErrorBody = never;

export declare namespace GetProblemsErrorBody {
    export interface _Visitor<Result> {
        _unknown: () => Result;
    }
}

export const GetProblemsErrorBody = {
    _visit: <Result>(_value: GetProblemsErrorBody, visitor: GetProblemsErrorBody._Visitor<Result>): Result => {
        return visitor._unknown();
    },

    _types: (): GetProblemsErrorBody[\\"_error\\"][] => [],
} as const;
",
                    "name": "GetProblemsErrorBody.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../../..\\";

export type GetProblemsResponse = GetProblemsResponse.SuccessResponse | GetProblemsResponse.ErrorResponse;

namespace GetProblemsResponse {
    export interface SuccessResponse {
        ok: true;
        body: model.problem.ProblemInfo[];
    }

    export interface ErrorResponse {
        ok: false;
        error: model.problem.GetProblemsErrorBody;
    }
}
",
                    "name": "GetProblemsResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export * from \\"./GetProblemsErrorBody\\";
export * from \\"./GetProblemsResponse\\";
export * from \\"./GetLatestProblemRequest\\";
export * from \\"./GetLatestProblemErrorBody\\";
export * from \\"./GetLatestProblemResponse\\";
export * from \\"./GetProblemVersionRequest\\";
export * from \\"./GetProblemVersionErrorBody\\";
export * from \\"./GetProblemVersionResponse\\";
export * from \\"./GetExpectedResultRequest\\";
export * from \\"./GetExpectedResultErrorBody\\";
export * from \\"./GetExpectedResultResponse\\";
",
                    "name": "index.ts",
                    "type": "file",
                  },
                ],
                "name": "ProblemInfoService",
                "type": "directory",
              },
              Object {
                "contents": "export * from \\"./ProblemInfoService\\";
export * from \\"./ProblemCrudService\\";
",
                "name": "index.ts",
                "type": "file",
              },
            ],
            "name": "service-types",
            "type": "directory",
          },
          Object {
            "contents": Array [
              Object {
                "contents": "import { problem } from \\"../..\\";

export type CreateProblemError =
    | CreateProblemError.Generic;

export declare namespace CreateProblemError {
    interface Generic extends problem.GenericCreateProblemError {
        _type: \\"generic\\";
    }

    export interface _Visitor<Result> {
        generic: (value: problem.GenericCreateProblemError) => Result;
        _unknown: () => Result;
    }
}

export const CreateProblemError = {
    generic: (value: problem.GenericCreateProblemError): CreateProblemError.Generic => ({
        ...value,
        _type: \\"generic\\"
    }),

    _visit: <Result>(value: CreateProblemError, visitor: CreateProblemError._Visitor<Result>): Result => {
        switch (value._type) {
            case \\"generic\\": return visitor.generic(value);
            default: return visitor._unknown();
        }
    },

    _types: (): CreateProblemError[\\"_type\\"][] => [\\"generic\\"],
} as const;
",
                "name": "CreateProblemError.ts",
                "type": "file",
              },
              Object {
                "contents": "import * as model from \\"../..\\";

export interface CreateProblemRequest {
    problemName: string;
    problemDescription: model.problem.ProblemDescription;
    files: Record<model.commons.Language, model.problem.ProblemFiles>;
    inputParams: model.problem.VariableTypeAndName[];
    outputType: model.commons.VariableType;
    testcases: model.commons.TestCaseWithExpectedResult[];
    methodName: string;
}
",
                "name": "CreateProblemRequest.ts",
                "type": "file",
              },
              Object {
                "contents": "import { problem, commons } from \\"../..\\";

export type CreateProblemResponse =
    | CreateProblemResponse.Success
    | CreateProblemResponse.Error;

export declare namespace CreateProblemResponse {
    interface Success {
        _type: \\"success\\";
        success: commons.ProblemId;
    }

    interface Error {
        _type: \\"error\\";
        error: problem.CreateProblemError;
    }

    export interface _Visitor<Result> {
        success: (value: commons.ProblemId) => Result;
        error: (value: problem.CreateProblemError) => Result;
        _unknown: () => Result;
    }
}

export const CreateProblemResponse = {
    success: (value: commons.ProblemId): CreateProblemResponse.Success => ({
        success: value,
        _type: \\"success\\"
    }),

    error: (value: problem.CreateProblemError): CreateProblemResponse.Error => ({
        error: value,
        _type: \\"error\\"
    }),

    _visit: <Result>(value: CreateProblemResponse, visitor: CreateProblemResponse._Visitor<Result>): Result => {
        switch (value._type) {
            case \\"success\\": return visitor.success(value.success);
            case \\"error\\": return visitor.error(value.error);
            default: return visitor._unknown();
        }
    },

    _types: (): CreateProblemResponse[\\"_type\\"][] => [\\"success\\", \\"error\\"],
} as const;
",
                "name": "CreateProblemResponse.ts",
                "type": "file",
              },
              Object {
                "contents": "export interface GenericCreateProblemError {
    message: string;
    type: string;
    stacktrace: string;
}
",
                "name": "GenericCreateProblemError.ts",
                "type": "file",
              },
              Object {
                "contents": "import * as model from \\"../..\\";

export interface ProblemDescription {
    boards: model.problem.ProblemDescriptionBoard[];
}
",
                "name": "ProblemDescription.ts",
                "type": "file",
              },
              Object {
                "contents": "import { commons } from \\"../..\\";

export type ProblemDescriptionBoard =
    | ProblemDescriptionBoard.Html
    | ProblemDescriptionBoard.Variable
    | ProblemDescriptionBoard.TestCaseId;

export declare namespace ProblemDescriptionBoard {
    interface Html {
        _type: \\"html\\";
        html: string;
    }

    interface Variable {
        _type: \\"variable\\";
        variable: commons.VariableValue;
    }

    interface TestCaseId {
        _type: \\"testCaseId\\";
        testCaseId: string;
    }

    export interface _Visitor<Result> {
        html: (value: string) => Result;
        variable: (value: commons.VariableValue) => Result;
        testCaseId: (value: string) => Result;
        _unknown: () => Result;
    }
}

export const ProblemDescriptionBoard = {
    html: (value: string): ProblemDescriptionBoard.Html => ({
        html: value,
        _type: \\"html\\"
    }),

    variable: (value: commons.VariableValue): ProblemDescriptionBoard.Variable => ({
        variable: value,
        _type: \\"variable\\"
    }),

    testCaseId: (value: string): ProblemDescriptionBoard.TestCaseId => ({
        testCaseId: value,
        _type: \\"testCaseId\\"
    }),

    _visit: <Result>(value: ProblemDescriptionBoard, visitor: ProblemDescriptionBoard._Visitor<Result>): Result => {
        switch (value._type) {
            case \\"html\\": return visitor.html(value.html);
            case \\"variable\\": return visitor.variable(value.variable);
            case \\"testCaseId\\": return visitor.testCaseId(value.testCaseId);
            default: return visitor._unknown();
        }
    },

    _types: (): ProblemDescriptionBoard[\\"_type\\"][] => [\\"html\\", \\"variable\\", \\"testCaseId\\"],
} as const;
",
                "name": "ProblemDescriptionBoard.ts",
                "type": "file",
              },
              Object {
                "contents": "import * as model from \\"../..\\";

export interface ProblemFiles {
    solutionFile: model.commons.FileInfo;
    readOnlyFiles: model.commons.FileInfo[];
}
",
                "name": "ProblemFiles.ts",
                "type": "file",
              },
              Object {
                "contents": "import * as model from \\"../..\\";

export interface ProblemInfo {
    problemId: model.commons.ProblemId;
    problemDescription: model.problem.ProblemDescription;
    problemName: string;
    problemVersion: number;
    files: Record<model.commons.Language, model.problem.ProblemFiles>;
    inputParams: model.problem.VariableTypeAndName[];
    outputType: model.commons.VariableType;
    testcases: model.commons.TestCaseWithExpectedResult[];
    methodName: string;
    supportsCustomTestCases: boolean;
}
",
                "name": "ProblemInfo.ts",
                "type": "file",
              },
              Object {
                "contents": "export interface UpdateProblemResponse {
    problemVersion: number;
}
",
                "name": "UpdateProblemResponse.ts",
                "type": "file",
              },
              Object {
                "contents": "import * as model from \\"../..\\";

export interface VariableTypeAndName {
    variableType: model.commons.VariableType;
    name: string;
}
",
                "name": "VariableTypeAndName.ts",
                "type": "file",
              },
              Object {
                "contents": "export * from \\"./ProblemInfo\\";
export * from \\"./ProblemDescription\\";
export * from \\"./ProblemDescriptionBoard\\";
export * from \\"./ProblemFiles\\";
export * from \\"./VariableTypeAndName\\";
export * from \\"./CreateProblemRequest\\";
export * from \\"./CreateProblemResponse\\";
export * from \\"./UpdateProblemResponse\\";
export * from \\"./CreateProblemError\\";
export * from \\"./GenericCreateProblemError\\";
",
                "name": "index.ts",
                "type": "file",
              },
            ],
            "name": "types",
            "type": "directory",
          },
        ],
        "name": "problem",
        "type": "directory",
      },
      Object {
        "contents": Array [
          Object {
            "contents": "export * from \\"./types\\";
export * from \\"./service-types\\";
",
            "name": "index.ts",
            "type": "file",
          },
          Object {
            "contents": Array [
              Object {
                "contents": Array [
                  Object {
                    "contents": "export type CreateProblemErrorBody = never;

export declare namespace CreateProblemErrorBody {
    export interface _Visitor<Result> {
        _unknown: () => Result;
    }
}

export const CreateProblemErrorBody = {
    _visit: <Result>(_value: CreateProblemErrorBody, visitor: CreateProblemErrorBody._Visitor<Result>): Result => {
        return visitor._unknown();
    },

    _types: (): CreateProblemErrorBody[\\"_error\\"][] => [],
} as const;
",
                    "name": "CreateProblemErrorBody.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../../..\\";

export type CreateProblemResponse = CreateProblemResponse.SuccessResponse | CreateProblemResponse.ErrorResponse;

namespace CreateProblemResponse {
    export interface SuccessResponse {
        ok: true;
        body: model.problem.CreateProblemResponse;
    }

    export interface ErrorResponse {
        ok: false;
        error: model.problemV2.CreateProblemErrorBody;
    }
}
",
                    "name": "CreateProblemResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export type DeleteProblemErrorBody = never;

export declare namespace DeleteProblemErrorBody {
    export interface _Visitor<Result> {
        _unknown: () => Result;
    }
}

export const DeleteProblemErrorBody = {
    _visit: <Result>(_value: DeleteProblemErrorBody, visitor: DeleteProblemErrorBody._Visitor<Result>): Result => {
        return visitor._unknown();
    },

    _types: (): DeleteProblemErrorBody[\\"_error\\"][] => [],
} as const;
",
                    "name": "DeleteProblemErrorBody.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../../..\\";

export interface DeleteProblemRequest {
    problemId: model.commons.ProblemId;
}
",
                    "name": "DeleteProblemRequest.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../../..\\";

export type DeleteProblemResponse = DeleteProblemResponse.SuccessResponse | DeleteProblemResponse.ErrorResponse;

namespace DeleteProblemResponse {
    export interface SuccessResponse {
        ok: true;
    }

    export interface ErrorResponse {
        ok: false;
        error: model.problemV2.DeleteProblemErrorBody;
    }
}
",
                    "name": "DeleteProblemResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export type GetBasicSolutionFileErrorBody = never;

export declare namespace GetBasicSolutionFileErrorBody {
    export interface _Visitor<Result> {
        _unknown: () => Result;
    }
}

export const GetBasicSolutionFileErrorBody = {
    _visit: <Result>(_value: GetBasicSolutionFileErrorBody, visitor: GetBasicSolutionFileErrorBody._Visitor<Result>): Result => {
        return visitor._unknown();
    },

    _types: (): GetBasicSolutionFileErrorBody[\\"_error\\"][] => [],
} as const;
",
                    "name": "GetBasicSolutionFileErrorBody.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../../..\\";

export interface GetBasicSolutionFileRequest {
    methodName: string;
    signature: model.problemV2.NonVoidFunctionSignature;
}
",
                    "name": "GetBasicSolutionFileRequest.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../../..\\";

export type GetBasicSolutionFileResponse = GetBasicSolutionFileResponse.SuccessResponse | GetBasicSolutionFileResponse.ErrorResponse;

namespace GetBasicSolutionFileResponse {
    export interface SuccessResponse {
        ok: true;
        body: model.problemV2.GetBasicSolutionFileResponseBody;
    }

    export interface ErrorResponse {
        ok: false;
        error: model.problemV2.GetBasicSolutionFileErrorBody;
    }
}
",
                    "name": "GetBasicSolutionFileResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../../..\\";

export interface GetBasicSolutionFileResponseBody {
    solutionFileByLanguage: Record<model.commons.Language, model.problemV2.FileInfoV2>;
}
",
                    "name": "GetBasicSolutionFileResponseBody.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export type GetDefaultDirectoryForProblemFilesErrorBody = never;

export declare namespace GetDefaultDirectoryForProblemFilesErrorBody {
    export interface _Visitor<Result> {
        _unknown: () => Result;
    }
}

export const GetDefaultDirectoryForProblemFilesErrorBody = {
    _visit: <Result>(_value: GetDefaultDirectoryForProblemFilesErrorBody, visitor: GetDefaultDirectoryForProblemFilesErrorBody._Visitor<Result>): Result => {
        return visitor._unknown();
    },

    _types: (): GetDefaultDirectoryForProblemFilesErrorBody[\\"_error\\"][] => [],
} as const;
",
                    "name": "GetDefaultDirectoryForProblemFilesErrorBody.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../../..\\";

export type GetDefaultDirectoryForProblemFilesResponse = GetDefaultDirectoryForProblemFilesResponse.SuccessResponse | GetDefaultDirectoryForProblemFilesResponse.ErrorResponse;

namespace GetDefaultDirectoryForProblemFilesResponse {
    export interface SuccessResponse {
        ok: true;
        body: Record<model.commons.Language, string>;
    }

    export interface ErrorResponse {
        ok: false;
        error: model.problemV2.GetDefaultDirectoryForProblemFilesErrorBody;
    }
}
",
                    "name": "GetDefaultDirectoryForProblemFilesResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export type GetFunctionSignatureErrorBody = never;

export declare namespace GetFunctionSignatureErrorBody {
    export interface _Visitor<Result> {
        _unknown: () => Result;
    }
}

export const GetFunctionSignatureErrorBody = {
    _visit: <Result>(_value: GetFunctionSignatureErrorBody, visitor: GetFunctionSignatureErrorBody._Visitor<Result>): Result => {
        return visitor._unknown();
    },

    _types: (): GetFunctionSignatureErrorBody[\\"_error\\"][] => [],
} as const;
",
                    "name": "GetFunctionSignatureErrorBody.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../../..\\";

export interface GetFunctionSignatureRequest {
    functionSignature: model.problemV2.FunctionSignature;
}
",
                    "name": "GetFunctionSignatureRequest.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../../..\\";

export type GetFunctionSignatureResponse = GetFunctionSignatureResponse.SuccessResponse | GetFunctionSignatureResponse.ErrorResponse;

namespace GetFunctionSignatureResponse {
    export interface SuccessResponse {
        ok: true;
        body: model.problemV2.GetFunctionSignatureResponseBody;
    }

    export interface ErrorResponse {
        ok: false;
        error: model.problemV2.GetFunctionSignatureErrorBody;
    }
}
",
                    "name": "GetFunctionSignatureResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../../..\\";

export interface GetFunctionSignatureResponseBody {
    functionByLanguage: Record<model.commons.Language, string>;
}
",
                    "name": "GetFunctionSignatureResponseBody.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export type GetGeneratedTestCaseFileErrorBody = never;

export declare namespace GetGeneratedTestCaseFileErrorBody {
    export interface _Visitor<Result> {
        _unknown: () => Result;
    }
}

export const GetGeneratedTestCaseFileErrorBody = {
    _visit: <Result>(_value: GetGeneratedTestCaseFileErrorBody, visitor: GetGeneratedTestCaseFileErrorBody._Visitor<Result>): Result => {
        return visitor._unknown();
    },

    _types: (): GetGeneratedTestCaseFileErrorBody[\\"_error\\"][] => [],
} as const;
",
                    "name": "GetGeneratedTestCaseFileErrorBody.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../../..\\";

/**
 * Supply template if the test case relies on it
 */
export interface GetGeneratedTestCaseFileRequest {
    template: model.problemV2.TestCaseTemplate | null | undefined;
    testCase: model.problemV2.TestCaseV2;
}
",
                    "name": "GetGeneratedTestCaseFileRequest.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../../..\\";

export type GetGeneratedTestCaseFileResponse = GetGeneratedTestCaseFileResponse.SuccessResponse | GetGeneratedTestCaseFileResponse.ErrorResponse;

namespace GetGeneratedTestCaseFileResponse {
    export interface SuccessResponse {
        ok: true;
        body: Record<model.commons.Language, model.problemV2.FileInfoV2>;
    }

    export interface ErrorResponse {
        ok: false;
        error: model.problemV2.GetGeneratedTestCaseFileErrorBody;
    }
}
",
                    "name": "GetGeneratedTestCaseFileResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export type GetGeneratedTestCaseTemplateFileErrorBody = never;

export declare namespace GetGeneratedTestCaseTemplateFileErrorBody {
    export interface _Visitor<Result> {
        _unknown: () => Result;
    }
}

export const GetGeneratedTestCaseTemplateFileErrorBody = {
    _visit: <Result>(_value: GetGeneratedTestCaseTemplateFileErrorBody, visitor: GetGeneratedTestCaseTemplateFileErrorBody._Visitor<Result>): Result => {
        return visitor._unknown();
    },

    _types: (): GetGeneratedTestCaseTemplateFileErrorBody[\\"_error\\"][] => [],
} as const;
",
                    "name": "GetGeneratedTestCaseTemplateFileErrorBody.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../../..\\";

export interface GetGeneratedTestCaseTemplateFileRequest {
    template: model.problemV2.TestCaseTemplate;
}
",
                    "name": "GetGeneratedTestCaseTemplateFileRequest.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../../..\\";

export type GetGeneratedTestCaseTemplateFileResponse = GetGeneratedTestCaseTemplateFileResponse.SuccessResponse | GetGeneratedTestCaseTemplateFileResponse.ErrorResponse;

namespace GetGeneratedTestCaseTemplateFileResponse {
    export interface SuccessResponse {
        ok: true;
        body: Record<model.commons.Language, model.problemV2.FileInfoV2>;
    }

    export interface ErrorResponse {
        ok: false;
        error: model.problemV2.GetGeneratedTestCaseTemplateFileErrorBody;
    }
}
",
                    "name": "GetGeneratedTestCaseTemplateFileResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export type UpdateProblemErrorBody = never;

export declare namespace UpdateProblemErrorBody {
    export interface _Visitor<Result> {
        _unknown: () => Result;
    }
}

export const UpdateProblemErrorBody = {
    _visit: <Result>(_value: UpdateProblemErrorBody, visitor: UpdateProblemErrorBody._Visitor<Result>): Result => {
        return visitor._unknown();
    },

    _types: (): UpdateProblemErrorBody[\\"_error\\"][] => [],
} as const;
",
                    "name": "UpdateProblemErrorBody.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../../..\\";

export interface UpdateProblemRequest {
    problemId: model.commons.ProblemId;
    body: model.problemV2.CreateProblemRequestV2;
}
",
                    "name": "UpdateProblemRequest.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../../..\\";

export type UpdateProblemResponse = UpdateProblemResponse.SuccessResponse | UpdateProblemResponse.ErrorResponse;

namespace UpdateProblemResponse {
    export interface SuccessResponse {
        ok: true;
        body: model.problem.UpdateProblemResponse;
    }

    export interface ErrorResponse {
        ok: false;
        error: model.problemV2.UpdateProblemErrorBody;
    }
}
",
                    "name": "UpdateProblemResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export * from \\"./CreateProblemErrorBody\\";
export * from \\"./CreateProblemResponse\\";
export * from \\"./UpdateProblemRequest\\";
export * from \\"./UpdateProblemErrorBody\\";
export * from \\"./UpdateProblemResponse\\";
export * from \\"./DeleteProblemRequest\\";
export * from \\"./DeleteProblemErrorBody\\";
export * from \\"./DeleteProblemResponse\\";
export * from \\"./GetFunctionSignatureRequest\\";
export * from \\"./GetFunctionSignatureResponseBody\\";
export * from \\"./GetFunctionSignatureErrorBody\\";
export * from \\"./GetFunctionSignatureResponse\\";
export * from \\"./GetBasicSolutionFileRequest\\";
export * from \\"./GetBasicSolutionFileResponseBody\\";
export * from \\"./GetBasicSolutionFileErrorBody\\";
export * from \\"./GetBasicSolutionFileResponse\\";
export * from \\"./GetDefaultDirectoryForProblemFilesErrorBody\\";
export * from \\"./GetDefaultDirectoryForProblemFilesResponse\\";
export * from \\"./GetGeneratedTestCaseFileRequest\\";
export * from \\"./GetGeneratedTestCaseFileErrorBody\\";
export * from \\"./GetGeneratedTestCaseFileResponse\\";
export * from \\"./GetGeneratedTestCaseTemplateFileRequest\\";
export * from \\"./GetGeneratedTestCaseTemplateFileErrorBody\\";
export * from \\"./GetGeneratedTestCaseTemplateFileResponse\\";
",
                    "name": "index.ts",
                    "type": "file",
                  },
                ],
                "name": "ProblemCrudServiceV2",
                "type": "directory",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "export type GetLatestProblemErrorBody = never;

export declare namespace GetLatestProblemErrorBody {
    export interface _Visitor<Result> {
        _unknown: () => Result;
    }
}

export const GetLatestProblemErrorBody = {
    _visit: <Result>(_value: GetLatestProblemErrorBody, visitor: GetLatestProblemErrorBody._Visitor<Result>): Result => {
        return visitor._unknown();
    },

    _types: (): GetLatestProblemErrorBody[\\"_error\\"][] => [],
} as const;
",
                    "name": "GetLatestProblemErrorBody.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../../..\\";

export interface GetLatestProblemRequest {
    problemId: model.commons.ProblemId;
}
",
                    "name": "GetLatestProblemRequest.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../../..\\";

export type GetLatestProblemResponse = GetLatestProblemResponse.SuccessResponse | GetLatestProblemResponse.ErrorResponse;

namespace GetLatestProblemResponse {
    export interface SuccessResponse {
        ok: true;
        body: model.problemV2.ProblemInfoV2;
    }

    export interface ErrorResponse {
        ok: false;
        error: model.problemV2.GetLatestProblemErrorBody;
    }
}
",
                    "name": "GetLatestProblemResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export type GetLightweightProblemsErrorBody = never;

export declare namespace GetLightweightProblemsErrorBody {
    export interface _Visitor<Result> {
        _unknown: () => Result;
    }
}

export const GetLightweightProblemsErrorBody = {
    _visit: <Result>(_value: GetLightweightProblemsErrorBody, visitor: GetLightweightProblemsErrorBody._Visitor<Result>): Result => {
        return visitor._unknown();
    },

    _types: (): GetLightweightProblemsErrorBody[\\"_error\\"][] => [],
} as const;
",
                    "name": "GetLightweightProblemsErrorBody.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../../..\\";

export type GetLightweightProblemsResponse = GetLightweightProblemsResponse.SuccessResponse | GetLightweightProblemsResponse.ErrorResponse;

namespace GetLightweightProblemsResponse {
    export interface SuccessResponse {
        ok: true;
        body: model.problemV2.LightweightProblemInfoV2[];
    }

    export interface ErrorResponse {
        ok: false;
        error: model.problemV2.GetLightweightProblemsErrorBody;
    }
}
",
                    "name": "GetLightweightProblemsResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export type GetProblemVersionErrorBody = never;

export declare namespace GetProblemVersionErrorBody {
    export interface _Visitor<Result> {
        _unknown: () => Result;
    }
}

export const GetProblemVersionErrorBody = {
    _visit: <Result>(_value: GetProblemVersionErrorBody, visitor: GetProblemVersionErrorBody._Visitor<Result>): Result => {
        return visitor._unknown();
    },

    _types: (): GetProblemVersionErrorBody[\\"_error\\"][] => [],
} as const;
",
                    "name": "GetProblemVersionErrorBody.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../../..\\";

export interface GetProblemVersionRequest {
    problemId: model.commons.ProblemId;
    problemVersion: number;
}
",
                    "name": "GetProblemVersionRequest.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../../..\\";

export type GetProblemVersionResponse = GetProblemVersionResponse.SuccessResponse | GetProblemVersionResponse.ErrorResponse;

namespace GetProblemVersionResponse {
    export interface SuccessResponse {
        ok: true;
        body: model.problemV2.ProblemInfoV2;
    }

    export interface ErrorResponse {
        ok: false;
        error: model.problemV2.GetProblemVersionErrorBody;
    }
}
",
                    "name": "GetProblemVersionResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export type GetProblemsErrorBody = never;

export declare namespace GetProblemsErrorBody {
    export interface _Visitor<Result> {
        _unknown: () => Result;
    }
}

export const GetProblemsErrorBody = {
    _visit: <Result>(_value: GetProblemsErrorBody, visitor: GetProblemsErrorBody._Visitor<Result>): Result => {
        return visitor._unknown();
    },

    _types: (): GetProblemsErrorBody[\\"_error\\"][] => [],
} as const;
",
                    "name": "GetProblemsErrorBody.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../../..\\";

export type GetProblemsResponse = GetProblemsResponse.SuccessResponse | GetProblemsResponse.ErrorResponse;

namespace GetProblemsResponse {
    export interface SuccessResponse {
        ok: true;
        body: model.problemV2.ProblemInfoV2[];
    }

    export interface ErrorResponse {
        ok: false;
        error: model.problemV2.GetProblemsErrorBody;
    }
}
",
                    "name": "GetProblemsResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export * from \\"./GetLightweightProblemsErrorBody\\";
export * from \\"./GetLightweightProblemsResponse\\";
export * from \\"./GetProblemsErrorBody\\";
export * from \\"./GetProblemsResponse\\";
export * from \\"./GetLatestProblemRequest\\";
export * from \\"./GetLatestProblemErrorBody\\";
export * from \\"./GetLatestProblemResponse\\";
export * from \\"./GetProblemVersionRequest\\";
export * from \\"./GetProblemVersionErrorBody\\";
export * from \\"./GetProblemVersionResponse\\";
",
                    "name": "index.ts",
                    "type": "file",
                  },
                ],
                "name": "ProblemInfoServicV2",
                "type": "directory",
              },
              Object {
                "contents": "export * from \\"./ProblemInfoServicV2\\";
export * from \\"./ProblemCrudServiceV2\\";
",
                "name": "index.ts",
                "type": "file",
              },
            ],
            "name": "service-types",
            "type": "directory",
          },
          Object {
            "contents": Array [
              Object {
                "contents": "import { problemV2 } from \\"../..\\";

export type AssertCorrectnessCheck =
    | AssertCorrectnessCheck.DeepEquality
    | AssertCorrectnessCheck.Custom;

export declare namespace AssertCorrectnessCheck {
    interface DeepEquality extends problemV2.DeepEqualityCorrectnessCheck {
        _type: \\"deepEquality\\";
    }

    interface Custom extends problemV2.VoidFunctionDefinitionThatTakesActualResult {
        _type: \\"custom\\";
    }

    export interface _Visitor<Result> {
        deepEquality: (value: problemV2.DeepEqualityCorrectnessCheck) => Result;
        custom: (value: problemV2.VoidFunctionDefinitionThatTakesActualResult) => Result;
        _unknown: () => Result;
    }
}

export const AssertCorrectnessCheck = {
    deepEquality: (value: problemV2.DeepEqualityCorrectnessCheck): AssertCorrectnessCheck.DeepEquality => ({
        ...value,
        _type: \\"deepEquality\\"
    }),

    custom: (value: problemV2.VoidFunctionDefinitionThatTakesActualResult): AssertCorrectnessCheck.Custom => ({
        ...value,
        _type: \\"custom\\"
    }),

    _visit: <Result>(value: AssertCorrectnessCheck, visitor: AssertCorrectnessCheck._Visitor<Result>): Result => {
        switch (value._type) {
            case \\"deepEquality\\": return visitor.deepEquality(value);
            case \\"custom\\": return visitor.custom(value);
            default: return visitor._unknown();
        }
    },

    _types: (): AssertCorrectnessCheck[\\"_type\\"][] => [\\"deepEquality\\", \\"custom\\"],
} as const;
",
                "name": "AssertCorrectnessCheck.ts",
                "type": "file",
              },
              Object {
                "contents": "import * as model from \\"../..\\";

export interface BasicCustomFiles {
    methodName: string;
    signature: model.problemV2.NonVoidFunctionSignature;
    additionalFiles: Record<model.commons.Language, model.problemV2.Files>;
    basicTestCaseTemplate: model.problemV2.BasicTestCaseTemplate;
}
",
                "name": "BasicCustomFiles.ts",
                "type": "file",
              },
              Object {
                "contents": "import * as model from \\"../..\\";

export interface BasicTestCaseTemplate {
    templateId: model.problemV2.TestCaseTemplateId;
    name: string;
    description: model.problemV2.TestCaseImplementationDescription;
    expectedValueParameterId: model.problemV2.ParameterId;
}
",
                "name": "BasicTestCaseTemplate.ts",
                "type": "file",
              },
              Object {
                "contents": "import * as model from \\"../..\\";

export interface CreateProblemRequestV2 {
    problemName: string;
    problemDescription: model.problem.ProblemDescription;
    customFiles: model.problemV2.CustomFiles;
    customTestCaseTemplates: model.problemV2.TestCaseTemplate[];
    testcases: model.problemV2.TestCaseV2[];
    supportedLanguages: model.commons.Language[];
    isPublic: boolean;
}
",
                "name": "CreateProblemRequestV2.ts",
                "type": "file",
              },
              Object {
                "contents": "import { problemV2, commons } from \\"../..\\";

export type CustomFiles =
    | CustomFiles.Basic
    | CustomFiles.Custom;

export declare namespace CustomFiles {
    interface Basic extends problemV2.BasicCustomFiles {
        _type: \\"basic\\";
    }

    interface Custom {
        _type: \\"custom\\";
        custom: Record<commons.Language, problemV2.Files>;
    }

    export interface _Visitor<Result> {
        basic: (value: problemV2.BasicCustomFiles) => Result;
        custom: (value: Record<commons.Language, problemV2.Files>) => Result;
        _unknown: () => Result;
    }
}

export const CustomFiles = {
    basic: (value: problemV2.BasicCustomFiles): CustomFiles.Basic => ({
        ...value,
        _type: \\"basic\\"
    }),

    custom: (value: Record<commons.Language, problemV2.Files>): CustomFiles.Custom => ({
        custom: value,
        _type: \\"custom\\"
    }),

    _visit: <Result>(value: CustomFiles, visitor: CustomFiles._Visitor<Result>): Result => {
        switch (value._type) {
            case \\"basic\\": return visitor.basic(value);
            case \\"custom\\": return visitor.custom(value.custom);
            default: return visitor._unknown();
        }
    },

    _types: (): CustomFiles[\\"_type\\"][] => [\\"basic\\", \\"custom\\"],
} as const;
",
                "name": "CustomFiles.ts",
                "type": "file",
              },
              Object {
                "contents": "import * as model from \\"../..\\";

export interface DeepEqualityCorrectnessCheck {
    expectedValueParameterId: model.problemV2.ParameterId;
}
",
                "name": "DeepEqualityCorrectnessCheck.ts",
                "type": "file",
              },
              Object {
                "contents": "import * as model from \\"../..\\";

export interface DefaultProvidedFile {
    file: model.problemV2.FileInfoV2;
    relatedTypes: model.commons.VariableType[];
}
",
                "name": "DefaultProvidedFile.ts",
                "type": "file",
              },
              Object {
                "contents": "export interface FileInfoV2 {
    filename: string;
    directory: string;
    contents: string;
    editable: boolean;
}
",
                "name": "FileInfoV2.ts",
                "type": "file",
              },
              Object {
                "contents": "import * as model from \\"../..\\";

export interface Files {
    files: model.problemV2.FileInfoV2[];
}
",
                "name": "Files.ts",
                "type": "file",
              },
              Object {
                "contents": "export interface FunctionImplementation {
    impl: string;
    imports: string | null | undefined;
}
",
                "name": "FunctionImplementation.ts",
                "type": "file",
              },
              Object {
                "contents": "import * as model from \\"../..\\";

export interface FunctionImplementationForMultipleLanguages {
    codeByLanguage: Record<model.commons.Language, model.problemV2.FunctionImplementation>;
}
",
                "name": "FunctionImplementationForMultipleLanguages.ts",
                "type": "file",
              },
              Object {
                "contents": "import { problemV2 } from \\"../..\\";

export type FunctionSignature =
    | FunctionSignature.Void
    | FunctionSignature.NonVoid
    /**
     * Useful when specifying custom grading for a testcase where actualResult is defined. */
    | FunctionSignature.VoidThatTakesActualResult;

export declare namespace FunctionSignature {
    interface Void extends problemV2.VoidFunctionSignature {
        _type: \\"void\\";
    }

    interface NonVoid extends problemV2.NonVoidFunctionSignature {
        _type: \\"nonVoid\\";
    }

    interface VoidThatTakesActualResult extends problemV2.VoidFunctionSignatureThatTakesActualResult {
        _type: \\"voidThatTakesActualResult\\";
    }

    export interface _Visitor<Result> {
        void: (value: problemV2.VoidFunctionSignature) => Result;
        nonVoid: (value: problemV2.NonVoidFunctionSignature) => Result;
        voidThatTakesActualResult: (value: problemV2.VoidFunctionSignatureThatTakesActualResult) => Result;
        _unknown: () => Result;
    }
}

export const FunctionSignature = {
    void: (value: problemV2.VoidFunctionSignature): FunctionSignature.Void => ({
        ...value,
        _type: \\"void\\"
    }),

    nonVoid: (value: problemV2.NonVoidFunctionSignature): FunctionSignature.NonVoid => ({
        ...value,
        _type: \\"nonVoid\\"
    }),

    voidThatTakesActualResult: (value: problemV2.VoidFunctionSignatureThatTakesActualResult): FunctionSignature.VoidThatTakesActualResult => ({
        ...value,
        _type: \\"voidThatTakesActualResult\\"
    }),

    _visit: <Result>(value: FunctionSignature, visitor: FunctionSignature._Visitor<Result>): Result => {
        switch (value._type) {
            case \\"void\\": return visitor.void(value);
            case \\"nonVoid\\": return visitor.nonVoid(value);
            case \\"voidThatTakesActualResult\\": return visitor.voidThatTakesActualResult(value);
            default: return visitor._unknown();
        }
    },

    _types: (): FunctionSignature[\\"_type\\"][] => [\\"void\\", \\"nonVoid\\", \\"voidThatTakesActualResult\\"],
} as const;
",
                "name": "FunctionSignature.ts",
                "type": "file",
              },
              Object {
                "contents": "import * as model from \\"../..\\";

export interface GeneratedFiles {
    generatedTestCaseFiles: Record<model.commons.Language, model.problemV2.Files>;
    generatedTemplateFiles: Record<model.commons.Language, model.problemV2.Files>;
    other: Record<model.commons.Language, model.problemV2.Files>;
}
",
                "name": "GeneratedFiles.ts",
                "type": "file",
              },
              Object {
                "contents": "import * as model from \\"../..\\";

export interface LightweightProblemInfoV2 {
    problemId: model.commons.ProblemId;
    problemName: string;
    problemVersion: number;
    variableTypes: model.commons.VariableType[];
}
",
                "name": "LightweightProblemInfoV2.ts",
                "type": "file",
              },
              Object {
                "contents": "import * as model from \\"../..\\";

export interface NonVoidFunctionDefinition {
    signature: model.problemV2.NonVoidFunctionSignature;
    code: model.problemV2.FunctionImplementationForMultipleLanguages;
}
",
                "name": "NonVoidFunctionDefinition.ts",
                "type": "file",
              },
              Object {
                "contents": "import * as model from \\"../..\\";

export interface NonVoidFunctionSignature {
    parameters: model.problemV2.Parameter[];
    returnType: model.commons.VariableType;
}
",
                "name": "NonVoidFunctionSignature.ts",
                "type": "file",
              },
              Object {
                "contents": "import * as model from \\"../..\\";

export interface Parameter {
    parameterId: model.problemV2.ParameterId;
    name: string;
    variableType: model.commons.VariableType;
}
",
                "name": "Parameter.ts",
                "type": "file",
              },
              Object {
                "contents": "export type ParameterId = string & {
    __ParameterId: void;
};

export const ParameterId = {
    of: (value: string): ParameterId => value as ParameterId
};
",
                "name": "ParameterId.ts",
                "type": "file",
              },
              Object {
                "contents": "import * as model from \\"../..\\";

export interface ProblemInfoV2 {
    problemId: model.commons.ProblemId;
    problemDescription: model.problem.ProblemDescription;
    problemName: string;
    problemVersion: number;
    supportedLanguages: model.commons.Language[];
    customFiles: model.problemV2.CustomFiles;
    generatedFiles: model.problemV2.GeneratedFiles;
    customTestCaseTemplates: model.problemV2.TestCaseTemplate[];
    testcases: model.problemV2.TestCaseV2[];
    isPublic: boolean;
}
",
                "name": "ProblemInfoV2.ts",
                "type": "file",
              },
              Object {
                "contents": "export interface TestCaseExpects {
    expectedStdout: string | null | undefined;
}
",
                "name": "TestCaseExpects.ts",
                "type": "file",
              },
              Object {
                "contents": "import { problemV2 } from \\"../..\\";

export type TestCaseFunction =
    | TestCaseFunction.WithActualResult
    | TestCaseFunction.Custom;

export declare namespace TestCaseFunction {
    interface WithActualResult extends problemV2.TestCaseWithActualResultImplementation {
        _type: \\"withActualResult\\";
    }

    interface Custom extends problemV2.VoidFunctionDefinition {
        _type: \\"custom\\";
    }

    export interface _Visitor<Result> {
        withActualResult: (value: problemV2.TestCaseWithActualResultImplementation) => Result;
        custom: (value: problemV2.VoidFunctionDefinition) => Result;
        _unknown: () => Result;
    }
}

export const TestCaseFunction = {
    withActualResult: (value: problemV2.TestCaseWithActualResultImplementation): TestCaseFunction.WithActualResult => ({
        ...value,
        _type: \\"withActualResult\\"
    }),

    custom: (value: problemV2.VoidFunctionDefinition): TestCaseFunction.Custom => ({
        ...value,
        _type: \\"custom\\"
    }),

    _visit: <Result>(value: TestCaseFunction, visitor: TestCaseFunction._Visitor<Result>): Result => {
        switch (value._type) {
            case \\"withActualResult\\": return visitor.withActualResult(value);
            case \\"custom\\": return visitor.custom(value);
            default: return visitor._unknown();
        }
    },

    _types: (): TestCaseFunction[\\"_type\\"][] => [\\"withActualResult\\", \\"custom\\"],
} as const;
",
                "name": "TestCaseFunction.ts",
                "type": "file",
              },
              Object {
                "contents": "export type TestCaseId = string & {
    __TestCaseId: void;
};

export const TestCaseId = {
    of: (value: string): TestCaseId => value as TestCaseId
};
",
                "name": "TestCaseId.ts",
                "type": "file",
              },
              Object {
                "contents": "import * as model from \\"../..\\";

export interface TestCaseImplementation {
    description: model.problemV2.TestCaseImplementationDescription;
    function: model.problemV2.TestCaseFunction;
}
",
                "name": "TestCaseImplementation.ts",
                "type": "file",
              },
              Object {
                "contents": "import * as model from \\"../..\\";

export interface TestCaseImplementationDescription {
    boards: model.problemV2.TestCaseImplementationDescriptionBoard[];
}
",
                "name": "TestCaseImplementationDescription.ts",
                "type": "file",
              },
              Object {
                "contents": "import { problemV2 } from \\"../..\\";

export type TestCaseImplementationDescriptionBoard =
    | TestCaseImplementationDescriptionBoard.Html
    | TestCaseImplementationDescriptionBoard.ParamId;

export declare namespace TestCaseImplementationDescriptionBoard {
    interface Html {
        _type: \\"html\\";
        html: string;
    }

    interface ParamId {
        _type: \\"paramId\\";
        paramId: problemV2.ParameterId;
    }

    export interface _Visitor<Result> {
        html: (value: string) => Result;
        paramId: (value: problemV2.ParameterId) => Result;
        _unknown: () => Result;
    }
}

export const TestCaseImplementationDescriptionBoard = {
    html: (value: string): TestCaseImplementationDescriptionBoard.Html => ({
        html: value,
        _type: \\"html\\"
    }),

    paramId: (value: problemV2.ParameterId): TestCaseImplementationDescriptionBoard.ParamId => ({
        paramId: value,
        _type: \\"paramId\\"
    }),

    _visit: <Result>(value: TestCaseImplementationDescriptionBoard, visitor: TestCaseImplementationDescriptionBoard._Visitor<Result>): Result => {
        switch (value._type) {
            case \\"html\\": return visitor.html(value.html);
            case \\"paramId\\": return visitor.paramId(value.paramId);
            default: return visitor._unknown();
        }
    },

    _types: (): TestCaseImplementationDescriptionBoard[\\"_type\\"][] => [\\"html\\", \\"paramId\\"],
} as const;
",
                "name": "TestCaseImplementationDescriptionBoard.ts",
                "type": "file",
              },
              Object {
                "contents": "import { problemV2 } from \\"../..\\";

export type TestCaseImplementationReference =
    | TestCaseImplementationReference.TemplateId
    | TestCaseImplementationReference.Implementation;

export declare namespace TestCaseImplementationReference {
    interface TemplateId {
        _type: \\"templateId\\";
        templateId: problemV2.TestCaseTemplateId;
    }

    interface Implementation extends problemV2.TestCaseImplementation {
        _type: \\"implementation\\";
    }

    export interface _Visitor<Result> {
        templateId: (value: problemV2.TestCaseTemplateId) => Result;
        implementation: (value: problemV2.TestCaseImplementation) => Result;
        _unknown: () => Result;
    }
}

export const TestCaseImplementationReference = {
    templateId: (value: problemV2.TestCaseTemplateId): TestCaseImplementationReference.TemplateId => ({
        templateId: value,
        _type: \\"templateId\\"
    }),

    implementation: (value: problemV2.TestCaseImplementation): TestCaseImplementationReference.Implementation => ({
        ...value,
        _type: \\"implementation\\"
    }),

    _visit: <Result>(value: TestCaseImplementationReference, visitor: TestCaseImplementationReference._Visitor<Result>): Result => {
        switch (value._type) {
            case \\"templateId\\": return visitor.templateId(value.templateId);
            case \\"implementation\\": return visitor.implementation(value);
            default: return visitor._unknown();
        }
    },

    _types: (): TestCaseImplementationReference[\\"_type\\"][] => [\\"templateId\\", \\"implementation\\"],
} as const;
",
                "name": "TestCaseImplementationReference.ts",
                "type": "file",
              },
              Object {
                "contents": "import * as model from \\"../..\\";

export interface TestCaseMetadata {
    id: model.problemV2.TestCaseId;
    name: string;
    hidden: boolean;
}
",
                "name": "TestCaseMetadata.ts",
                "type": "file",
              },
              Object {
                "contents": "import * as model from \\"../..\\";

export interface TestCaseTemplate {
    templateId: model.problemV2.TestCaseTemplateId;
    name: string;
    implementation: model.problemV2.TestCaseImplementation;
}
",
                "name": "TestCaseTemplate.ts",
                "type": "file",
              },
              Object {
                "contents": "export type TestCaseTemplateId = string & {
    __TestCaseTemplateId: void;
};

export const TestCaseTemplateId = {
    of: (value: string): TestCaseTemplateId => value as TestCaseTemplateId
};
",
                "name": "TestCaseTemplateId.ts",
                "type": "file",
              },
              Object {
                "contents": "import * as model from \\"../..\\";

export interface TestCaseV2 {
    metadata: model.problemV2.TestCaseMetadata;
    implementation: model.problemV2.TestCaseImplementationReference;
    arguments: Record<model.problemV2.ParameterId, model.commons.VariableValue>;
    expects: model.problemV2.TestCaseExpects | null | undefined;
}
",
                "name": "TestCaseV2.ts",
                "type": "file",
              },
              Object {
                "contents": "import * as model from \\"../..\\";

export interface TestCaseWithActualResultImplementation {
    getActualResult: model.problemV2.NonVoidFunctionDefinition;
    assertCorrectnessCheck: model.problemV2.AssertCorrectnessCheck;
}
",
                "name": "TestCaseWithActualResultImplementation.ts",
                "type": "file",
              },
              Object {
                "contents": "import * as model from \\"../..\\";

export interface VoidFunctionDefinition {
    parameters: model.problemV2.Parameter[];
    code: model.problemV2.FunctionImplementationForMultipleLanguages;
}
",
                "name": "VoidFunctionDefinition.ts",
                "type": "file",
              },
              Object {
                "contents": "import * as model from \\"../..\\";

/**
 * The generated signature will include an additional param, actualResult
 */
export interface VoidFunctionDefinitionThatTakesActualResult {
    additionalParameters: model.problemV2.Parameter[];
    code: model.problemV2.FunctionImplementationForMultipleLanguages;
}
",
                "name": "VoidFunctionDefinitionThatTakesActualResult.ts",
                "type": "file",
              },
              Object {
                "contents": "import * as model from \\"../..\\";

export interface VoidFunctionSignature {
    parameters: model.problemV2.Parameter[];
}
",
                "name": "VoidFunctionSignature.ts",
                "type": "file",
              },
              Object {
                "contents": "import * as model from \\"../..\\";

export interface VoidFunctionSignatureThatTakesActualResult {
    parameters: model.problemV2.Parameter[];
    actualResultType: model.commons.VariableType;
}
",
                "name": "VoidFunctionSignatureThatTakesActualResult.ts",
                "type": "file",
              },
              Object {
                "contents": "export * from \\"./TestCaseTemplateId\\";
export * from \\"./TestCaseId\\";
export * from \\"./ParameterId\\";
export * from \\"./ProblemInfoV2\\";
export * from \\"./LightweightProblemInfoV2\\";
export * from \\"./CreateProblemRequestV2\\";
export * from \\"./TestCaseV2\\";
export * from \\"./TestCaseExpects\\";
export * from \\"./TestCaseImplementationReference\\";
export * from \\"./BasicTestCaseTemplate\\";
export * from \\"./TestCaseTemplate\\";
export * from \\"./TestCaseImplementation\\";
export * from \\"./TestCaseFunction\\";
export * from \\"./TestCaseWithActualResultImplementation\\";
export * from \\"./VoidFunctionDefinition\\";
export * from \\"./Parameter\\";
export * from \\"./NonVoidFunctionDefinition\\";
export * from \\"./VoidFunctionSignature\\";
export * from \\"./NonVoidFunctionSignature\\";
export * from \\"./VoidFunctionSignatureThatTakesActualResult\\";
export * from \\"./AssertCorrectnessCheck\\";
export * from \\"./DeepEqualityCorrectnessCheck\\";
export * from \\"./VoidFunctionDefinitionThatTakesActualResult\\";
export * from \\"./TestCaseImplementationDescription\\";
export * from \\"./TestCaseImplementationDescriptionBoard\\";
export * from \\"./TestCaseMetadata\\";
export * from \\"./FunctionImplementationForMultipleLanguages\\";
export * from \\"./FunctionImplementation\\";
export * from \\"./GeneratedFiles\\";
export * from \\"./CustomFiles\\";
export * from \\"./BasicCustomFiles\\";
export * from \\"./Files\\";
export * from \\"./FileInfoV2\\";
export * from \\"./DefaultProvidedFile\\";
export * from \\"./FunctionSignature\\";
",
                "name": "index.ts",
                "type": "file",
              },
            ],
            "name": "types",
            "type": "directory",
          },
        ],
        "name": "problemV2",
        "type": "directory",
      },
      Object {
        "contents": Array [
          Object {
            "contents": "export * from \\"./types\\";
export * from \\"./service-types\\";
",
            "name": "index.ts",
            "type": "file",
          },
          Object {
            "contents": Array [
              Object {
                "contents": Array [
                  Object {
                    "contents": "export type CreateExecutionSessionErrorBody = never;

export declare namespace CreateExecutionSessionErrorBody {
    export interface _Visitor<Result> {
        _unknown: () => Result;
    }
}

export const CreateExecutionSessionErrorBody = {
    _visit: <Result>(_value: CreateExecutionSessionErrorBody, visitor: CreateExecutionSessionErrorBody._Visitor<Result>): Result => {
        return visitor._unknown();
    },

    _types: (): CreateExecutionSessionErrorBody[\\"_error\\"][] => [],
} as const;
",
                    "name": "CreateExecutionSessionErrorBody.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../../..\\";

export interface CreateExecutionSessionRequest {
    language: model.commons.Language;
}
",
                    "name": "CreateExecutionSessionRequest.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../../..\\";

export type CreateExecutionSessionResponse = CreateExecutionSessionResponse.SuccessResponse | CreateExecutionSessionResponse.ErrorResponse;

namespace CreateExecutionSessionResponse {
    export interface SuccessResponse {
        ok: true;
        body: model.submission.ExecutionSessionResponse;
    }

    export interface ErrorResponse {
        ok: false;
        error: model.submission.CreateExecutionSessionErrorBody;
    }
}
",
                    "name": "CreateExecutionSessionResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export type GetExecutionSessionErrorBody = never;

export declare namespace GetExecutionSessionErrorBody {
    export interface _Visitor<Result> {
        _unknown: () => Result;
    }
}

export const GetExecutionSessionErrorBody = {
    _visit: <Result>(_value: GetExecutionSessionErrorBody, visitor: GetExecutionSessionErrorBody._Visitor<Result>): Result => {
        return visitor._unknown();
    },

    _types: (): GetExecutionSessionErrorBody[\\"_error\\"][] => [],
} as const;
",
                    "name": "GetExecutionSessionErrorBody.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export interface GetExecutionSessionRequest {
    sessionId: string;
}
",
                    "name": "GetExecutionSessionRequest.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../../..\\";

export type GetExecutionSessionResponse = GetExecutionSessionResponse.SuccessResponse | GetExecutionSessionResponse.ErrorResponse;

namespace GetExecutionSessionResponse {
    export interface SuccessResponse {
        ok: true;
        body: model.submission.ExecutionSessionResponse | null | undefined;
    }

    export interface ErrorResponse {
        ok: false;
        error: model.submission.GetExecutionSessionErrorBody;
    }
}
",
                    "name": "GetExecutionSessionResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export type GetExecutionSessionsStateErrorBody = never;

export declare namespace GetExecutionSessionsStateErrorBody {
    export interface _Visitor<Result> {
        _unknown: () => Result;
    }
}

export const GetExecutionSessionsStateErrorBody = {
    _visit: <Result>(_value: GetExecutionSessionsStateErrorBody, visitor: GetExecutionSessionsStateErrorBody._Visitor<Result>): Result => {
        return visitor._unknown();
    },

    _types: (): GetExecutionSessionsStateErrorBody[\\"_error\\"][] => [],
} as const;
",
                    "name": "GetExecutionSessionsStateErrorBody.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../../..\\";

export type GetExecutionSessionsStateResponse = GetExecutionSessionsStateResponse.SuccessResponse | GetExecutionSessionsStateResponse.ErrorResponse;

namespace GetExecutionSessionsStateResponse {
    export interface SuccessResponse {
        ok: true;
        body: model.submission.GetExecutionSessionsStateResponseBody;
    }

    export interface ErrorResponse {
        ok: false;
        error: model.submission.GetExecutionSessionsStateErrorBody;
    }
}
",
                    "name": "GetExecutionSessionsStateResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../../..\\";

export interface GetExecutionSessionsStateResponseBody {
    states: Record<string, model.submission.ExecutionSessionState>;
    numWarmingInstances: number | null | undefined;
    warmingSessionIds: string[];
}
",
                    "name": "GetExecutionSessionsStateResponseBody.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export type StopExecutionSessionErrorBody = never;

export declare namespace StopExecutionSessionErrorBody {
    export interface _Visitor<Result> {
        _unknown: () => Result;
    }
}

export const StopExecutionSessionErrorBody = {
    _visit: <Result>(_value: StopExecutionSessionErrorBody, visitor: StopExecutionSessionErrorBody._Visitor<Result>): Result => {
        return visitor._unknown();
    },

    _types: (): StopExecutionSessionErrorBody[\\"_error\\"][] => [],
} as const;
",
                    "name": "StopExecutionSessionErrorBody.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export interface StopExecutionSessionRequest {
    sessionId: string;
}
",
                    "name": "StopExecutionSessionRequest.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../../..\\";

export type StopExecutionSessionResponse = StopExecutionSessionResponse.SuccessResponse | StopExecutionSessionResponse.ErrorResponse;

namespace StopExecutionSessionResponse {
    export interface SuccessResponse {
        ok: true;
    }

    export interface ErrorResponse {
        ok: false;
        error: model.submission.StopExecutionSessionErrorBody;
    }
}
",
                    "name": "StopExecutionSessionResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export * from \\"./CreateExecutionSessionRequest\\";
export * from \\"./CreateExecutionSessionErrorBody\\";
export * from \\"./CreateExecutionSessionResponse\\";
export * from \\"./GetExecutionSessionRequest\\";
export * from \\"./GetExecutionSessionErrorBody\\";
export * from \\"./GetExecutionSessionResponse\\";
export * from \\"./StopExecutionSessionRequest\\";
export * from \\"./StopExecutionSessionErrorBody\\";
export * from \\"./StopExecutionSessionResponse\\";
export * from \\"./GetExecutionSessionsStateResponseBody\\";
export * from \\"./GetExecutionSessionsStateErrorBody\\";
export * from \\"./GetExecutionSessionsStateResponse\\";
",
                    "name": "index.ts",
                    "type": "file",
                  },
                ],
                "name": "ExecutionSesssionManagementService",
                "type": "directory",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "export type GetSubmissionStateErrorBody = never;

export declare namespace GetSubmissionStateErrorBody {
    export interface _Visitor<Result> {
        _unknown: () => Result;
    }
}

export const GetSubmissionStateErrorBody = {
    _visit: <Result>(_value: GetSubmissionStateErrorBody, visitor: GetSubmissionStateErrorBody._Visitor<Result>): Result => {
        return visitor._unknown();
    },

    _types: (): GetSubmissionStateErrorBody[\\"_error\\"][] => [],
} as const;
",
                    "name": "GetSubmissionStateErrorBody.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../../..\\";

export interface GetSubmissionStateRequest {
    submissionId: model.submission.SubmissionId;
}
",
                    "name": "GetSubmissionStateRequest.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../../..\\";

export type GetSubmissionStateResponse = GetSubmissionStateResponse.SuccessResponse | GetSubmissionStateResponse.ErrorResponse;

namespace GetSubmissionStateResponse {
    export interface SuccessResponse {
        ok: true;
        body: model.submission.GetSubmissionStateResponseBody;
    }

    export interface ErrorResponse {
        ok: false;
        error: model.submission.GetSubmissionStateErrorBody;
    }
}
",
                    "name": "GetSubmissionStateResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../../..\\";

export interface GetSubmissionStateResponseBody {
    timeSubmitted: string | null | undefined;
    submission: string;
    language: model.commons.Language;
    submissionTypeState: model.submission.SubmissionTypeState;
}
",
                    "name": "GetSubmissionStateResponseBody.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export type GetSubmissionStateV2ErrorBody = never;

export declare namespace GetSubmissionStateV2ErrorBody {
    export interface _Visitor<Result> {
        _unknown: () => Result;
    }
}

export const GetSubmissionStateV2ErrorBody = {
    _visit: <Result>(_value: GetSubmissionStateV2ErrorBody, visitor: GetSubmissionStateV2ErrorBody._Visitor<Result>): Result => {
        return visitor._unknown();
    },

    _types: (): GetSubmissionStateV2ErrorBody[\\"_error\\"][] => [],
} as const;
",
                    "name": "GetSubmissionStateV2ErrorBody.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../../..\\";

export interface GetSubmissionStateV2Request {
    submissionId: model.submission.SubmissionId;
}
",
                    "name": "GetSubmissionStateV2Request.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../../..\\";

export type GetSubmissionStateV2Response = GetSubmissionStateV2Response.SuccessResponse | GetSubmissionStateV2Response.ErrorResponse;

namespace GetSubmissionStateV2Response {
    export interface SuccessResponse {
        ok: true;
        body: model.submission.GetSubmissionStateV2ResponseBody;
    }

    export interface ErrorResponse {
        ok: false;
        error: model.submission.GetSubmissionStateV2ErrorBody;
    }
}
",
                    "name": "GetSubmissionStateV2Response.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../../..\\";

export interface GetSubmissionStateV2ResponseBody {
    timeSubmitted: string;
    language: model.commons.Language;
    submissionFiles: model.submission.SubmissionFileInfo[];
    submissionStatus: model.submission.SubmissionStatusV2;
}
",
                    "name": "GetSubmissionStateV2ResponseBody.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export type GetTraceResponsesPageErrorBody = never;

export declare namespace GetTraceResponsesPageErrorBody {
    export interface _Visitor<Result> {
        _unknown: () => Result;
    }
}

export const GetTraceResponsesPageErrorBody = {
    _visit: <Result>(_value: GetTraceResponsesPageErrorBody, visitor: GetTraceResponsesPageErrorBody._Visitor<Result>): Result => {
        return visitor._unknown();
    },

    _types: (): GetTraceResponsesPageErrorBody[\\"_error\\"][] => [],
} as const;
",
                    "name": "GetTraceResponsesPageErrorBody.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export type GetTraceResponsesPageForWorkspaceErrorBody = never;

export declare namespace GetTraceResponsesPageForWorkspaceErrorBody {
    export interface _Visitor<Result> {
        _unknown: () => Result;
    }
}

export const GetTraceResponsesPageForWorkspaceErrorBody = {
    _visit: <Result>(_value: GetTraceResponsesPageForWorkspaceErrorBody, visitor: GetTraceResponsesPageForWorkspaceErrorBody._Visitor<Result>): Result => {
        return visitor._unknown();
    },

    _types: (): GetTraceResponsesPageForWorkspaceErrorBody[\\"_error\\"][] => [],
} as const;
",
                    "name": "GetTraceResponsesPageForWorkspaceErrorBody.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../../..\\";

export interface GetTraceResponsesPageForWorkspaceRequest {
    submissionId: model.submission.SubmissionId;
    body: model.submission.GetTraceResponsesPageRequest;
}
",
                    "name": "GetTraceResponsesPageForWorkspaceRequest.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../../..\\";

export type GetTraceResponsesPageForWorkspaceResponse = GetTraceResponsesPageForWorkspaceResponse.SuccessResponse | GetTraceResponsesPageForWorkspaceResponse.ErrorResponse;

namespace GetTraceResponsesPageForWorkspaceResponse {
    export interface SuccessResponse {
        ok: true;
        body: model.submission.TraceResponsesPage;
    }

    export interface ErrorResponse {
        ok: false;
        error: model.submission.GetTraceResponsesPageForWorkspaceErrorBody;
    }
}
",
                    "name": "GetTraceResponsesPageForWorkspaceResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../../..\\";

export type GetTraceResponsesPageResponse = GetTraceResponsesPageResponse.SuccessResponse | GetTraceResponsesPageResponse.ErrorResponse;

namespace GetTraceResponsesPageResponse {
    export interface SuccessResponse {
        ok: true;
        body: model.submission.TraceResponsesPage;
    }

    export interface ErrorResponse {
        ok: false;
        error: model.submission.GetTraceResponsesPageErrorBody;
    }
}
",
                    "name": "GetTraceResponsesPageResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export type GetTraceResponsesV2PageErrorBody = never;

export declare namespace GetTraceResponsesV2PageErrorBody {
    export interface _Visitor<Result> {
        _unknown: () => Result;
    }
}

export const GetTraceResponsesV2PageErrorBody = {
    _visit: <Result>(_value: GetTraceResponsesV2PageErrorBody, visitor: GetTraceResponsesV2PageErrorBody._Visitor<Result>): Result => {
        return visitor._unknown();
    },

    _types: (): GetTraceResponsesV2PageErrorBody[\\"_error\\"][] => [],
} as const;
",
                    "name": "GetTraceResponsesV2PageErrorBody.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export type GetTraceResponsesV2PageForWorkspaceErrorBody = never;

export declare namespace GetTraceResponsesV2PageForWorkspaceErrorBody {
    export interface _Visitor<Result> {
        _unknown: () => Result;
    }
}

export const GetTraceResponsesV2PageForWorkspaceErrorBody = {
    _visit: <Result>(_value: GetTraceResponsesV2PageForWorkspaceErrorBody, visitor: GetTraceResponsesV2PageForWorkspaceErrorBody._Visitor<Result>): Result => {
        return visitor._unknown();
    },

    _types: (): GetTraceResponsesV2PageForWorkspaceErrorBody[\\"_error\\"][] => [],
} as const;
",
                    "name": "GetTraceResponsesV2PageForWorkspaceErrorBody.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../../..\\";

export interface GetTraceResponsesV2PageForWorkspaceRequest {
    submissionId: model.submission.SubmissionId;
    body: model.submission.GetTraceResponsesPageRequest;
}
",
                    "name": "GetTraceResponsesV2PageForWorkspaceRequest.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../../..\\";

export type GetTraceResponsesV2PageForWorkspaceResponse = GetTraceResponsesV2PageForWorkspaceResponse.SuccessResponse | GetTraceResponsesV2PageForWorkspaceResponse.ErrorResponse;

namespace GetTraceResponsesV2PageForWorkspaceResponse {
    export interface SuccessResponse {
        ok: true;
        body: model.submission.TraceResponsesPageV2;
    }

    export interface ErrorResponse {
        ok: false;
        error: model.submission.GetTraceResponsesV2PageForWorkspaceErrorBody;
    }
}
",
                    "name": "GetTraceResponsesV2PageForWorkspaceResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../../..\\";

export interface GetTraceResponsesV2PageRequest {
    submissionId: model.submission.SubmissionId;
    testCaseId: model.problemV2.TestCaseId;
    body: model.submission.GetTraceResponsesPageRequest;
}
",
                    "name": "GetTraceResponsesV2PageRequest.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../../..\\";

export type GetTraceResponsesV2PageResponse = GetTraceResponsesV2PageResponse.SuccessResponse | GetTraceResponsesV2PageResponse.ErrorResponse;

namespace GetTraceResponsesV2PageResponse {
    export interface SuccessResponse {
        ok: true;
        body: model.submission.TraceResponsesPageV2;
    }

    export interface ErrorResponse {
        ok: false;
        error: model.submission.GetTraceResponsesV2PageErrorBody;
    }
}
",
                    "name": "GetTraceResponsesV2PageResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../../..\\";

export interface _GetTraceResponsesPageRequest {
    submissionId: model.submission.SubmissionId;
    testCaseId: string;
    body: model.submission.GetTraceResponsesPageRequest;
}
",
                    "name": "_GetTraceResponsesPageRequest.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export * from \\"./GetSubmissionStateRequest\\";
export * from \\"./GetSubmissionStateResponseBody\\";
export * from \\"./GetSubmissionStateErrorBody\\";
export * from \\"./GetSubmissionStateResponse\\";
export * from \\"./GetSubmissionStateV2Request\\";
export * from \\"./GetSubmissionStateV2ResponseBody\\";
export * from \\"./GetSubmissionStateV2ErrorBody\\";
export * from \\"./GetSubmissionStateV2Response\\";
export * from \\"./_GetTraceResponsesPageRequest\\";
export * from \\"./GetTraceResponsesPageErrorBody\\";
export * from \\"./GetTraceResponsesPageResponse\\";
export * from \\"./GetTraceResponsesV2PageRequest\\";
export * from \\"./GetTraceResponsesV2PageErrorBody\\";
export * from \\"./GetTraceResponsesV2PageResponse\\";
export * from \\"./GetTraceResponsesPageForWorkspaceRequest\\";
export * from \\"./GetTraceResponsesPageForWorkspaceErrorBody\\";
export * from \\"./GetTraceResponsesPageForWorkspaceResponse\\";
export * from \\"./GetTraceResponsesV2PageForWorkspaceRequest\\";
export * from \\"./GetTraceResponsesV2PageForWorkspaceErrorBody\\";
export * from \\"./GetTraceResponsesV2PageForWorkspaceResponse\\";
",
                    "name": "index.ts",
                    "type": "file",
                  },
                ],
                "name": "SubmissionInfoService",
                "type": "directory",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "export type GetWorkspaceStarterFilesErrorBody = never;

export declare namespace GetWorkspaceStarterFilesErrorBody {
    export interface _Visitor<Result> {
        _unknown: () => Result;
    }
}

export const GetWorkspaceStarterFilesErrorBody = {
    _visit: <Result>(_value: GetWorkspaceStarterFilesErrorBody, visitor: GetWorkspaceStarterFilesErrorBody._Visitor<Result>): Result => {
        return visitor._unknown();
    },

    _types: (): GetWorkspaceStarterFilesErrorBody[\\"_error\\"][] => [],
} as const;
",
                    "name": "GetWorkspaceStarterFilesErrorBody.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../../..\\";

export type GetWorkspaceStarterFilesResponse = GetWorkspaceStarterFilesResponse.SuccessResponse | GetWorkspaceStarterFilesResponse.ErrorResponse;

namespace GetWorkspaceStarterFilesResponse {
    export interface SuccessResponse {
        ok: true;
        body: model.submission.WorkspaceStarterFilesResponse;
    }

    export interface ErrorResponse {
        ok: false;
        error: model.submission.GetWorkspaceStarterFilesErrorBody;
    }
}
",
                    "name": "GetWorkspaceStarterFilesResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export type GetWorkspaceStarterFilesV2ErrorBody = never;

export declare namespace GetWorkspaceStarterFilesV2ErrorBody {
    export interface _Visitor<Result> {
        _unknown: () => Result;
    }
}

export const GetWorkspaceStarterFilesV2ErrorBody = {
    _visit: <Result>(_value: GetWorkspaceStarterFilesV2ErrorBody, visitor: GetWorkspaceStarterFilesV2ErrorBody._Visitor<Result>): Result => {
        return visitor._unknown();
    },

    _types: (): GetWorkspaceStarterFilesV2ErrorBody[\\"_error\\"][] => [],
} as const;
",
                    "name": "GetWorkspaceStarterFilesV2ErrorBody.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../../..\\";

export type GetWorkspaceStarterFilesV2Response = GetWorkspaceStarterFilesV2Response.SuccessResponse | GetWorkspaceStarterFilesV2Response.ErrorResponse;

namespace GetWorkspaceStarterFilesV2Response {
    export interface SuccessResponse {
        ok: true;
        body: model.submission.WorkspaceStarterFilesResponseV2;
    }

    export interface ErrorResponse {
        ok: false;
        error: model.submission.GetWorkspaceStarterFilesV2ErrorBody;
    }
}
",
                    "name": "GetWorkspaceStarterFilesV2Response.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export * from \\"./GetWorkspaceStarterFilesErrorBody\\";
export * from \\"./GetWorkspaceStarterFilesResponse\\";
export * from \\"./GetWorkspaceStarterFilesV2ErrorBody\\";
export * from \\"./GetWorkspaceStarterFilesV2Response\\";
",
                    "name": "index.ts",
                    "type": "file",
                  },
                ],
                "name": "WorkspaceInfoService",
                "type": "directory",
              },
              Object {
                "contents": "export * from \\"./ExecutionSesssionManagementService\\";
export * from \\"./SubmissionInfoService\\";
export * from \\"./WorkspaceInfoService\\";
",
                "name": "index.ts",
                "type": "file",
              },
            ],
            "name": "service-types",
            "type": "directory",
          },
          Object {
            "contents": Array [
              Object {
                "contents": "import { submission, commons } from \\"../..\\";

export type ActualResult =
    | ActualResult.Value
    | ActualResult.Exception
    | ActualResult.ExceptionV2;

export declare namespace ActualResult {
    interface Value {
        _type: \\"value\\";
        value: commons.VariableValue;
    }

    interface Exception extends submission.ExceptionInfo {
        _type: \\"exception\\";
    }

    interface ExceptionV2 {
        _type: \\"exceptionV2\\";
        exceptionV2: submission.ExceptionV2;
    }

    export interface _Visitor<Result> {
        value: (value: commons.VariableValue) => Result;
        exception: (value: submission.ExceptionInfo) => Result;
        exceptionV2: (value: submission.ExceptionV2) => Result;
        _unknown: () => Result;
    }
}

export const ActualResult = {
    value: (value: commons.VariableValue): ActualResult.Value => ({
        value: value,
        _type: \\"value\\"
    }),

    exception: (value: submission.ExceptionInfo): ActualResult.Exception => ({
        ...value,
        _type: \\"exception\\"
    }),

    exceptionV2: (value: submission.ExceptionV2): ActualResult.ExceptionV2 => ({
        exceptionV2: value,
        _type: \\"exceptionV2\\"
    }),

    _visit: <Result>(value: ActualResult, visitor: ActualResult._Visitor<Result>): Result => {
        switch (value._type) {
            case \\"value\\": return visitor.value(value.value);
            case \\"exception\\": return visitor.exception(value);
            case \\"exceptionV2\\": return visitor.exceptionV2(value.exceptionV2);
            default: return visitor._unknown();
        }
    },

    _types: (): ActualResult[\\"_type\\"][] => [\\"value\\", \\"exception\\", \\"exceptionV2\\"],
} as const;
",
                "name": "ActualResult.ts",
                "type": "file",
              },
              Object {
                "contents": "import * as model from \\"../..\\";

export interface BuildingExecutorResponse {
    submissionId: model.submission.SubmissionId;
    status: model.submission.ExecutionSessionStatus;
}
",
                "name": "BuildingExecutorResponse.ts",
                "type": "file",
              },
              Object {
                "contents": "import { submission } from \\"../..\\";

export type CodeExecutionUpdate =
    /**
     * Statuses if an executor for the session isn't ready (Before RunningResponse). */
    | CodeExecutionUpdate.BuildingExecutor
    /**
     * Sent once a test submission is executing. */
    | CodeExecutionUpdate.Running
    /**
     * Sent if a submission cannot be run (i.e. Compile Error). */
    | CodeExecutionUpdate.Errored
    /**
     * Sent if a submission is stopped. */
    | CodeExecutionUpdate.Stopped
    /**
     * Graded testcases without trace information. */
    | CodeExecutionUpdate.Graded
    /**
     * Graded submission for v2 problems. */
    | CodeExecutionUpdate.GradedV2
    /**
     * Workspace run without trace information. */
    | CodeExecutionUpdate.WorkspaceRan
    /**
     * Gives progress about what is being recorded. */
    | CodeExecutionUpdate.Recording
    /**
     * Graded testcases with trace information. */
    | CodeExecutionUpdate.Recorded
    /**
     * Sent if an invalid request is sent for a submission. */
    | CodeExecutionUpdate.InvalidRequest
    /**
     * Sent once a submission is graded and fully recorded. */
    | CodeExecutionUpdate.Finished;

export declare namespace CodeExecutionUpdate {
    interface BuildingExecutor extends submission.BuildingExecutorResponse {
        _type: \\"buildingExecutor\\";
    }

    interface Running extends submission.RunningResponse {
        _type: \\"running\\";
    }

    interface Errored extends submission.ErroredResponse {
        _type: \\"errored\\";
    }

    interface Stopped extends submission.StoppedResponse {
        _type: \\"stopped\\";
    }

    interface Graded extends submission.GradedResponse {
        _type: \\"graded\\";
    }

    interface GradedV2 extends submission.GradedResponseV2 {
        _type: \\"gradedV2\\";
    }

    interface WorkspaceRan extends submission.WorkspaceRanResponse {
        _type: \\"workspaceRan\\";
    }

    interface Recording extends submission.RecordingResponseNotification {
        _type: \\"recording\\";
    }

    interface Recorded extends submission.RecordedResponseNotification {
        _type: \\"recorded\\";
    }

    interface InvalidRequest extends submission.InvalidRequestResponse {
        _type: \\"invalidRequest\\";
    }

    interface Finished extends submission.FinishedResponse {
        _type: \\"finished\\";
    }

    export interface _Visitor<Result> {
        buildingExecutor: (value: submission.BuildingExecutorResponse) => Result;
        running: (value: submission.RunningResponse) => Result;
        errored: (value: submission.ErroredResponse) => Result;
        stopped: (value: submission.StoppedResponse) => Result;
        graded: (value: submission.GradedResponse) => Result;
        gradedV2: (value: submission.GradedResponseV2) => Result;
        workspaceRan: (value: submission.WorkspaceRanResponse) => Result;
        recording: (value: submission.RecordingResponseNotification) => Result;
        recorded: (value: submission.RecordedResponseNotification) => Result;
        invalidRequest: (value: submission.InvalidRequestResponse) => Result;
        finished: (value: submission.FinishedResponse) => Result;
        _unknown: () => Result;
    }
}

export const CodeExecutionUpdate = {
    buildingExecutor: (value: submission.BuildingExecutorResponse): CodeExecutionUpdate.BuildingExecutor => ({
        ...value,
        _type: \\"buildingExecutor\\"
    }),

    running: (value: submission.RunningResponse): CodeExecutionUpdate.Running => ({
        ...value,
        _type: \\"running\\"
    }),

    errored: (value: submission.ErroredResponse): CodeExecutionUpdate.Errored => ({
        ...value,
        _type: \\"errored\\"
    }),

    stopped: (value: submission.StoppedResponse): CodeExecutionUpdate.Stopped => ({
        ...value,
        _type: \\"stopped\\"
    }),

    graded: (value: submission.GradedResponse): CodeExecutionUpdate.Graded => ({
        ...value,
        _type: \\"graded\\"
    }),

    gradedV2: (value: submission.GradedResponseV2): CodeExecutionUpdate.GradedV2 => ({
        ...value,
        _type: \\"gradedV2\\"
    }),

    workspaceRan: (value: submission.WorkspaceRanResponse): CodeExecutionUpdate.WorkspaceRan => ({
        ...value,
        _type: \\"workspaceRan\\"
    }),

    recording: (value: submission.RecordingResponseNotification): CodeExecutionUpdate.Recording => ({
        ...value,
        _type: \\"recording\\"
    }),

    recorded: (value: submission.RecordedResponseNotification): CodeExecutionUpdate.Recorded => ({
        ...value,
        _type: \\"recorded\\"
    }),

    invalidRequest: (value: submission.InvalidRequestResponse): CodeExecutionUpdate.InvalidRequest => ({
        ...value,
        _type: \\"invalidRequest\\"
    }),

    finished: (value: submission.FinishedResponse): CodeExecutionUpdate.Finished => ({
        ...value,
        _type: \\"finished\\"
    }),

    _visit: <Result>(value: CodeExecutionUpdate, visitor: CodeExecutionUpdate._Visitor<Result>): Result => {
        switch (value._type) {
            case \\"buildingExecutor\\": return visitor.buildingExecutor(value);
            case \\"running\\": return visitor.running(value);
            case \\"errored\\": return visitor.errored(value);
            case \\"stopped\\": return visitor.stopped(value);
            case \\"graded\\": return visitor.graded(value);
            case \\"gradedV2\\": return visitor.gradedV2(value);
            case \\"workspaceRan\\": return visitor.workspaceRan(value);
            case \\"recording\\": return visitor.recording(value);
            case \\"recorded\\": return visitor.recorded(value);
            case \\"invalidRequest\\": return visitor.invalidRequest(value);
            case \\"finished\\": return visitor.finished(value);
            default: return visitor._unknown();
        }
    },

    _types: (): CodeExecutionUpdate[\\"_type\\"][] => [\\"buildingExecutor\\", \\"running\\", \\"errored\\", \\"stopped\\", \\"graded\\", \\"gradedV2\\", \\"workspaceRan\\", \\"recording\\", \\"recorded\\", \\"invalidRequest\\", \\"finished\\"],
} as const;
",
                "name": "CodeExecutionUpdate.ts",
                "type": "file",
              },
              Object {
                "contents": "export interface CompileError {
    message: string;
}
",
                "name": "CompileError.ts",
                "type": "file",
              },
              Object {
                "contents": "import * as model from \\"../..\\";

export interface CustomTestCasesUnsupported {
    problemId: model.commons.ProblemId;
    submissionId: model.submission.SubmissionId;
}
",
                "name": "CustomTestCasesUnsupported.ts",
                "type": "file",
              },
              Object {
                "contents": "import { submission } from \\"../..\\";

export type ErrorInfo =
    | ErrorInfo.CompileError
    /**
     * If the submission cannot be executed and throws a runtime error before getting to any of the testcases.
     *  */
    | ErrorInfo.RuntimeError
    /**
     * If the trace backend encounters an unexpected error.
     *  */
    | ErrorInfo.InternalError;

export declare namespace ErrorInfo {
    interface CompileError extends submission.CompileError {
        _type: \\"compileError\\";
    }

    interface RuntimeError extends submission.RuntimeError {
        _type: \\"runtimeError\\";
    }

    interface InternalError extends submission.InternalError {
        _type: \\"internalError\\";
    }

    export interface _Visitor<Result> {
        compileError: (value: submission.CompileError) => Result;
        runtimeError: (value: submission.RuntimeError) => Result;
        internalError: (value: submission.InternalError) => Result;
        _unknown: () => Result;
    }
}

export const ErrorInfo = {
    compileError: (value: submission.CompileError): ErrorInfo.CompileError => ({
        ...value,
        _type: \\"compileError\\"
    }),

    runtimeError: (value: submission.RuntimeError): ErrorInfo.RuntimeError => ({
        ...value,
        _type: \\"runtimeError\\"
    }),

    internalError: (value: submission.InternalError): ErrorInfo.InternalError => ({
        ...value,
        _type: \\"internalError\\"
    }),

    _visit: <Result>(value: ErrorInfo, visitor: ErrorInfo._Visitor<Result>): Result => {
        switch (value._type) {
            case \\"compileError\\": return visitor.compileError(value);
            case \\"runtimeError\\": return visitor.runtimeError(value);
            case \\"internalError\\": return visitor.internalError(value);
            default: return visitor._unknown();
        }
    },

    _types: (): ErrorInfo[\\"_type\\"][] => [\\"compileError\\", \\"runtimeError\\", \\"internalError\\"],
} as const;
",
                "name": "ErrorInfo.ts",
                "type": "file",
              },
              Object {
                "contents": "import * as model from \\"../..\\";

export interface ErroredResponse {
    submissionId: model.submission.SubmissionId;
    errorInfo: model.submission.ErrorInfo;
}
",
                "name": "ErroredResponse.ts",
                "type": "file",
              },
              Object {
                "contents": "export interface ExceptionInfo {
    exceptionType: string;
    exceptionMessage: string;
    exceptionStacktrace: string;
}
",
                "name": "ExceptionInfo.ts",
                "type": "file",
              },
              Object {
                "contents": "import { submission } from \\"../..\\";

export type ExceptionV2 =
    | ExceptionV2.Generic
    | ExceptionV2.Timeout;

export declare namespace ExceptionV2 {
    interface Generic extends submission.ExceptionInfo {
        _type: \\"generic\\";
    }

    interface Timeout {
        _type: \\"timeout\\";
    }

    export interface _Visitor<Result> {
        generic: (value: submission.ExceptionInfo) => Result;
        timeout: () => Result;
        _unknown: () => Result;
    }
}

export const ExceptionV2 = {
    generic: (value: submission.ExceptionInfo): ExceptionV2.Generic => ({
        ...value,
        _type: \\"generic\\"
    }),

    timeout: (): ExceptionV2.Timeout => ({
        _type: \\"timeout\\"
    }),

    _visit: <Result>(value: ExceptionV2, visitor: ExceptionV2._Visitor<Result>): Result => {
        switch (value._type) {
            case \\"generic\\": return visitor.generic(value);
            case \\"timeout\\": return visitor.timeout();
            default: return visitor._unknown();
        }
    },

    _types: (): ExceptionV2[\\"_type\\"][] => [\\"generic\\", \\"timeout\\"],
} as const;
",
                "name": "ExceptionV2.ts",
                "type": "file",
              },
              Object {
                "contents": "import * as model from \\"../..\\";

export interface ExecutionSessionResponse {
    sessionId: string;
    executionSessionUrl: string | null | undefined;
    language: model.commons.Language;
    status: model.submission.ExecutionSessionStatus;
}
",
                "name": "ExecutionSessionResponse.ts",
                "type": "file",
              },
              Object {
                "contents": "import * as model from \\"../..\\";

export interface ExecutionSessionState {
    lastTimeContacted: string | null | undefined;
    sessionId: string;
    isWarmInstance: boolean;
    awsTaskId: string | null | undefined;
    language: model.commons.Language;
    status: model.submission.ExecutionSessionStatus;
}
",
                "name": "ExecutionSessionState.ts",
                "type": "file",
              },
              Object {
                "contents": "export type ExecutionSessionStatus =
    | \\"CREATING_CONTAINER\\"
    | \\"PROVISIONING_CONTAINER\\"
    | \\"PENDING_CONTAINER\\"
    | \\"RUNNING_CONTAINER\\"
    | \\"LIVE_CONTAINER\\"
    | \\"FAILED_TO_LAUNCH\\";

export const ExecutionSessionStatus = {
    CreatingContainer: \\"CREATING_CONTAINER\\",
    ProvisioningContainer: \\"PROVISIONING_CONTAINER\\",
    PendingContainer: \\"PENDING_CONTAINER\\",
    RunningContainer: \\"RUNNING_CONTAINER\\",
    LiveContainer: \\"LIVE_CONTAINER\\",
    FailedToLaunch: \\"FAILED_TO_LAUNCH\\",

    _visit: <Result>(value: ExecutionSessionStatus, visitor: ExecutionSessionStatus._Visitor<Result>): Result => {
        switch (value) {
            case ExecutionSessionStatus.CreatingContainer: return visitor.creatingContainer();
            case ExecutionSessionStatus.ProvisioningContainer: return visitor.provisioningContainer();
            case ExecutionSessionStatus.PendingContainer: return visitor.pendingContainer();
            case ExecutionSessionStatus.RunningContainer: return visitor.runningContainer();
            case ExecutionSessionStatus.LiveContainer: return visitor.liveContainer();
            case ExecutionSessionStatus.FailedToLaunch: return visitor.failedToLaunch();
            default: return visitor._unknown();
        }
    },

    _values: (): ExecutionSessionStatus[] => [ExecutionSessionStatus.CreatingContainer, ExecutionSessionStatus.ProvisioningContainer, ExecutionSessionStatus.PendingContainer, ExecutionSessionStatus.RunningContainer, ExecutionSessionStatus.LiveContainer, ExecutionSessionStatus.FailedToLaunch],
} as const;

export declare namespace ExecutionSessionStatus {
    type CreatingContainer = \\"CREATING_CONTAINER\\";
    type ProvisioningContainer = \\"PROVISIONING_CONTAINER\\";
    type PendingContainer = \\"PENDING_CONTAINER\\";
    type RunningContainer = \\"RUNNING_CONTAINER\\";
    type LiveContainer = \\"LIVE_CONTAINER\\";
    type FailedToLaunch = \\"FAILED_TO_LAUNCH\\";

    export interface _Visitor<Result> {
        creatingContainer: () => Result;
        provisioningContainer: () => Result;
        pendingContainer: () => Result;
        runningContainer: () => Result;
        liveContainer: () => Result;
        failedToLaunch: () => Result;
        _unknown: () => Result;
    }
}
",
                "name": "ExecutionSessionStatus.ts",
                "type": "file",
              },
              Object {
                "contents": "import * as model from \\"../..\\";

export interface ExistingSubmissionExecuting {
    submissionId: model.submission.SubmissionId;
}
",
                "name": "ExistingSubmissionExecuting.ts",
                "type": "file",
              },
              Object {
                "contents": "export interface ExpressionLocation {
    start: number;
    offset: number;
}
",
                "name": "ExpressionLocation.ts",
                "type": "file",
              },
              Object {
                "contents": "import * as model from \\"../..\\";

export interface FinishedResponse {
    submissionId: model.submission.SubmissionId;
}
",
                "name": "FinishedResponse.ts",
                "type": "file",
              },
              Object {
                "contents": "export interface GetTraceResponsesPageRequest {
    offset: number | null | undefined;
}
",
                "name": "GetTraceResponsesPageRequest.ts",
                "type": "file",
              },
              Object {
                "contents": "import * as model from \\"../..\\";

export interface GradedResponse {
    submissionId: model.submission.SubmissionId;
    testCases: Record<string, model.submission.TestCaseResultWithStdout>;
}
",
                "name": "GradedResponse.ts",
                "type": "file",
              },
              Object {
                "contents": "import * as model from \\"../..\\";

export interface GradedResponseV2 {
    submissionId: model.submission.SubmissionId;
    testCases: Record<model.problemV2.TestCaseId, model.submission.TestCaseGrade>;
}
",
                "name": "GradedResponseV2.ts",
                "type": "file",
              },
              Object {
                "contents": "import * as model from \\"../..\\";

export interface GradedTestCaseUpdate {
    testCaseId: model.problemV2.TestCaseId;
    grade: model.submission.TestCaseGrade;
}
",
                "name": "GradedTestCaseUpdate.ts",
                "type": "file",
              },
              Object {
                "contents": "import * as model from \\"../..\\";

export interface InitializeProblemRequest {
    problemId: model.commons.ProblemId;
    problemVersion: number | null | undefined;
}
",
                "name": "InitializeProblemRequest.ts",
                "type": "file",
              },
              Object {
                "contents": "import * as model from \\"../..\\";

export interface InternalError {
    exceptionInfo: model.submission.ExceptionInfo;
}
",
                "name": "InternalError.ts",
                "type": "file",
              },
              Object {
                "contents": "import { submission } from \\"../..\\";

export type InvalidRequestCause =
    /**
     * The submission request references a submission id that doesn't exist. */
    | InvalidRequestCause.SubmissionIdNotFound
    | InvalidRequestCause.CustomTestCasesUnsupported
    /**
     * The submission request was routed to an incorrect language executor. */
    | InvalidRequestCause.UnexpectedLanguage;

export declare namespace InvalidRequestCause {
    interface SubmissionIdNotFound extends submission.SubmissionIdNotFound {
        _type: \\"submissionIdNotFound\\";
    }

    interface CustomTestCasesUnsupported extends submission.CustomTestCasesUnsupported {
        _type: \\"customTestCasesUnsupported\\";
    }

    interface UnexpectedLanguage extends submission.UnexpectedLanguageError {
        _type: \\"unexpectedLanguage\\";
    }

    export interface _Visitor<Result> {
        submissionIdNotFound: (value: submission.SubmissionIdNotFound) => Result;
        customTestCasesUnsupported: (value: submission.CustomTestCasesUnsupported) => Result;
        unexpectedLanguage: (value: submission.UnexpectedLanguageError) => Result;
        _unknown: () => Result;
    }
}

export const InvalidRequestCause = {
    submissionIdNotFound: (value: submission.SubmissionIdNotFound): InvalidRequestCause.SubmissionIdNotFound => ({
        ...value,
        _type: \\"submissionIdNotFound\\"
    }),

    customTestCasesUnsupported: (value: submission.CustomTestCasesUnsupported): InvalidRequestCause.CustomTestCasesUnsupported => ({
        ...value,
        _type: \\"customTestCasesUnsupported\\"
    }),

    unexpectedLanguage: (value: submission.UnexpectedLanguageError): InvalidRequestCause.UnexpectedLanguage => ({
        ...value,
        _type: \\"unexpectedLanguage\\"
    }),

    _visit: <Result>(value: InvalidRequestCause, visitor: InvalidRequestCause._Visitor<Result>): Result => {
        switch (value._type) {
            case \\"submissionIdNotFound\\": return visitor.submissionIdNotFound(value);
            case \\"customTestCasesUnsupported\\": return visitor.customTestCasesUnsupported(value);
            case \\"unexpectedLanguage\\": return visitor.unexpectedLanguage(value);
            default: return visitor._unknown();
        }
    },

    _types: (): InvalidRequestCause[\\"_type\\"][] => [\\"submissionIdNotFound\\", \\"customTestCasesUnsupported\\", \\"unexpectedLanguage\\"],
} as const;
",
                "name": "InvalidRequestCause.ts",
                "type": "file",
              },
              Object {
                "contents": "import * as model from \\"../..\\";

export interface InvalidRequestResponse {
    request: model.submission.SubmissionRequest;
    cause: model.submission.InvalidRequestCause;
}
",
                "name": "InvalidRequestResponse.ts",
                "type": "file",
              },
              Object {
                "contents": "export interface LightweightStackframeInformation {
    numStackFrames: number;
    topStackFrameMethodName: string;
}
",
                "name": "LightweightStackframeInformation.ts",
                "type": "file",
              },
              Object {
                "contents": "import * as model from \\"../..\\";

export interface RecordedResponseNotification {
    submissionId: model.submission.SubmissionId;
    traceResponsesSize: number;
    testCaseId: string | null | undefined;
}
",
                "name": "RecordedResponseNotification.ts",
                "type": "file",
              },
              Object {
                "contents": "import * as model from \\"../..\\";

export interface RecordedTestCaseUpdate {
    testCaseId: model.problemV2.TestCaseId;
    traceResponsesSize: number;
}
",
                "name": "RecordedTestCaseUpdate.ts",
                "type": "file",
              },
              Object {
                "contents": "import * as model from \\"../..\\";

export interface RecordingResponseNotification {
    submissionId: model.submission.SubmissionId;
    testCaseId: string | null | undefined;
    lineNumber: number;
    lightweightStackInfo: model.submission.LightweightStackframeInformation;
    tracedFile: model.submission.TracedFile | null | undefined;
}
",
                "name": "RecordingResponseNotification.ts",
                "type": "file",
              },
              Object {
                "contents": "import * as model from \\"../..\\";

export interface RunningResponse {
    submissionId: model.submission.SubmissionId;
    state: model.submission.RunningSubmissionState;
}
",
                "name": "RunningResponse.ts",
                "type": "file",
              },
              Object {
                "contents": "export type RunningSubmissionState =
    | \\"QUEUEING_SUBMISSION\\"
    | \\"KILLING_HISTORICAL_SUBMISSIONS\\"
    | \\"WRITING_SUBMISSION_TO_FILE\\"
    | \\"COMPILING_SUBMISSION\\"
    | \\"RUNNING_SUBMISSION\\";

export const RunningSubmissionState = {
    QueueingSubmission: \\"QUEUEING_SUBMISSION\\",
    KillingHistoricalSubmissions: \\"KILLING_HISTORICAL_SUBMISSIONS\\",
    WritingSubmissionToFile: \\"WRITING_SUBMISSION_TO_FILE\\",
    CompilingSubmission: \\"COMPILING_SUBMISSION\\",
    RunningSubmission: \\"RUNNING_SUBMISSION\\",

    _visit: <Result>(value: RunningSubmissionState, visitor: RunningSubmissionState._Visitor<Result>): Result => {
        switch (value) {
            case RunningSubmissionState.QueueingSubmission: return visitor.queueingSubmission();
            case RunningSubmissionState.KillingHistoricalSubmissions: return visitor.killingHistoricalSubmissions();
            case RunningSubmissionState.WritingSubmissionToFile: return visitor.writingSubmissionToFile();
            case RunningSubmissionState.CompilingSubmission: return visitor.compilingSubmission();
            case RunningSubmissionState.RunningSubmission: return visitor.runningSubmission();
            default: return visitor._unknown();
        }
    },

    _values: (): RunningSubmissionState[] => [RunningSubmissionState.QueueingSubmission, RunningSubmissionState.KillingHistoricalSubmissions, RunningSubmissionState.WritingSubmissionToFile, RunningSubmissionState.CompilingSubmission, RunningSubmissionState.RunningSubmission],
} as const;

export declare namespace RunningSubmissionState {
    type QueueingSubmission = \\"QUEUEING_SUBMISSION\\";
    type KillingHistoricalSubmissions = \\"KILLING_HISTORICAL_SUBMISSIONS\\";
    type WritingSubmissionToFile = \\"WRITING_SUBMISSION_TO_FILE\\";
    type CompilingSubmission = \\"COMPILING_SUBMISSION\\";
    type RunningSubmission = \\"RUNNING_SUBMISSION\\";

    export interface _Visitor<Result> {
        queueingSubmission: () => Result;
        killingHistoricalSubmissions: () => Result;
        writingSubmissionToFile: () => Result;
        compilingSubmission: () => Result;
        runningSubmission: () => Result;
        _unknown: () => Result;
    }
}
",
                "name": "RunningSubmissionState.ts",
                "type": "file",
              },
              Object {
                "contents": "export interface RuntimeError {
    message: string;
}
",
                "name": "RuntimeError.ts",
                "type": "file",
              },
              Object {
                "contents": "import * as model from \\"../..\\";

export interface Scope {
    variables: Record<string, model.commons.DebugVariableValue>;
}
",
                "name": "Scope.ts",
                "type": "file",
              },
              Object {
                "contents": "export type ShareId = string & {
    __ShareId: void;
};

export const ShareId = {
    of: (value: string): ShareId => value as ShareId
};
",
                "name": "ShareId.ts",
                "type": "file",
              },
              Object {
                "contents": "import * as model from \\"../..\\";

export interface StackFrame {
    methodName: string;
    lineNumber: number;
    scopes: model.submission.Scope[];
}
",
                "name": "StackFrame.ts",
                "type": "file",
              },
              Object {
                "contents": "import * as model from \\"../..\\";

export interface StackInformation {
    numStackFrames: number;
    topStackFrame: model.submission.StackFrame | null | undefined;
}
",
                "name": "StackInformation.ts",
                "type": "file",
              },
              Object {
                "contents": "import * as model from \\"../..\\";

export interface StderrResponse {
    submissionId: model.submission.SubmissionId;
    stderr: string;
}
",
                "name": "StderrResponse.ts",
                "type": "file",
              },
              Object {
                "contents": "import * as model from \\"../..\\";

export interface StdoutResponse {
    submissionId: model.submission.SubmissionId;
    stdout: string;
}
",
                "name": "StdoutResponse.ts",
                "type": "file",
              },
              Object {
                "contents": "import * as model from \\"../..\\";

export interface StopRequest {
    submissionId: model.submission.SubmissionId;
}
",
                "name": "StopRequest.ts",
                "type": "file",
              },
              Object {
                "contents": "import * as model from \\"../..\\";

export interface StoppedResponse {
    submissionId: model.submission.SubmissionId;
}
",
                "name": "StoppedResponse.ts",
                "type": "file",
              },
              Object {
                "contents": "export interface SubmissionFileInfo {
    directory: string;
    filename: string;
    contents: string;
}
",
                "name": "SubmissionFileInfo.ts",
                "type": "file",
              },
              Object {
                "contents": "export type SubmissionId = string & {
    __SubmissionId: void;
};

export const SubmissionId = {
    of: (value: string): SubmissionId => value as SubmissionId
};
",
                "name": "SubmissionId.ts",
                "type": "file",
              },
              Object {
                "contents": "import * as model from \\"../..\\";

export interface SubmissionIdNotFound {
    missingSubmissionId: model.submission.SubmissionId;
}
",
                "name": "SubmissionIdNotFound.ts",
                "type": "file",
              },
              Object {
                "contents": "import { submission } from \\"../..\\";

export type SubmissionRequest =
    | SubmissionRequest.InitializeProblemRequest
    | SubmissionRequest.InitializeWorkspaceRequest
    | SubmissionRequest.SubmitV2
    | SubmissionRequest.WorkspaceSubmit
    | SubmissionRequest.Stop;

export declare namespace SubmissionRequest {
    interface InitializeProblemRequest extends submission.InitializeProblemRequest {
        _type: \\"initializeProblemRequest\\";
    }

    interface InitializeWorkspaceRequest {
        _type: \\"initializeWorkspaceRequest\\";
    }

    interface SubmitV2 extends submission.SubmitRequestV2 {
        _type: \\"submitV2\\";
    }

    interface WorkspaceSubmit extends submission.WorkspaceSubmitRequest {
        _type: \\"workspaceSubmit\\";
    }

    interface Stop extends submission.StopRequest {
        _type: \\"stop\\";
    }

    export interface _Visitor<Result> {
        initializeProblemRequest: (value: submission.InitializeProblemRequest) => Result;
        initializeWorkspaceRequest: () => Result;
        submitV2: (value: submission.SubmitRequestV2) => Result;
        workspaceSubmit: (value: submission.WorkspaceSubmitRequest) => Result;
        stop: (value: submission.StopRequest) => Result;
        _unknown: () => Result;
    }
}

export const SubmissionRequest = {
    initializeProblemRequest: (value: submission.InitializeProblemRequest): SubmissionRequest.InitializeProblemRequest => ({
        ...value,
        _type: \\"initializeProblemRequest\\"
    }),

    initializeWorkspaceRequest: (): SubmissionRequest.InitializeWorkspaceRequest => ({
        _type: \\"initializeWorkspaceRequest\\"
    }),

    submitV2: (value: submission.SubmitRequestV2): SubmissionRequest.SubmitV2 => ({
        ...value,
        _type: \\"submitV2\\"
    }),

    workspaceSubmit: (value: submission.WorkspaceSubmitRequest): SubmissionRequest.WorkspaceSubmit => ({
        ...value,
        _type: \\"workspaceSubmit\\"
    }),

    stop: (value: submission.StopRequest): SubmissionRequest.Stop => ({
        ...value,
        _type: \\"stop\\"
    }),

    _visit: <Result>(value: SubmissionRequest, visitor: SubmissionRequest._Visitor<Result>): Result => {
        switch (value._type) {
            case \\"initializeProblemRequest\\": return visitor.initializeProblemRequest(value);
            case \\"initializeWorkspaceRequest\\": return visitor.initializeWorkspaceRequest();
            case \\"submitV2\\": return visitor.submitV2(value);
            case \\"workspaceSubmit\\": return visitor.workspaceSubmit(value);
            case \\"stop\\": return visitor.stop(value);
            default: return visitor._unknown();
        }
    },

    _types: (): SubmissionRequest[\\"_type\\"][] => [\\"initializeProblemRequest\\", \\"initializeWorkspaceRequest\\", \\"submitV2\\", \\"workspaceSubmit\\", \\"stop\\"],
} as const;
",
                "name": "SubmissionRequest.ts",
                "type": "file",
              },
              Object {
                "contents": "import { submission, commons } from \\"../..\\";

export type SubmissionResponse =
    | SubmissionResponse.ServerInitialized
    | SubmissionResponse.ProblemInitialized
    | SubmissionResponse.WorkspaceInitialized
    | SubmissionResponse.ServerErrored
    | SubmissionResponse.CodeExecutionUpdate
    | SubmissionResponse.Terminated;

export declare namespace SubmissionResponse {
    interface ServerInitialized {
        _type: \\"serverInitialized\\";
    }

    interface ProblemInitialized {
        _type: \\"problemInitialized\\";
        problemInitialized: commons.ProblemId;
    }

    interface WorkspaceInitialized {
        _type: \\"workspaceInitialized\\";
    }

    interface ServerErrored extends submission.ExceptionInfo {
        _type: \\"serverErrored\\";
    }

    interface CodeExecutionUpdate {
        _type: \\"codeExecutionUpdate\\";
        codeExecutionUpdate: submission.CodeExecutionUpdate;
    }

    interface Terminated extends submission.TerminatedResponse {
        _type: \\"terminated\\";
    }

    export interface _Visitor<Result> {
        serverInitialized: () => Result;
        problemInitialized: (value: commons.ProblemId) => Result;
        workspaceInitialized: () => Result;
        serverErrored: (value: submission.ExceptionInfo) => Result;
        codeExecutionUpdate: (value: submission.CodeExecutionUpdate) => Result;
        terminated: (value: submission.TerminatedResponse) => Result;
        _unknown: () => Result;
    }
}

export const SubmissionResponse = {
    serverInitialized: (): SubmissionResponse.ServerInitialized => ({
        _type: \\"serverInitialized\\"
    }),

    problemInitialized: (value: commons.ProblemId): SubmissionResponse.ProblemInitialized => ({
        problemInitialized: value,
        _type: \\"problemInitialized\\"
    }),

    workspaceInitialized: (): SubmissionResponse.WorkspaceInitialized => ({
        _type: \\"workspaceInitialized\\"
    }),

    serverErrored: (value: submission.ExceptionInfo): SubmissionResponse.ServerErrored => ({
        ...value,
        _type: \\"serverErrored\\"
    }),

    codeExecutionUpdate: (value: submission.CodeExecutionUpdate): SubmissionResponse.CodeExecutionUpdate => ({
        codeExecutionUpdate: value,
        _type: \\"codeExecutionUpdate\\"
    }),

    terminated: (value: submission.TerminatedResponse): SubmissionResponse.Terminated => ({
        ...value,
        _type: \\"terminated\\"
    }),

    _visit: <Result>(value: SubmissionResponse, visitor: SubmissionResponse._Visitor<Result>): Result => {
        switch (value._type) {
            case \\"serverInitialized\\": return visitor.serverInitialized();
            case \\"problemInitialized\\": return visitor.problemInitialized(value.problemInitialized);
            case \\"workspaceInitialized\\": return visitor.workspaceInitialized();
            case \\"serverErrored\\": return visitor.serverErrored(value);
            case \\"codeExecutionUpdate\\": return visitor.codeExecutionUpdate(value.codeExecutionUpdate);
            case \\"terminated\\": return visitor.terminated(value);
            default: return visitor._unknown();
        }
    },

    _types: (): SubmissionResponse[\\"_type\\"][] => [\\"serverInitialized\\", \\"problemInitialized\\", \\"workspaceInitialized\\", \\"serverErrored\\", \\"codeExecutionUpdate\\", \\"terminated\\"],
} as const;
",
                "name": "SubmissionResponse.ts",
                "type": "file",
              },
              Object {
                "contents": "import { submission } from \\"../..\\";

export type SubmissionStatusForTestCase =
    | SubmissionStatusForTestCase.Graded
    | SubmissionStatusForTestCase.GradedV2
    | SubmissionStatusForTestCase.Traced;

export declare namespace SubmissionStatusForTestCase {
    interface Graded extends submission.TestCaseResultWithStdout {
        _type: \\"graded\\";
    }

    interface GradedV2 {
        _type: \\"gradedV2\\";
        gradedV2: submission.TestCaseGrade;
    }

    interface Traced extends submission.TracedTestCase {
        _type: \\"traced\\";
    }

    export interface _Visitor<Result> {
        graded: (value: submission.TestCaseResultWithStdout) => Result;
        gradedV2: (value: submission.TestCaseGrade) => Result;
        traced: (value: submission.TracedTestCase) => Result;
        _unknown: () => Result;
    }
}

export const SubmissionStatusForTestCase = {
    graded: (value: submission.TestCaseResultWithStdout): SubmissionStatusForTestCase.Graded => ({
        ...value,
        _type: \\"graded\\"
    }),

    gradedV2: (value: submission.TestCaseGrade): SubmissionStatusForTestCase.GradedV2 => ({
        gradedV2: value,
        _type: \\"gradedV2\\"
    }),

    traced: (value: submission.TracedTestCase): SubmissionStatusForTestCase.Traced => ({
        ...value,
        _type: \\"traced\\"
    }),

    _visit: <Result>(value: SubmissionStatusForTestCase, visitor: SubmissionStatusForTestCase._Visitor<Result>): Result => {
        switch (value._type) {
            case \\"graded\\": return visitor.graded(value);
            case \\"gradedV2\\": return visitor.gradedV2(value.gradedV2);
            case \\"traced\\": return visitor.traced(value);
            default: return visitor._unknown();
        }
    },

    _types: (): SubmissionStatusForTestCase[\\"_type\\"][] => [\\"graded\\", \\"gradedV2\\", \\"traced\\"],
} as const;
",
                "name": "SubmissionStatusForTestCase.ts",
                "type": "file",
              },
              Object {
                "contents": "import { submission } from \\"../..\\";

export type SubmissionStatusV2 =
    | SubmissionStatusV2.Test
    | SubmissionStatusV2.Workspace;

export declare namespace SubmissionStatusV2 {
    interface Test extends submission.TestSubmissionStatusV2 {
        _type: \\"test\\";
    }

    interface Workspace extends submission.WorkspaceSubmissionStatusV2 {
        _type: \\"workspace\\";
    }

    export interface _Visitor<Result> {
        test: (value: submission.TestSubmissionStatusV2) => Result;
        workspace: (value: submission.WorkspaceSubmissionStatusV2) => Result;
        _unknown: () => Result;
    }
}

export const SubmissionStatusV2 = {
    test: (value: submission.TestSubmissionStatusV2): SubmissionStatusV2.Test => ({
        ...value,
        _type: \\"test\\"
    }),

    workspace: (value: submission.WorkspaceSubmissionStatusV2): SubmissionStatusV2.Workspace => ({
        ...value,
        _type: \\"workspace\\"
    }),

    _visit: <Result>(value: SubmissionStatusV2, visitor: SubmissionStatusV2._Visitor<Result>): Result => {
        switch (value._type) {
            case \\"test\\": return visitor.test(value);
            case \\"workspace\\": return visitor.workspace(value);
            default: return visitor._unknown();
        }
    },

    _types: (): SubmissionStatusV2[\\"_type\\"][] => [\\"test\\", \\"workspace\\"],
} as const;
",
                "name": "SubmissionStatusV2.ts",
                "type": "file",
              },
              Object {
                "contents": "/**
 * Keep in sync with SubmissionType.
 */
export type SubmissionTypeEnum =
    | \\"TEST\\";

export const SubmissionTypeEnum = {
    Test: \\"TEST\\",

    _visit: <Result>(value: SubmissionTypeEnum, visitor: SubmissionTypeEnum._Visitor<Result>): Result => {
        switch (value) {
            case SubmissionTypeEnum.Test: return visitor.test();
            default: return visitor._unknown();
        }
    },

    _values: (): SubmissionTypeEnum[] => [SubmissionTypeEnum.Test],
} as const;

export declare namespace SubmissionTypeEnum {
    type Test = \\"TEST\\";

    export interface _Visitor<Result> {
        test: () => Result;
        _unknown: () => Result;
    }
}
",
                "name": "SubmissionTypeEnum.ts",
                "type": "file",
              },
              Object {
                "contents": "import { submission } from \\"../..\\";

export type SubmissionTypeState =
    | SubmissionTypeState.Test
    | SubmissionTypeState.Workspace;

export declare namespace SubmissionTypeState {
    interface Test extends submission.TestSubmissionState {
        _type: \\"test\\";
    }

    interface Workspace extends submission.WorkspaceSubmissionState {
        _type: \\"workspace\\";
    }

    export interface _Visitor<Result> {
        test: (value: submission.TestSubmissionState) => Result;
        workspace: (value: submission.WorkspaceSubmissionState) => Result;
        _unknown: () => Result;
    }
}

export const SubmissionTypeState = {
    test: (value: submission.TestSubmissionState): SubmissionTypeState.Test => ({
        ...value,
        _type: \\"test\\"
    }),

    workspace: (value: submission.WorkspaceSubmissionState): SubmissionTypeState.Workspace => ({
        ...value,
        _type: \\"workspace\\"
    }),

    _visit: <Result>(value: SubmissionTypeState, visitor: SubmissionTypeState._Visitor<Result>): Result => {
        switch (value._type) {
            case \\"test\\": return visitor.test(value);
            case \\"workspace\\": return visitor.workspace(value);
            default: return visitor._unknown();
        }
    },

    _types: (): SubmissionTypeState[\\"_type\\"][] => [\\"test\\", \\"workspace\\"],
} as const;
",
                "name": "SubmissionTypeState.ts",
                "type": "file",
              },
              Object {
                "contents": "import * as model from \\"../..\\";

export interface SubmitRequestV2 {
    submissionId: model.submission.SubmissionId;
    language: model.commons.Language;
    submissionFiles: model.submission.SubmissionFileInfo[];
    problemId: model.commons.ProblemId;
    problemVersion: number | null | undefined;
    userId: string | null | undefined;
}
",
                "name": "SubmitRequestV2.ts",
                "type": "file",
              },
              Object {
                "contents": "export interface TerminatedResponse {
}
",
                "name": "TerminatedResponse.ts",
                "type": "file",
              },
              Object {
                "contents": "import { submission } from \\"../..\\";

export type TestCaseGrade =
    | TestCaseGrade.Hidden
    | TestCaseGrade.NonHidden;

export declare namespace TestCaseGrade {
    interface Hidden extends submission.TestCaseHiddenGrade {
        _type: \\"hidden\\";
    }

    interface NonHidden extends submission.TestCaseNonHiddenGrade {
        _type: \\"nonHidden\\";
    }

    export interface _Visitor<Result> {
        hidden: (value: submission.TestCaseHiddenGrade) => Result;
        nonHidden: (value: submission.TestCaseNonHiddenGrade) => Result;
        _unknown: () => Result;
    }
}

export const TestCaseGrade = {
    hidden: (value: submission.TestCaseHiddenGrade): TestCaseGrade.Hidden => ({
        ...value,
        _type: \\"hidden\\"
    }),

    nonHidden: (value: submission.TestCaseNonHiddenGrade): TestCaseGrade.NonHidden => ({
        ...value,
        _type: \\"nonHidden\\"
    }),

    _visit: <Result>(value: TestCaseGrade, visitor: TestCaseGrade._Visitor<Result>): Result => {
        switch (value._type) {
            case \\"hidden\\": return visitor.hidden(value);
            case \\"nonHidden\\": return visitor.nonHidden(value);
            default: return visitor._unknown();
        }
    },

    _types: (): TestCaseGrade[\\"_type\\"][] => [\\"hidden\\", \\"nonHidden\\"],
} as const;
",
                "name": "TestCaseGrade.ts",
                "type": "file",
              },
              Object {
                "contents": "export interface TestCaseHiddenGrade {
    passed: boolean;
}
",
                "name": "TestCaseHiddenGrade.ts",
                "type": "file",
              },
              Object {
                "contents": "import * as model from \\"../..\\";

export interface TestCaseNonHiddenGrade {
    passed: boolean;
    actualResult: model.commons.VariableValue | null | undefined;
    exception: model.submission.ExceptionV2 | null | undefined;
    stdout: string;
}
",
                "name": "TestCaseNonHiddenGrade.ts",
                "type": "file",
              },
              Object {
                "contents": "import * as model from \\"../..\\";

export interface TestCaseResult {
    expectedResult: model.commons.VariableValue;
    actualResult: model.submission.ActualResult;
    passed: boolean;
}
",
                "name": "TestCaseResult.ts",
                "type": "file",
              },
              Object {
                "contents": "import * as model from \\"../..\\";

export interface TestCaseResultWithStdout {
    result: model.submission.TestCaseResult;
    stdout: string;
}
",
                "name": "TestCaseResultWithStdout.ts",
                "type": "file",
              },
              Object {
                "contents": "import * as model from \\"../..\\";

export interface TestSubmissionState {
    problemId: model.commons.ProblemId;
    defaultTestCases: model.commons.TestCase[];
    customTestCases: model.commons.TestCase[];
    status: model.submission.TestSubmissionStatus;
}
",
                "name": "TestSubmissionState.ts",
                "type": "file",
              },
              Object {
                "contents": "import { submission } from \\"../..\\";

export type TestSubmissionStatus =
    | TestSubmissionStatus.Stopped
    | TestSubmissionStatus.Errored
    | TestSubmissionStatus.Running
    | TestSubmissionStatus.TestCaseIdToState;

export declare namespace TestSubmissionStatus {
    interface Stopped {
        _type: \\"stopped\\";
    }

    interface Errored {
        _type: \\"errored\\";
        errored: submission.ErrorInfo;
    }

    interface Running {
        _type: \\"running\\";
        running: submission.RunningSubmissionState;
    }

    interface TestCaseIdToState {
        _type: \\"testCaseIdToState\\";
        testCaseIdToState: Record<string, submission.SubmissionStatusForTestCase>;
    }

    export interface _Visitor<Result> {
        stopped: () => Result;
        errored: (value: submission.ErrorInfo) => Result;
        running: (value: submission.RunningSubmissionState) => Result;
        testCaseIdToState: (value: Record<string, submission.SubmissionStatusForTestCase>) => Result;
        _unknown: () => Result;
    }
}

export const TestSubmissionStatus = {
    stopped: (): TestSubmissionStatus.Stopped => ({
        _type: \\"stopped\\"
    }),

    errored: (value: submission.ErrorInfo): TestSubmissionStatus.Errored => ({
        errored: value,
        _type: \\"errored\\"
    }),

    running: (value: submission.RunningSubmissionState): TestSubmissionStatus.Running => ({
        running: value,
        _type: \\"running\\"
    }),

    testCaseIdToState: (value: Record<string, submission.SubmissionStatusForTestCase>): TestSubmissionStatus.TestCaseIdToState => ({
        testCaseIdToState: value,
        _type: \\"testCaseIdToState\\"
    }),

    _visit: <Result>(value: TestSubmissionStatus, visitor: TestSubmissionStatus._Visitor<Result>): Result => {
        switch (value._type) {
            case \\"stopped\\": return visitor.stopped();
            case \\"errored\\": return visitor.errored(value.errored);
            case \\"running\\": return visitor.running(value.running);
            case \\"testCaseIdToState\\": return visitor.testCaseIdToState(value.testCaseIdToState);
            default: return visitor._unknown();
        }
    },

    _types: (): TestSubmissionStatus[\\"_type\\"][] => [\\"stopped\\", \\"errored\\", \\"running\\", \\"testCaseIdToState\\"],
} as const;
",
                "name": "TestSubmissionStatus.ts",
                "type": "file",
              },
              Object {
                "contents": "import * as model from \\"../..\\";

export interface TestSubmissionStatusV2 {
    updates: model.submission.TestSubmissionUpdate[];
    problemId: model.commons.ProblemId;
    problemVersion: number;
    problemInfo: model.problemV2.ProblemInfoV2;
}
",
                "name": "TestSubmissionStatusV2.ts",
                "type": "file",
              },
              Object {
                "contents": "import * as model from \\"../..\\";

export interface TestSubmissionUpdate {
    updateTime: string;
    updateInfo: model.submission.TestSubmissionUpdateInfo;
}
",
                "name": "TestSubmissionUpdate.ts",
                "type": "file",
              },
              Object {
                "contents": "import { submission } from \\"../..\\";

export type TestSubmissionUpdateInfo =
    | TestSubmissionUpdateInfo.Running
    | TestSubmissionUpdateInfo.Stopped
    | TestSubmissionUpdateInfo.Errored
    | TestSubmissionUpdateInfo.GradedTestCase
    | TestSubmissionUpdateInfo.RecordedTestCase
    | TestSubmissionUpdateInfo.Finished;

export declare namespace TestSubmissionUpdateInfo {
    interface Running {
        _type: \\"running\\";
        running: submission.RunningSubmissionState;
    }

    interface Stopped {
        _type: \\"stopped\\";
    }

    interface Errored {
        _type: \\"errored\\";
        errored: submission.ErrorInfo;
    }

    interface GradedTestCase extends submission.GradedTestCaseUpdate {
        _type: \\"gradedTestCase\\";
    }

    interface RecordedTestCase extends submission.RecordedTestCaseUpdate {
        _type: \\"recordedTestCase\\";
    }

    interface Finished {
        _type: \\"finished\\";
    }

    export interface _Visitor<Result> {
        running: (value: submission.RunningSubmissionState) => Result;
        stopped: () => Result;
        errored: (value: submission.ErrorInfo) => Result;
        gradedTestCase: (value: submission.GradedTestCaseUpdate) => Result;
        recordedTestCase: (value: submission.RecordedTestCaseUpdate) => Result;
        finished: () => Result;
        _unknown: () => Result;
    }
}

export const TestSubmissionUpdateInfo = {
    running: (value: submission.RunningSubmissionState): TestSubmissionUpdateInfo.Running => ({
        running: value,
        _type: \\"running\\"
    }),

    stopped: (): TestSubmissionUpdateInfo.Stopped => ({
        _type: \\"stopped\\"
    }),

    errored: (value: submission.ErrorInfo): TestSubmissionUpdateInfo.Errored => ({
        errored: value,
        _type: \\"errored\\"
    }),

    gradedTestCase: (value: submission.GradedTestCaseUpdate): TestSubmissionUpdateInfo.GradedTestCase => ({
        ...value,
        _type: \\"gradedTestCase\\"
    }),

    recordedTestCase: (value: submission.RecordedTestCaseUpdate): TestSubmissionUpdateInfo.RecordedTestCase => ({
        ...value,
        _type: \\"recordedTestCase\\"
    }),

    finished: (): TestSubmissionUpdateInfo.Finished => ({
        _type: \\"finished\\"
    }),

    _visit: <Result>(value: TestSubmissionUpdateInfo, visitor: TestSubmissionUpdateInfo._Visitor<Result>): Result => {
        switch (value._type) {
            case \\"running\\": return visitor.running(value.running);
            case \\"stopped\\": return visitor.stopped();
            case \\"errored\\": return visitor.errored(value.errored);
            case \\"gradedTestCase\\": return visitor.gradedTestCase(value);
            case \\"recordedTestCase\\": return visitor.recordedTestCase(value);
            case \\"finished\\": return visitor.finished();
            default: return visitor._unknown();
        }
    },

    _types: (): TestSubmissionUpdateInfo[\\"_type\\"][] => [\\"running\\", \\"stopped\\", \\"errored\\", \\"gradedTestCase\\", \\"recordedTestCase\\", \\"finished\\"],
} as const;
",
                "name": "TestSubmissionUpdateInfo.ts",
                "type": "file",
              },
              Object {
                "contents": "import * as model from \\"../..\\";

export interface TraceResponse {
    submissionId: model.submission.SubmissionId;
    lineNumber: number;
    returnValue: model.commons.DebugVariableValue | null | undefined;
    expressionLocation: model.submission.ExpressionLocation | null | undefined;
    stack: model.submission.StackInformation;
    stdout: string | null | undefined;
}
",
                "name": "TraceResponse.ts",
                "type": "file",
              },
              Object {
                "contents": "import * as model from \\"../..\\";

export interface TraceResponseV2 {
    submissionId: model.submission.SubmissionId;
    lineNumber: number;
    file: model.submission.TracedFile;
    returnValue: model.commons.DebugVariableValue | null | undefined;
    expressionLocation: model.submission.ExpressionLocation | null | undefined;
    stack: model.submission.StackInformation;
    stdout: string | null | undefined;
}
",
                "name": "TraceResponseV2.ts",
                "type": "file",
              },
              Object {
                "contents": "import * as model from \\"../..\\";

export interface TraceResponsesPage {
    /**
     * If present, use this to load subseqent pages.
     * The offset is the id of the next trace response to load.
     *
     */
    offset: number | null | undefined;
    traceResponses: model.submission.TraceResponse[];
}
",
                "name": "TraceResponsesPage.ts",
                "type": "file",
              },
              Object {
                "contents": "import * as model from \\"../..\\";

export interface TraceResponsesPageV2 {
    /**
     * If present, use this to load subseqent pages.
     * The offset is the id of the next trace response to load.
     *
     */
    offset: number | null | undefined;
    traceResponses: model.submission.TraceResponseV2[];
}
",
                "name": "TraceResponsesPageV2.ts",
                "type": "file",
              },
              Object {
                "contents": "export interface TracedFile {
    filename: string;
    directory: string;
}
",
                "name": "TracedFile.ts",
                "type": "file",
              },
              Object {
                "contents": "import * as model from \\"../..\\";

export interface TracedTestCase {
    result: model.submission.TestCaseResultWithStdout;
    traceResponsesSize: number;
}
",
                "name": "TracedTestCase.ts",
                "type": "file",
              },
              Object {
                "contents": "import * as model from \\"../..\\";

export interface UnexpectedLanguageError {
    expectedLanguage: model.commons.Language;
    actualLanguage: model.commons.Language;
}
",
                "name": "UnexpectedLanguageError.ts",
                "type": "file",
              },
              Object {
                "contents": "import * as model from \\"../..\\";

export interface WorkspaceFiles {
    mainFile: model.commons.FileInfo;
    readOnlyFiles: model.commons.FileInfo[];
}
",
                "name": "WorkspaceFiles.ts",
                "type": "file",
              },
              Object {
                "contents": "import * as model from \\"../..\\";

export interface WorkspaceRanResponse {
    submissionId: model.submission.SubmissionId;
    runDetails: model.submission.WorkspaceRunDetails;
}
",
                "name": "WorkspaceRanResponse.ts",
                "type": "file",
              },
              Object {
                "contents": "import * as model from \\"../..\\";

export interface WorkspaceRunDetails {
    exceptionV2: model.submission.ExceptionV2 | null | undefined;
    exception: model.submission.ExceptionInfo | null | undefined;
    stdout: string;
}
",
                "name": "WorkspaceRunDetails.ts",
                "type": "file",
              },
              Object {
                "contents": "import * as model from \\"../..\\";

export interface WorkspaceStarterFilesResponse {
    files: Record<model.commons.Language, model.submission.WorkspaceFiles>;
}
",
                "name": "WorkspaceStarterFilesResponse.ts",
                "type": "file",
              },
              Object {
                "contents": "import * as model from \\"../..\\";

export interface WorkspaceStarterFilesResponseV2 {
    filesByLanguage: Record<model.commons.Language, model.problemV2.Files>;
}
",
                "name": "WorkspaceStarterFilesResponseV2.ts",
                "type": "file",
              },
              Object {
                "contents": "import * as model from \\"../..\\";

export interface WorkspaceSubmissionState {
    status: model.submission.WorkspaceSubmissionStatus;
}
",
                "name": "WorkspaceSubmissionState.ts",
                "type": "file",
              },
              Object {
                "contents": "import { submission } from \\"../..\\";

export type WorkspaceSubmissionStatus =
    | WorkspaceSubmissionStatus.Stopped
    | WorkspaceSubmissionStatus.Errored
    | WorkspaceSubmissionStatus.Running
    | WorkspaceSubmissionStatus.Ran
    | WorkspaceSubmissionStatus.Traced;

export declare namespace WorkspaceSubmissionStatus {
    interface Stopped {
        _type: \\"stopped\\";
    }

    interface Errored {
        _type: \\"errored\\";
        errored: submission.ErrorInfo;
    }

    interface Running {
        _type: \\"running\\";
        running: submission.RunningSubmissionState;
    }

    interface Ran extends submission.WorkspaceRunDetails {
        _type: \\"ran\\";
    }

    interface Traced extends submission.WorkspaceRunDetails {
        _type: \\"traced\\";
    }

    export interface _Visitor<Result> {
        stopped: () => Result;
        errored: (value: submission.ErrorInfo) => Result;
        running: (value: submission.RunningSubmissionState) => Result;
        ran: (value: submission.WorkspaceRunDetails) => Result;
        traced: (value: submission.WorkspaceRunDetails) => Result;
        _unknown: () => Result;
    }
}

export const WorkspaceSubmissionStatus = {
    stopped: (): WorkspaceSubmissionStatus.Stopped => ({
        _type: \\"stopped\\"
    }),

    errored: (value: submission.ErrorInfo): WorkspaceSubmissionStatus.Errored => ({
        errored: value,
        _type: \\"errored\\"
    }),

    running: (value: submission.RunningSubmissionState): WorkspaceSubmissionStatus.Running => ({
        running: value,
        _type: \\"running\\"
    }),

    ran: (value: submission.WorkspaceRunDetails): WorkspaceSubmissionStatus.Ran => ({
        ...value,
        _type: \\"ran\\"
    }),

    traced: (value: submission.WorkspaceRunDetails): WorkspaceSubmissionStatus.Traced => ({
        ...value,
        _type: \\"traced\\"
    }),

    _visit: <Result>(value: WorkspaceSubmissionStatus, visitor: WorkspaceSubmissionStatus._Visitor<Result>): Result => {
        switch (value._type) {
            case \\"stopped\\": return visitor.stopped();
            case \\"errored\\": return visitor.errored(value.errored);
            case \\"running\\": return visitor.running(value.running);
            case \\"ran\\": return visitor.ran(value);
            case \\"traced\\": return visitor.traced(value);
            default: return visitor._unknown();
        }
    },

    _types: (): WorkspaceSubmissionStatus[\\"_type\\"][] => [\\"stopped\\", \\"errored\\", \\"running\\", \\"ran\\", \\"traced\\"],
} as const;
",
                "name": "WorkspaceSubmissionStatus.ts",
                "type": "file",
              },
              Object {
                "contents": "import * as model from \\"../..\\";

export interface WorkspaceSubmissionStatusV2 {
    updates: model.submission.WorkspaceSubmissionUpdate[];
}
",
                "name": "WorkspaceSubmissionStatusV2.ts",
                "type": "file",
              },
              Object {
                "contents": "import * as model from \\"../..\\";

export interface WorkspaceSubmissionUpdate {
    updateTime: string;
    updateInfo: model.submission.WorkspaceSubmissionUpdateInfo;
}
",
                "name": "WorkspaceSubmissionUpdate.ts",
                "type": "file",
              },
              Object {
                "contents": "import { submission } from \\"../..\\";

export type WorkspaceSubmissionUpdateInfo =
    | WorkspaceSubmissionUpdateInfo.Running
    | WorkspaceSubmissionUpdateInfo.Ran
    | WorkspaceSubmissionUpdateInfo.Stopped
    | WorkspaceSubmissionUpdateInfo.Traced
    | WorkspaceSubmissionUpdateInfo.TracedV2
    | WorkspaceSubmissionUpdateInfo.Errored
    | WorkspaceSubmissionUpdateInfo.Finished;

export declare namespace WorkspaceSubmissionUpdateInfo {
    interface Running {
        _type: \\"running\\";
        running: submission.RunningSubmissionState;
    }

    interface Ran extends submission.WorkspaceRunDetails {
        _type: \\"ran\\";
    }

    interface Stopped {
        _type: \\"stopped\\";
    }

    interface Traced {
        _type: \\"traced\\";
    }

    interface TracedV2 extends submission.WorkspaceTracedUpdate {
        _type: \\"tracedV2\\";
    }

    interface Errored {
        _type: \\"errored\\";
        errored: submission.ErrorInfo;
    }

    interface Finished {
        _type: \\"finished\\";
    }

    export interface _Visitor<Result> {
        running: (value: submission.RunningSubmissionState) => Result;
        ran: (value: submission.WorkspaceRunDetails) => Result;
        stopped: () => Result;
        traced: () => Result;
        tracedV2: (value: submission.WorkspaceTracedUpdate) => Result;
        errored: (value: submission.ErrorInfo) => Result;
        finished: () => Result;
        _unknown: () => Result;
    }
}

export const WorkspaceSubmissionUpdateInfo = {
    running: (value: submission.RunningSubmissionState): WorkspaceSubmissionUpdateInfo.Running => ({
        running: value,
        _type: \\"running\\"
    }),

    ran: (value: submission.WorkspaceRunDetails): WorkspaceSubmissionUpdateInfo.Ran => ({
        ...value,
        _type: \\"ran\\"
    }),

    stopped: (): WorkspaceSubmissionUpdateInfo.Stopped => ({
        _type: \\"stopped\\"
    }),

    traced: (): WorkspaceSubmissionUpdateInfo.Traced => ({
        _type: \\"traced\\"
    }),

    tracedV2: (value: submission.WorkspaceTracedUpdate): WorkspaceSubmissionUpdateInfo.TracedV2 => ({
        ...value,
        _type: \\"tracedV2\\"
    }),

    errored: (value: submission.ErrorInfo): WorkspaceSubmissionUpdateInfo.Errored => ({
        errored: value,
        _type: \\"errored\\"
    }),

    finished: (): WorkspaceSubmissionUpdateInfo.Finished => ({
        _type: \\"finished\\"
    }),

    _visit: <Result>(value: WorkspaceSubmissionUpdateInfo, visitor: WorkspaceSubmissionUpdateInfo._Visitor<Result>): Result => {
        switch (value._type) {
            case \\"running\\": return visitor.running(value.running);
            case \\"ran\\": return visitor.ran(value);
            case \\"stopped\\": return visitor.stopped();
            case \\"traced\\": return visitor.traced();
            case \\"tracedV2\\": return visitor.tracedV2(value);
            case \\"errored\\": return visitor.errored(value.errored);
            case \\"finished\\": return visitor.finished();
            default: return visitor._unknown();
        }
    },

    _types: (): WorkspaceSubmissionUpdateInfo[\\"_type\\"][] => [\\"running\\", \\"ran\\", \\"stopped\\", \\"traced\\", \\"tracedV2\\", \\"errored\\", \\"finished\\"],
} as const;
",
                "name": "WorkspaceSubmissionUpdateInfo.ts",
                "type": "file",
              },
              Object {
                "contents": "import * as model from \\"../..\\";

export interface WorkspaceSubmitRequest {
    submissionId: model.submission.SubmissionId;
    language: model.commons.Language;
    submissionFiles: model.submission.SubmissionFileInfo[];
    userId: string | null | undefined;
}
",
                "name": "WorkspaceSubmitRequest.ts",
                "type": "file",
              },
              Object {
                "contents": "export interface WorkspaceTracedUpdate {
    traceResponsesSize: number;
}
",
                "name": "WorkspaceTracedUpdate.ts",
                "type": "file",
              },
              Object {
                "contents": "export * from \\"./SubmissionId\\";
export * from \\"./ShareId\\";
export * from \\"./SubmissionRequest\\";
export * from \\"./InitializeProblemRequest\\";
export * from \\"./SubmitRequestV2\\";
export * from \\"./WorkspaceSubmitRequest\\";
export * from \\"./SubmissionFileInfo\\";
export * from \\"./SubmissionTypeEnum\\";
export * from \\"./StopRequest\\";
export * from \\"./SubmissionResponse\\";
export * from \\"./CodeExecutionUpdate\\";
export * from \\"./BuildingExecutorResponse\\";
export * from \\"./RunningResponse\\";
export * from \\"./RunningSubmissionState\\";
export * from \\"./ErroredResponse\\";
export * from \\"./ErrorInfo\\";
export * from \\"./CompileError\\";
export * from \\"./RuntimeError\\";
export * from \\"./InternalError\\";
export * from \\"./StoppedResponse\\";
export * from \\"./WorkspaceRanResponse\\";
export * from \\"./WorkspaceRunDetails\\";
export * from \\"./GradedResponse\\";
export * from \\"./GradedResponseV2\\";
export * from \\"./TestCaseGrade\\";
export * from \\"./TestCaseHiddenGrade\\";
export * from \\"./TestCaseNonHiddenGrade\\";
export * from \\"./RecordedResponseNotification\\";
export * from \\"./RecordingResponseNotification\\";
export * from \\"./LightweightStackframeInformation\\";
export * from \\"./TestCaseResultWithStdout\\";
export * from \\"./TestCaseResult\\";
export * from \\"./ActualResult\\";
export * from \\"./ExceptionV2\\";
export * from \\"./ExceptionInfo\\";
export * from \\"./InvalidRequestResponse\\";
export * from \\"./InvalidRequestCause\\";
export * from \\"./ExistingSubmissionExecuting\\";
export * from \\"./SubmissionIdNotFound\\";
export * from \\"./CustomTestCasesUnsupported\\";
export * from \\"./UnexpectedLanguageError\\";
export * from \\"./TerminatedResponse\\";
export * from \\"./FinishedResponse\\";
export * from \\"./StdoutResponse\\";
export * from \\"./StderrResponse\\";
export * from \\"./TraceResponse\\";
export * from \\"./TraceResponseV2\\";
export * from \\"./TracedFile\\";
export * from \\"./ExpressionLocation\\";
export * from \\"./StackInformation\\";
export * from \\"./StackFrame\\";
export * from \\"./Scope\\";
export * from \\"./ExecutionSessionResponse\\";
export * from \\"./ExecutionSessionStatus\\";
export * from \\"./SubmissionStatusV2\\";
export * from \\"./TestSubmissionStatusV2\\";
export * from \\"./WorkspaceSubmissionStatusV2\\";
export * from \\"./TestSubmissionUpdate\\";
export * from \\"./TestSubmissionUpdateInfo\\";
export * from \\"./WorkspaceSubmissionUpdate\\";
export * from \\"./WorkspaceSubmissionUpdateInfo\\";
export * from \\"./GradedTestCaseUpdate\\";
export * from \\"./RecordedTestCaseUpdate\\";
export * from \\"./WorkspaceTracedUpdate\\";
export * from \\"./SubmissionTypeState\\";
export * from \\"./WorkspaceSubmissionState\\";
export * from \\"./WorkspaceSubmissionStatus\\";
export * from \\"./TestSubmissionState\\";
export * from \\"./TestSubmissionStatus\\";
export * from \\"./SubmissionStatusForTestCase\\";
export * from \\"./TracedTestCase\\";
export * from \\"./TraceResponsesPage\\";
export * from \\"./TraceResponsesPageV2\\";
export * from \\"./GetTraceResponsesPageRequest\\";
export * from \\"./WorkspaceStarterFilesResponse\\";
export * from \\"./WorkspaceStarterFilesResponseV2\\";
export * from \\"./WorkspaceFiles\\";
export * from \\"./ExecutionSessionState\\";
",
                "name": "index.ts",
                "type": "file",
              },
            ],
            "name": "types",
            "type": "directory",
          },
        ],
        "name": "submission",
        "type": "directory",
      },
      Object {
        "contents": Array [
          Object {
            "contents": "export * from \\"./service-types\\";
",
            "name": "index.ts",
            "type": "file",
          },
          Object {
            "contents": Array [
              Object {
                "contents": Array [
                  Object {
                    "contents": "export type GetNumWarmInstancesErrorBody = never;

export declare namespace GetNumWarmInstancesErrorBody {
    export interface _Visitor<Result> {
        _unknown: () => Result;
    }
}

export const GetNumWarmInstancesErrorBody = {
    _visit: <Result>(_value: GetNumWarmInstancesErrorBody, visitor: GetNumWarmInstancesErrorBody._Visitor<Result>): Result => {
        return visitor._unknown();
    },

    _types: (): GetNumWarmInstancesErrorBody[\\"_error\\"][] => [],
} as const;
",
                    "name": "GetNumWarmInstancesErrorBody.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../../..\\";

export type GetNumWarmInstancesResponse = GetNumWarmInstancesResponse.SuccessResponse | GetNumWarmInstancesResponse.ErrorResponse;

namespace GetNumWarmInstancesResponse {
    export interface SuccessResponse {
        ok: true;
        body: Record<model.commons.Language, number>;
    }

    export interface ErrorResponse {
        ok: false;
        error: model.sysprop.GetNumWarmInstancesErrorBody;
    }
}
",
                    "name": "GetNumWarmInstancesResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export type SetNumWarmInstancesErrorBody = never;

export declare namespace SetNumWarmInstancesErrorBody {
    export interface _Visitor<Result> {
        _unknown: () => Result;
    }
}

export const SetNumWarmInstancesErrorBody = {
    _visit: <Result>(_value: SetNumWarmInstancesErrorBody, visitor: SetNumWarmInstancesErrorBody._Visitor<Result>): Result => {
        return visitor._unknown();
    },

    _types: (): SetNumWarmInstancesErrorBody[\\"_error\\"][] => [],
} as const;
",
                    "name": "SetNumWarmInstancesErrorBody.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../../..\\";

export interface SetNumWarmInstancesRequest {
    language: model.commons.Language;
    numWarmInstances: number;
}
",
                    "name": "SetNumWarmInstancesRequest.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../../..\\";

export type SetNumWarmInstancesResponse = SetNumWarmInstancesResponse.SuccessResponse | SetNumWarmInstancesResponse.ErrorResponse;

namespace SetNumWarmInstancesResponse {
    export interface SuccessResponse {
        ok: true;
    }

    export interface ErrorResponse {
        ok: false;
        error: model.sysprop.SetNumWarmInstancesErrorBody;
    }
}
",
                    "name": "SetNumWarmInstancesResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export * from \\"./SetNumWarmInstancesRequest\\";
export * from \\"./SetNumWarmInstancesErrorBody\\";
export * from \\"./SetNumWarmInstancesResponse\\";
export * from \\"./GetNumWarmInstancesErrorBody\\";
export * from \\"./GetNumWarmInstancesResponse\\";
",
                    "name": "index.ts",
                    "type": "file",
                  },
                ],
                "name": "SysPropCrudService",
                "type": "directory",
              },
              Object {
                "contents": "export * from \\"./SysPropCrudService\\";
",
                "name": "index.ts",
                "type": "file",
              },
            ],
            "name": "service-types",
            "type": "directory",
          },
        ],
        "name": "sysprop",
        "type": "directory",
      },
    ],
    "name": "model",
    "type": "directory",
  },
  Object {
    "contents": Array [
      Object {
        "contents": Array [
          Object {
            "contents": "import { isResponseOk, defaultFetcher, Service, Token, Fetcher } from \\"@fern-typescript/service-utils\\";
import path from \\"path\\";
import * as model from \\"../../model\\";

export interface AdminService {
    updateTestSubmissionStatus(request: model.admin.UpdateTestSubmissionStatusRequest): Promise<model.admin.UpdateTestSubmissionStatusResponse>;
    sendTestSubmissionUpdate(request: model.admin.SendTestSubmissionUpdateRequest): Promise<model.admin.SendTestSubmissionUpdateResponse>;
    updateWorkspaceSubmissionStatus(request: model.admin.UpdateWorkspaceSubmissionStatusRequest): Promise<model.admin.UpdateWorkspaceSubmissionStatusResponse>;
    sendWorkspaceSubmissionUpdate(request: model.admin.SendWorkspaceSubmissionUpdateRequest): Promise<model.admin.SendWorkspaceSubmissionUpdateResponse>;
    storeTracedTestCase(request: model.admin.StoreTracedTestCaseRequest): Promise<model.admin.StoreTracedTestCaseResponse>;
    storeTracedTestCaseV2(request: model.admin.StoreTracedTestCaseV2Request): Promise<model.admin.StoreTracedTestCaseV2Response>;
    storeTracedWorkspace(request: model.admin.StoreTracedWorkspaceRequest): Promise<model.admin.StoreTracedWorkspaceResponse>;
    storeTracedWorkspaceV2(request: model.admin.StoreTracedWorkspaceV2Request): Promise<model.admin.StoreTracedWorkspaceV2Response>;
}

export class AdminService implements AdminService {
    private baseUrl: string;
    private fetcher: Fetcher;
    private token: Token | undefined;

    constructor(args: Service.Init) {
        this.fetcher = args.fetcher ?? defaultFetcher;
        this.baseUrl = path.join(args.origin, \\"/admin\\");
        this.token = args.token;
    }

    public async updateTestSubmissionStatus(request: model.admin.UpdateTestSubmissionStatusRequest): Promise<model.admin.UpdateTestSubmissionStatusResponse> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \`/store-test-submission-status/\${request.submissionId}\`),
            method: \\"POST\\",
            headers: {},
            token: this.token,
            body: {
                content: JSON.stringify(request.body),
                contentType: \\"application/json\\"
            }
        });

        if (isResponseOk(encodedResponse)) {
            return {
                ok: true
            };
        }
        else {
            const error = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: false,
                error: error as model.admin.UpdateTestSubmissionStatusErrorBody
            };
        }
    }

    public async sendTestSubmissionUpdate(request: model.admin.SendTestSubmissionUpdateRequest): Promise<model.admin.SendTestSubmissionUpdateResponse> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \`/store-test-submission-status-v2/\${request.submissionId}\`),
            method: \\"POST\\",
            headers: {},
            token: this.token,
            body: {
                content: JSON.stringify(request.body),
                contentType: \\"application/json\\"
            }
        });

        if (isResponseOk(encodedResponse)) {
            return {
                ok: true
            };
        }
        else {
            const error = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: false,
                error: error as model.admin.SendTestSubmissionUpdateErrorBody
            };
        }
    }

    public async updateWorkspaceSubmissionStatus(request: model.admin.UpdateWorkspaceSubmissionStatusRequest): Promise<model.admin.UpdateWorkspaceSubmissionStatusResponse> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \`/store-workspace-submission-status/\${request.submissionId}\`),
            method: \\"POST\\",
            headers: {},
            token: this.token,
            body: {
                content: JSON.stringify(request.body),
                contentType: \\"application/json\\"
            }
        });

        if (isResponseOk(encodedResponse)) {
            return {
                ok: true
            };
        }
        else {
            const error = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: false,
                error: error as model.admin.UpdateWorkspaceSubmissionStatusErrorBody
            };
        }
    }

    public async sendWorkspaceSubmissionUpdate(request: model.admin.SendWorkspaceSubmissionUpdateRequest): Promise<model.admin.SendWorkspaceSubmissionUpdateResponse> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \`/store-workspace-submission-status-v2/\${request.submissionId}\`),
            method: \\"POST\\",
            headers: {},
            token: this.token,
            body: {
                content: JSON.stringify(request.body),
                contentType: \\"application/json\\"
            }
        });

        if (isResponseOk(encodedResponse)) {
            return {
                ok: true
            };
        }
        else {
            const error = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: false,
                error: error as model.admin.SendWorkspaceSubmissionUpdateErrorBody
            };
        }
    }

    public async storeTracedTestCase(request: model.admin.StoreTracedTestCaseRequest): Promise<model.admin.StoreTracedTestCaseResponse> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \`/store-test-trace/submission/\${request.submissionId}/testCase/\${request.testCaseId}\`),
            method: \\"POST\\",
            headers: {},
            token: this.token,
            body: {
                content: JSON.stringify(request.body),
                contentType: \\"application/json\\"
            }
        });

        if (isResponseOk(encodedResponse)) {
            return {
                ok: true
            };
        }
        else {
            const error = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: false,
                error: error as model.admin.StoreTracedTestCaseErrorBody
            };
        }
    }

    public async storeTracedTestCaseV2(request: model.admin.StoreTracedTestCaseV2Request): Promise<model.admin.StoreTracedTestCaseV2Response> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \`/store-test-trace-v2/submission/\${request.submissionId}/testCase/\${request.testCaseId}\`),
            method: \\"POST\\",
            headers: {},
            token: this.token,
            body: {
                content: JSON.stringify(request.body),
                contentType: \\"application/json\\"
            }
        });

        if (isResponseOk(encodedResponse)) {
            return {
                ok: true
            };
        }
        else {
            const error = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: false,
                error: error as model.admin.StoreTracedTestCaseV2ErrorBody
            };
        }
    }

    public async storeTracedWorkspace(request: model.admin.StoreTracedWorkspaceRequest): Promise<model.admin.StoreTracedWorkspaceResponse> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \`/store-workspace-trace/submission/\${request.submissionId}\`),
            method: \\"POST\\",
            headers: {},
            token: this.token,
            body: {
                content: JSON.stringify(request.body),
                contentType: \\"application/json\\"
            }
        });

        if (isResponseOk(encodedResponse)) {
            return {
                ok: true
            };
        }
        else {
            const error = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: false,
                error: error as model.admin.StoreTracedWorkspaceErrorBody
            };
        }
    }

    public async storeTracedWorkspaceV2(request: model.admin.StoreTracedWorkspaceV2Request): Promise<model.admin.StoreTracedWorkspaceV2Response> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \`/store-workspace-trace-v2/submission/\${request.submissionId}\`),
            method: \\"POST\\",
            headers: {},
            token: this.token,
            body: {
                content: JSON.stringify(request.body),
                contentType: \\"application/json\\"
            }
        });

        if (isResponseOk(encodedResponse)) {
            return {
                ok: true
            };
        }
        else {
            const error = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: false,
                error: error as model.admin.StoreTracedWorkspaceV2ErrorBody
            };
        }
    }
}
",
            "name": "AdminService.ts",
            "type": "file",
          },
          Object {
            "contents": "export * from \\"./AdminService\\";
",
            "name": "index.ts",
            "type": "file",
          },
        ],
        "name": "admin",
        "type": "directory",
      },
      Object {
        "contents": Array [
          Object {
            "contents": "import { isResponseOk, defaultFetcher, Service, Token, Fetcher } from \\"@fern-typescript/service-utils\\";
import path from \\"path\\";
import * as model from \\"../../model\\";

export interface HomepageProblemService {
    getHomepageProblems(): Promise<model.homepage.GetHomepageProblemsResponse>;
    setHomepageProblems(request: model.commons.ProblemId[]): Promise<model.homepage.SetHomepageProblemsResponse>;
}

export class HomepageProblemService implements HomepageProblemService {
    private baseUrl: string;
    private fetcher: Fetcher;
    private token: Token | undefined;

    constructor(args: Service.Init) {
        this.fetcher = args.fetcher ?? defaultFetcher;
        this.baseUrl = path.join(args.origin, \\"/homepage-problems\\");
        this.token = args.token;
    }

    public async getHomepageProblems(): Promise<model.homepage.GetHomepageProblemsResponse> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \\"/\\"),
            method: \\"GET\\",
            headers: {},
            token: this.token
        });

        if (isResponseOk(encodedResponse)) {
            const response = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: true,
                body: response as model.commons.ProblemId[]
            };
        }
        else {
            const error = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: false,
                error: error as model.homepage.GetHomepageProblemsErrorBody
            };
        }
    }

    public async setHomepageProblems(request: model.commons.ProblemId[]): Promise<model.homepage.SetHomepageProblemsResponse> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \\"/\\"),
            method: \\"POST\\",
            headers: {},
            token: this.token,
            body: {
                content: JSON.stringify(request),
                contentType: \\"application/json\\"
            }
        });

        if (isResponseOk(encodedResponse)) {
            return {
                ok: true
            };
        }
        else {
            const error = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: false,
                error: error as model.homepage.SetHomepageProblemsErrorBody
            };
        }
    }
}
",
            "name": "HomepageProblemService.ts",
            "type": "file",
          },
          Object {
            "contents": "export * from \\"./HomepageProblemService\\";
",
            "name": "index.ts",
            "type": "file",
          },
        ],
        "name": "homepage",
        "type": "directory",
      },
      Object {
        "contents": "export * as admin from \\"./admin\\";
export * as homepage from \\"./homepage\\";
export * as migration from \\"./migration\\";
export * as playlist from \\"./playlist\\";
export * as problem from \\"./problem\\";
export * as problemV2 from \\"./problemV2\\";
export * as submission from \\"./submission\\";
export * as sysprop from \\"./sysprop\\";
",
        "name": "index.ts",
        "type": "file",
      },
      Object {
        "contents": Array [
          Object {
            "contents": "import { isResponseOk, defaultFetcher, Service, Token, Fetcher } from \\"@fern-typescript/service-utils\\";
import path from \\"path\\";
import * as model from \\"../../model\\";

export interface MigrationInfoService {
    getAttemptedMigrations(): Promise<model.migration.GetAttemptedMigrationsResponse>;
}

export class MigrationInfoService implements MigrationInfoService {
    private baseUrl: string;
    private fetcher: Fetcher;
    private token: Token | undefined;

    constructor(args: Service.Init) {
        this.fetcher = args.fetcher ?? defaultFetcher;
        this.baseUrl = path.join(args.origin, \\"/migration-info\\");
        this.token = args.token;
    }

    public async getAttemptedMigrations(): Promise<model.migration.GetAttemptedMigrationsResponse> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \\"/all\\"),
            method: \\"GET\\",
            headers: {},
            token: this.token
        });

        if (isResponseOk(encodedResponse)) {
            const response = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: true,
                body: response as model.migration.Migration[]
            };
        }
        else {
            const error = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: false,
                error: error as model.migration.GetAttemptedMigrationsErrorBody
            };
        }
    }
}
",
            "name": "MigrationInfoService.ts",
            "type": "file",
          },
          Object {
            "contents": "export * from \\"./MigrationInfoService\\";
",
            "name": "index.ts",
            "type": "file",
          },
        ],
        "name": "migration",
        "type": "directory",
      },
      Object {
        "contents": Array [
          Object {
            "contents": "import { isResponseOk, defaultFetcher, Service, Token, Fetcher } from \\"@fern-typescript/service-utils\\";
import path from \\"path\\";
import * as model from \\"../../model\\";

export interface PlaylistCrudService {
    createPlaylist(request: model.playlist.CreatePlaylistRequest): Promise<model.playlist.CreatePlaylistResponse>;
    getPlaylists(): Promise<model.playlist.GetPlaylistsResponse>;
    getPlaylist(request: model.playlist.GetPlaylistRequest): Promise<model.playlist.GetPlaylistResponse>;
    updatePlaylist(request: model.playlist.UpdatePlaylistRequest): Promise<model.playlist.UpdatePlaylistResponse>;
    deletePlaylist(request: model.playlist.DeletePlaylistRequest): Promise<model.playlist.DeletePlaylistResponse>;
}

export class PlaylistCrudService implements PlaylistCrudService {
    private baseUrl: string;
    private fetcher: Fetcher;
    private token: Token | undefined;

    constructor(args: Service.Init) {
        this.fetcher = args.fetcher ?? defaultFetcher;
        this.baseUrl = path.join(args.origin, \\"/v2/playlist\\");
        this.token = args.token;
    }

    public async createPlaylist(request: model.playlist.CreatePlaylistRequest): Promise<model.playlist.CreatePlaylistResponse> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \\"/create\\"),
            method: \\"POST\\",
            headers: {},
            token: this.token,
            body: {
                content: JSON.stringify(request),
                contentType: \\"application/json\\"
            }
        });

        if (isResponseOk(encodedResponse)) {
            const response = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: true,
                body: response as model.playlist.Playlist
            };
        }
        else {
            const error = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: false,
                error: error as model.playlist.CreatePlaylistErrorBody
            };
        }
    }

    public async getPlaylists(): Promise<model.playlist.GetPlaylistsResponse> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \\"/all\\"),
            method: \\"GET\\",
            headers: {},
            token: this.token
        });

        if (isResponseOk(encodedResponse)) {
            const response = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: true,
                body: response as model.playlist.Playlist[]
            };
        }
        else {
            const error = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: false,
                error: error as model.playlist.GetPlaylistsErrorBody
            };
        }
    }

    public async getPlaylist(request: model.playlist.GetPlaylistRequest): Promise<model.playlist.GetPlaylistResponse> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \`/\${request.playlistId}\`),
            method: \\"GET\\",
            headers: {},
            token: this.token
        });

        if (isResponseOk(encodedResponse)) {
            const response = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: true,
                body: response as model.playlist.Playlist
            };
        }
        else {
            const error = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: false,
                error: error as model.playlist.GetPlaylistErrorBody
            };
        }
    }

    public async updatePlaylist(request: model.playlist.UpdatePlaylistRequest): Promise<model.playlist.UpdatePlaylistResponse> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \`/\${request.playlistId}\`),
            method: \\"PUT\\",
            headers: {},
            token: this.token,
            body: {
                content: JSON.stringify(request.body),
                contentType: \\"application/json\\"
            }
        });

        if (isResponseOk(encodedResponse)) {
            const response = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: true,
                body: response as model.playlist.Playlist
            };
        }
        else {
            const error = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: false,
                error: error as model.playlist.UpdatePlaylistErrorBody
            };
        }
    }

    public async deletePlaylist(request: model.playlist.DeletePlaylistRequest): Promise<model.playlist.DeletePlaylistResponse> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \`/\${request.playlistId}\`),
            method: \\"DELETE\\",
            headers: {},
            token: this.token
        });

        if (isResponseOk(encodedResponse)) {
            return {
                ok: true
            };
        }
        else {
            const error = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: false,
                error: error as model.playlist.DeletePlaylistErrorBody
            };
        }
    }
}
",
            "name": "PlaylistCrudService.ts",
            "type": "file",
          },
          Object {
            "contents": "export * from \\"./PlaylistCrudService\\";
",
            "name": "index.ts",
            "type": "file",
          },
        ],
        "name": "playlist",
        "type": "directory",
      },
      Object {
        "contents": Array [
          Object {
            "contents": "import { isResponseOk, defaultFetcher, Service, Token, Fetcher } from \\"@fern-typescript/service-utils\\";
import path from \\"path\\";
import * as model from \\"../../model\\";

export interface ProblemCrudService {
    createProblem(request: model.problem.CreateProblemRequest): Promise<model.problem._CreateProblemResponse>;
    updateProblem(request: model.problem.UpdateProblemRequest): Promise<model.problem._UpdateProblemResponse>;
    deleteProblem(request: model.problem.DeleteProblemRequest): Promise<model.problem.DeleteProblemResponse>;
    getDefaultStarterFiles(request: model.problem.GetDefaultStarterFilesRequest): Promise<model.problem.GetDefaultStarterFilesResponse>;
}

export class ProblemCrudService implements ProblemCrudService {
    private baseUrl: string;
    private fetcher: Fetcher;
    private token: Token | undefined;

    constructor(args: Service.Init) {
        this.fetcher = args.fetcher ?? defaultFetcher;
        this.baseUrl = path.join(args.origin, \\"/problem-crud\\");
        this.token = args.token;
    }

    public async createProblem(request: model.problem.CreateProblemRequest): Promise<model.problem._CreateProblemResponse> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \\"/create\\"),
            method: \\"POST\\",
            headers: {},
            token: this.token,
            body: {
                content: JSON.stringify(request),
                contentType: \\"application/json\\"
            }
        });

        if (isResponseOk(encodedResponse)) {
            const response = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: true,
                body: response as model.problem.CreateProblemResponse
            };
        }
        else {
            const error = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: false,
                error: error as model.problem.CreateProblemErrorBody
            };
        }
    }

    public async updateProblem(request: model.problem.UpdateProblemRequest): Promise<model.problem._UpdateProblemResponse> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \`/update/\${request.problemId}\`),
            method: \\"POST\\",
            headers: {},
            token: this.token,
            body: {
                content: JSON.stringify(request.body),
                contentType: \\"application/json\\"
            }
        });

        if (isResponseOk(encodedResponse)) {
            const response = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: true,
                body: response as model.problem.UpdateProblemResponse
            };
        }
        else {
            const error = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: false,
                error: error as model.problem.UpdateProblemErrorBody
            };
        }
    }

    public async deleteProblem(request: model.problem.DeleteProblemRequest): Promise<model.problem.DeleteProblemResponse> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \`/delete/\${request.problemId}\`),
            method: \\"DELETE\\",
            headers: {},
            token: this.token
        });

        if (isResponseOk(encodedResponse)) {
            return {
                ok: true
            };
        }
        else {
            const error = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: false,
                error: error as model.problem.DeleteProblemErrorBody
            };
        }
    }

    public async getDefaultStarterFiles(request: model.problem.GetDefaultStarterFilesRequest): Promise<model.problem.GetDefaultStarterFilesResponse> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \\"/default-starter-files\\"),
            method: \\"POST\\",
            headers: {},
            token: this.token,
            body: {
                content: JSON.stringify(request),
                contentType: \\"application/json\\"
            }
        });

        if (isResponseOk(encodedResponse)) {
            const response = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: true,
                body: response as model.problem.GetDefaultStarterFilesResponseBody
            };
        }
        else {
            const error = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: false,
                error: error as model.problem.GetDefaultStarterFilesErrorBody
            };
        }
    }
}
",
            "name": "ProblemCrudService.ts",
            "type": "file",
          },
          Object {
            "contents": "import { isResponseOk, defaultFetcher, Service, Token, Fetcher } from \\"@fern-typescript/service-utils\\";
import path from \\"path\\";
import * as model from \\"../../model\\";

export interface ProblemInfoService {
    getProblems(): Promise<model.problem.GetProblemsResponse>;
    getLatestProblem(request: model.problem.GetLatestProblemRequest): Promise<model.problem.GetLatestProblemResponse>;
    getProblemVersion(request: model.problem.GetProblemVersionRequest): Promise<model.problem.GetProblemVersionResponse>;
    getExpectedResult(request: model.problem.GetExpectedResultRequest): Promise<model.problem.GetExpectedResultResponse>;
}

/**
 * Information about different problems
 */
export class ProblemInfoService implements ProblemInfoService {
    private baseUrl: string;
    private fetcher: Fetcher;
    private token: Token | undefined;

    constructor(args: Service.Init) {
        this.fetcher = args.fetcher ?? defaultFetcher;
        this.baseUrl = path.join(args.origin, \\"/problems\\");
        this.token = args.token;
    }

    public async getProblems(): Promise<model.problem.GetProblemsResponse> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \\"/problem-info\\"),
            method: \\"GET\\",
            headers: {},
            token: this.token
        });

        if (isResponseOk(encodedResponse)) {
            const response = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: true,
                body: response as model.problem.ProblemInfo[]
            };
        }
        else {
            const error = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: false,
                error: error as model.problem.GetProblemsErrorBody
            };
        }
    }

    public async getLatestProblem(request: model.problem.GetLatestProblemRequest): Promise<model.problem.GetLatestProblemResponse> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \`/problem-info/\${request.problemId}\`),
            method: \\"GET\\",
            headers: {},
            token: this.token
        });

        if (isResponseOk(encodedResponse)) {
            const response = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: true,
                body: response as model.problem.ProblemInfo
            };
        }
        else {
            const error = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: false,
                error: error as model.problem.GetLatestProblemErrorBody
            };
        }
    }

    public async getProblemVersion(request: model.problem.GetProblemVersionRequest): Promise<model.problem.GetProblemVersionResponse> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \`/problem-info/\${request.problemId}/version/\${request.problemVersion}\`),
            method: \\"GET\\",
            headers: {},
            token: this.token
        });

        if (isResponseOk(encodedResponse)) {
            const response = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: true,
                body: response as model.problem.ProblemInfo
            };
        }
        else {
            const error = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: false,
                error: error as model.problem.GetProblemVersionErrorBody
            };
        }
    }

    public async getExpectedResult(request: model.problem.GetExpectedResultRequest): Promise<model.problem.GetExpectedResultResponse> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \`/expected-result/\${request.problemId}\`),
            method: \\"POST\\",
            headers: {},
            token: this.token
        });

        if (isResponseOk(encodedResponse)) {
            const response = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: true,
                body: response as model.commons.TestCaseWithExpectedResult
            };
        }
        else {
            const error = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: false,
                error: error as model.problem.GetExpectedResultErrorBody
            };
        }
    }
}
",
            "name": "ProblemInfoService.ts",
            "type": "file",
          },
          Object {
            "contents": "export * from \\"./ProblemInfoService\\";
export * from \\"./ProblemCrudService\\";
",
            "name": "index.ts",
            "type": "file",
          },
        ],
        "name": "problem",
        "type": "directory",
      },
      Object {
        "contents": Array [
          Object {
            "contents": "import { isResponseOk, defaultFetcher, Service, Token, Fetcher } from \\"@fern-typescript/service-utils\\";
import path from \\"path\\";
import * as model from \\"../../model\\";

export interface ProblemCrudServiceV2 {
    createProblem(request: model.problemV2.CreateProblemRequestV2): Promise<model.problemV2.CreateProblemResponse>;
    updateProblem(request: model.problemV2.UpdateProblemRequest): Promise<model.problemV2.UpdateProblemResponse>;
    deleteProblem(request: model.problemV2.DeleteProblemRequest): Promise<model.problemV2.DeleteProblemResponse>;
    getFunctionSignature(request: model.problemV2.GetFunctionSignatureRequest): Promise<model.problemV2.GetFunctionSignatureResponse>;
    getBasicSolutionFile(request: model.problemV2.GetBasicSolutionFileRequest): Promise<model.problemV2.GetBasicSolutionFileResponse>;
    getDefaultDirectoryForProblemFiles(): Promise<model.problemV2.GetDefaultDirectoryForProblemFilesResponse>;
    getGeneratedTestCaseFile(request: model.problemV2.GetGeneratedTestCaseFileRequest): Promise<model.problemV2.GetGeneratedTestCaseFileResponse>;
    getGeneratedTestCaseTemplateFile(request: model.problemV2.GetGeneratedTestCaseTemplateFileRequest): Promise<model.problemV2.GetGeneratedTestCaseTemplateFileResponse>;
}

export class ProblemCrudServiceV2 implements ProblemCrudServiceV2 {
    private baseUrl: string;
    private fetcher: Fetcher;
    private token: Token | undefined;

    constructor(args: Service.Init) {
        this.fetcher = args.fetcher ?? defaultFetcher;
        this.baseUrl = path.join(args.origin, \\"/problem-crud-v2\\");
        this.token = args.token;
    }

    public async createProblem(request: model.problemV2.CreateProblemRequestV2): Promise<model.problemV2.CreateProblemResponse> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \\"/create\\"),
            method: \\"POST\\",
            headers: {},
            token: this.token,
            body: {
                content: JSON.stringify(request),
                contentType: \\"application/json\\"
            }
        });

        if (isResponseOk(encodedResponse)) {
            const response = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: true,
                body: response as model.problem.CreateProblemResponse
            };
        }
        else {
            const error = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: false,
                error: error as model.problemV2.CreateProblemErrorBody
            };
        }
    }

    public async updateProblem(request: model.problemV2.UpdateProblemRequest): Promise<model.problemV2.UpdateProblemResponse> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \`/update/\${request.problemId}\`),
            method: \\"POST\\",
            headers: {},
            token: this.token,
            body: {
                content: JSON.stringify(request.body),
                contentType: \\"application/json\\"
            }
        });

        if (isResponseOk(encodedResponse)) {
            const response = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: true,
                body: response as model.problem.UpdateProblemResponse
            };
        }
        else {
            const error = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: false,
                error: error as model.problemV2.UpdateProblemErrorBody
            };
        }
    }

    public async deleteProblem(request: model.problemV2.DeleteProblemRequest): Promise<model.problemV2.DeleteProblemResponse> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \`/delete/\${request.problemId}\`),
            method: \\"DELETE\\",
            headers: {},
            token: this.token
        });

        if (isResponseOk(encodedResponse)) {
            return {
                ok: true
            };
        }
        else {
            const error = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: false,
                error: error as model.problemV2.DeleteProblemErrorBody
            };
        }
    }

    public async getFunctionSignature(request: model.problemV2.GetFunctionSignatureRequest): Promise<model.problemV2.GetFunctionSignatureResponse> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \\"/function-signature\\"),
            method: \\"POST\\",
            headers: {},
            token: this.token,
            body: {
                content: JSON.stringify(request),
                contentType: \\"application/json\\"
            }
        });

        if (isResponseOk(encodedResponse)) {
            const response = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: true,
                body: response as model.problemV2.GetFunctionSignatureResponseBody
            };
        }
        else {
            const error = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: false,
                error: error as model.problemV2.GetFunctionSignatureErrorBody
            };
        }
    }

    public async getBasicSolutionFile(request: model.problemV2.GetBasicSolutionFileRequest): Promise<model.problemV2.GetBasicSolutionFileResponse> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \\"/basic-solution-file\\"),
            method: \\"POST\\",
            headers: {},
            token: this.token,
            body: {
                content: JSON.stringify(request),
                contentType: \\"application/json\\"
            }
        });

        if (isResponseOk(encodedResponse)) {
            const response = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: true,
                body: response as model.problemV2.GetBasicSolutionFileResponseBody
            };
        }
        else {
            const error = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: false,
                error: error as model.problemV2.GetBasicSolutionFileErrorBody
            };
        }
    }

    public async getDefaultDirectoryForProblemFiles(): Promise<model.problemV2.GetDefaultDirectoryForProblemFilesResponse> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \\"/default-problem-files-directory\\"),
            method: \\"GET\\",
            headers: {},
            token: this.token
        });

        if (isResponseOk(encodedResponse)) {
            const response = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: true,
                body: response as Record<model.commons.Language, string>
            };
        }
        else {
            const error = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: false,
                error: error as model.problemV2.GetDefaultDirectoryForProblemFilesErrorBody
            };
        }
    }

    public async getGeneratedTestCaseFile(request: model.problemV2.GetGeneratedTestCaseFileRequest): Promise<model.problemV2.GetGeneratedTestCaseFileResponse> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \\"/generated-test-case-file\\"),
            method: \\"POST\\",
            headers: {},
            token: this.token,
            body: {
                content: JSON.stringify(request),
                contentType: \\"application/json\\"
            }
        });

        if (isResponseOk(encodedResponse)) {
            const response = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: true,
                body: response as Record<model.commons.Language, model.problemV2.FileInfoV2>
            };
        }
        else {
            const error = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: false,
                error: error as model.problemV2.GetGeneratedTestCaseFileErrorBody
            };
        }
    }

    public async getGeneratedTestCaseTemplateFile(request: model.problemV2.GetGeneratedTestCaseTemplateFileRequest): Promise<model.problemV2.GetGeneratedTestCaseTemplateFileResponse> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \\"/generated-test-case-template-file\\"),
            method: \\"POST\\",
            headers: {},
            token: this.token,
            body: {
                content: JSON.stringify(request),
                contentType: \\"application/json\\"
            }
        });

        if (isResponseOk(encodedResponse)) {
            const response = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: true,
                body: response as Record<model.commons.Language, model.problemV2.FileInfoV2>
            };
        }
        else {
            const error = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: false,
                error: error as model.problemV2.GetGeneratedTestCaseTemplateFileErrorBody
            };
        }
    }
}
",
            "name": "ProblemCrudServiceV2.ts",
            "type": "file",
          },
          Object {
            "contents": "import { isResponseOk, defaultFetcher, Service, Token, Fetcher } from \\"@fern-typescript/service-utils\\";
import path from \\"path\\";
import * as model from \\"../../model\\";

export interface ProblemInfoServicV2 {
    getLightweightProblems(): Promise<model.problemV2.GetLightweightProblemsResponse>;
    getProblems(): Promise<model.problemV2.GetProblemsResponse>;
    getLatestProblem(request: model.problemV2.GetLatestProblemRequest): Promise<model.problemV2.GetLatestProblemResponse>;
    getProblemVersion(request: model.problemV2.GetProblemVersionRequest): Promise<model.problemV2.GetProblemVersionResponse>;
}

export class ProblemInfoServicV2 implements ProblemInfoServicV2 {
    private baseUrl: string;
    private fetcher: Fetcher;
    private token: Token | undefined;

    constructor(args: Service.Init) {
        this.fetcher = args.fetcher ?? defaultFetcher;
        this.baseUrl = path.join(args.origin, \\"/problems-v2\\");
        this.token = args.token;
    }

    public async getLightweightProblems(): Promise<model.problemV2.GetLightweightProblemsResponse> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \\"/lightweight-problem-info\\"),
            method: \\"GET\\",
            headers: {},
            token: this.token
        });

        if (isResponseOk(encodedResponse)) {
            const response = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: true,
                body: response as model.problemV2.LightweightProblemInfoV2[]
            };
        }
        else {
            const error = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: false,
                error: error as model.problemV2.GetLightweightProblemsErrorBody
            };
        }
    }

    public async getProblems(): Promise<model.problemV2.GetProblemsResponse> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \\"/problem-info\\"),
            method: \\"GET\\",
            headers: {},
            token: this.token
        });

        if (isResponseOk(encodedResponse)) {
            const response = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: true,
                body: response as model.problemV2.ProblemInfoV2[]
            };
        }
        else {
            const error = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: false,
                error: error as model.problemV2.GetProblemsErrorBody
            };
        }
    }

    public async getLatestProblem(request: model.problemV2.GetLatestProblemRequest): Promise<model.problemV2.GetLatestProblemResponse> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \`/problem-info/\${request.problemId}\`),
            method: \\"GET\\",
            headers: {},
            token: this.token
        });

        if (isResponseOk(encodedResponse)) {
            const response = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: true,
                body: response as model.problemV2.ProblemInfoV2
            };
        }
        else {
            const error = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: false,
                error: error as model.problemV2.GetLatestProblemErrorBody
            };
        }
    }

    public async getProblemVersion(request: model.problemV2.GetProblemVersionRequest): Promise<model.problemV2.GetProblemVersionResponse> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \`/problem-info/\${request.problemId}/version/\${request.problemVersion}\`),
            method: \\"GET\\",
            headers: {},
            token: this.token
        });

        if (isResponseOk(encodedResponse)) {
            const response = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: true,
                body: response as model.problemV2.ProblemInfoV2
            };
        }
        else {
            const error = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: false,
                error: error as model.problemV2.GetProblemVersionErrorBody
            };
        }
    }
}
",
            "name": "ProblemInfoServicV2.ts",
            "type": "file",
          },
          Object {
            "contents": "export * from \\"./ProblemInfoServicV2\\";
export * from \\"./ProblemCrudServiceV2\\";
",
            "name": "index.ts",
            "type": "file",
          },
        ],
        "name": "problemV2",
        "type": "directory",
      },
      Object {
        "contents": Array [
          Object {
            "contents": "import { isResponseOk, defaultFetcher, Service, Token, Fetcher } from \\"@fern-typescript/service-utils\\";
import path from \\"path\\";
import * as model from \\"../../model\\";

export interface ExecutionSesssionManagementService {
    createExecutionSession(request: model.submission.CreateExecutionSessionRequest): Promise<model.submission.CreateExecutionSessionResponse>;
    getExecutionSession(request: model.submission.GetExecutionSessionRequest): Promise<model.submission.GetExecutionSessionResponse>;
    stopExecutionSession(request: model.submission.StopExecutionSessionRequest): Promise<model.submission.StopExecutionSessionResponse>;
    getExecutionSessionsState(): Promise<model.submission.GetExecutionSessionsStateResponse>;
}

/**
 * Responsible for spinning up and spinning down execution.
 */
export class ExecutionSesssionManagementService implements ExecutionSesssionManagementService {
    private baseUrl: string;
    private fetcher: Fetcher;
    private token: Token | undefined;

    constructor(args: Service.Init) {
        this.fetcher = args.fetcher ?? defaultFetcher;
        this.baseUrl = path.join(args.origin, \\"/sessions\\");
        this.token = args.token;
    }

    public async createExecutionSession(request: model.submission.CreateExecutionSessionRequest): Promise<model.submission.CreateExecutionSessionResponse> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \`/create-session/\${request.language}\`),
            method: \\"POST\\",
            headers: {},
            token: this.token
        });

        if (isResponseOk(encodedResponse)) {
            const response = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: true,
                body: response as model.submission.ExecutionSessionResponse
            };
        }
        else {
            const error = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: false,
                error: error as model.submission.CreateExecutionSessionErrorBody
            };
        }
    }

    public async getExecutionSession(request: model.submission.GetExecutionSessionRequest): Promise<model.submission.GetExecutionSessionResponse> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \`/\${request.sessionId}\`),
            method: \\"GET\\",
            headers: {},
            token: this.token
        });

        if (isResponseOk(encodedResponse)) {
            const response = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: true,
                body: response as model.submission.ExecutionSessionResponse | null | undefined
            };
        }
        else {
            const error = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: false,
                error: error as model.submission.GetExecutionSessionErrorBody
            };
        }
    }

    public async stopExecutionSession(request: model.submission.StopExecutionSessionRequest): Promise<model.submission.StopExecutionSessionResponse> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \`/stop/\${request.sessionId}\`),
            method: \\"DELETE\\",
            headers: {},
            token: this.token
        });

        if (isResponseOk(encodedResponse)) {
            return {
                ok: true
            };
        }
        else {
            const error = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: false,
                error: error as model.submission.StopExecutionSessionErrorBody
            };
        }
    }

    public async getExecutionSessionsState(): Promise<model.submission.GetExecutionSessionsStateResponse> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \\"/execution-sessions-state\\"),
            method: \\"GET\\",
            headers: {},
            token: this.token
        });

        if (isResponseOk(encodedResponse)) {
            const response = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: true,
                body: response as model.submission.GetExecutionSessionsStateResponseBody
            };
        }
        else {
            const error = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: false,
                error: error as model.submission.GetExecutionSessionsStateErrorBody
            };
        }
    }
}
",
            "name": "ExecutionSesssionManagementService.ts",
            "type": "file",
          },
          Object {
            "contents": "import { isResponseOk, defaultFetcher, Service, Token, Fetcher } from \\"@fern-typescript/service-utils\\";
import path from \\"path\\";
import * as model from \\"../../model\\";

export interface SubmissionInfoService {
    getSubmissionState(request: model.submission.GetSubmissionStateRequest): Promise<model.submission.GetSubmissionStateResponse>;
    getSubmissionStateV2(request: model.submission.GetSubmissionStateV2Request): Promise<model.submission.GetSubmissionStateV2Response>;
    getTraceResponsesPage(request: model.submission._GetTraceResponsesPageRequest): Promise<model.submission.GetTraceResponsesPageResponse>;
    getTraceResponsesV2Page(request: model.submission.GetTraceResponsesV2PageRequest): Promise<model.submission.GetTraceResponsesV2PageResponse>;
    getTraceResponsesPageForWorkspace(request: model.submission.GetTraceResponsesPageForWorkspaceRequest): Promise<model.submission.GetTraceResponsesPageForWorkspaceResponse>;
    getTraceResponsesV2PageForWorkspace(request: model.submission.GetTraceResponsesV2PageForWorkspaceRequest): Promise<model.submission.GetTraceResponsesV2PageForWorkspaceResponse>;
}

/**
 * Responsible for serving information about submissions
 */
export class SubmissionInfoService implements SubmissionInfoService {
    private baseUrl: string;
    private fetcher: Fetcher;
    private token: Token | undefined;

    constructor(args: Service.Init) {
        this.fetcher = args.fetcher ?? defaultFetcher;
        this.baseUrl = path.join(args.origin, \\"/submissions\\");
        this.token = args.token;
    }

    public async getSubmissionState(request: model.submission.GetSubmissionStateRequest): Promise<model.submission.GetSubmissionStateResponse> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \`/\${request.submissionId}\`),
            method: \\"GET\\",
            headers: {},
            token: this.token
        });

        if (isResponseOk(encodedResponse)) {
            const response = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: true,
                body: response as model.submission.GetSubmissionStateResponseBody
            };
        }
        else {
            const error = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: false,
                error: error as model.submission.GetSubmissionStateErrorBody
            };
        }
    }

    public async getSubmissionStateV2(request: model.submission.GetSubmissionStateV2Request): Promise<model.submission.GetSubmissionStateV2Response> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \`/v2/\${request.submissionId}\`),
            method: \\"GET\\",
            headers: {},
            token: this.token
        });

        if (isResponseOk(encodedResponse)) {
            const response = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: true,
                body: response as model.submission.GetSubmissionStateV2ResponseBody
            };
        }
        else {
            const error = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: false,
                error: error as model.submission.GetSubmissionStateV2ErrorBody
            };
        }
    }

    public async getTraceResponsesPage(request: model.submission._GetTraceResponsesPageRequest): Promise<model.submission.GetTraceResponsesPageResponse> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \`/trace-respose/\${request.submissionId}/testCase/\${request.testCaseId}\`),
            method: \\"POST\\",
            headers: {},
            token: this.token,
            body: {
                content: JSON.stringify(request.body),
                contentType: \\"application/json\\"
            }
        });

        if (isResponseOk(encodedResponse)) {
            const response = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: true,
                body: response as model.submission.TraceResponsesPage
            };
        }
        else {
            const error = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: false,
                error: error as model.submission.GetTraceResponsesPageErrorBody
            };
        }
    }

    public async getTraceResponsesV2Page(request: model.submission.GetTraceResponsesV2PageRequest): Promise<model.submission.GetTraceResponsesV2PageResponse> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \`/trace-response-v2/\${request.submissionId}/testCase/\${request.testCaseId}\`),
            method: \\"POST\\",
            headers: {},
            token: this.token,
            body: {
                content: JSON.stringify(request.body),
                contentType: \\"application/json\\"
            }
        });

        if (isResponseOk(encodedResponse)) {
            const response = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: true,
                body: response as model.submission.TraceResponsesPageV2
            };
        }
        else {
            const error = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: false,
                error: error as model.submission.GetTraceResponsesV2PageErrorBody
            };
        }
    }

    public async getTraceResponsesPageForWorkspace(request: model.submission.GetTraceResponsesPageForWorkspaceRequest): Promise<model.submission.GetTraceResponsesPageForWorkspaceResponse> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \`/workspace-trace-response/\${request.submissionId}\`),
            method: \\"POST\\",
            headers: {},
            token: this.token,
            body: {
                content: JSON.stringify(request.body),
                contentType: \\"application/json\\"
            }
        });

        if (isResponseOk(encodedResponse)) {
            const response = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: true,
                body: response as model.submission.TraceResponsesPage
            };
        }
        else {
            const error = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: false,
                error: error as model.submission.GetTraceResponsesPageForWorkspaceErrorBody
            };
        }
    }

    public async getTraceResponsesV2PageForWorkspace(request: model.submission.GetTraceResponsesV2PageForWorkspaceRequest): Promise<model.submission.GetTraceResponsesV2PageForWorkspaceResponse> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \`/workspace-trace-response-v2/\${request.submissionId}\`),
            method: \\"POST\\",
            headers: {},
            token: this.token,
            body: {
                content: JSON.stringify(request.body),
                contentType: \\"application/json\\"
            }
        });

        if (isResponseOk(encodedResponse)) {
            const response = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: true,
                body: response as model.submission.TraceResponsesPageV2
            };
        }
        else {
            const error = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: false,
                error: error as model.submission.GetTraceResponsesV2PageForWorkspaceErrorBody
            };
        }
    }
}
",
            "name": "SubmissionInfoService.ts",
            "type": "file",
          },
          Object {
            "contents": "import { isResponseOk, defaultFetcher, Service, Token, Fetcher } from \\"@fern-typescript/service-utils\\";
import path from \\"path\\";
import * as model from \\"../../model\\";

export interface WorkspaceInfoService {
    getWorkspaceStarterFiles(): Promise<model.submission.GetWorkspaceStarterFilesResponse>;
    getWorkspaceStarterFilesV2(): Promise<model.submission.GetWorkspaceStarterFilesV2Response>;
}

export class WorkspaceInfoService implements WorkspaceInfoService {
    private baseUrl: string;
    private fetcher: Fetcher;
    private token: Token | undefined;

    constructor(args: Service.Init) {
        this.fetcher = args.fetcher ?? defaultFetcher;
        this.baseUrl = path.join(args.origin, \\"/workspace\\");
        this.token = args.token;
    }

    public async getWorkspaceStarterFiles(): Promise<model.submission.GetWorkspaceStarterFilesResponse> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \\"/get-workspace-starter-files\\"),
            method: \\"GET\\",
            headers: {},
            token: this.token
        });

        if (isResponseOk(encodedResponse)) {
            const response = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: true,
                body: response as model.submission.WorkspaceStarterFilesResponse
            };
        }
        else {
            const error = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: false,
                error: error as model.submission.GetWorkspaceStarterFilesErrorBody
            };
        }
    }

    public async getWorkspaceStarterFilesV2(): Promise<model.submission.GetWorkspaceStarterFilesV2Response> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \\"/get-workspace-starter-files-v2\\"),
            method: \\"GET\\",
            headers: {},
            token: this.token
        });

        if (isResponseOk(encodedResponse)) {
            const response = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: true,
                body: response as model.submission.WorkspaceStarterFilesResponseV2
            };
        }
        else {
            const error = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: false,
                error: error as model.submission.GetWorkspaceStarterFilesV2ErrorBody
            };
        }
    }
}
",
            "name": "WorkspaceInfoService.ts",
            "type": "file",
          },
          Object {
            "contents": "export * from \\"./ExecutionSesssionManagementService\\";
export * from \\"./SubmissionInfoService\\";
export * from \\"./WorkspaceInfoService\\";
",
            "name": "index.ts",
            "type": "file",
          },
        ],
        "name": "submission",
        "type": "directory",
      },
      Object {
        "contents": Array [
          Object {
            "contents": "import { isResponseOk, defaultFetcher, Service, Token, Fetcher } from \\"@fern-typescript/service-utils\\";
import path from \\"path\\";
import * as model from \\"../../model\\";

export interface SysPropCrudService {
    setNumWarmInstances(request: model.sysprop.SetNumWarmInstancesRequest): Promise<model.sysprop.SetNumWarmInstancesResponse>;
    getNumWarmInstances(): Promise<model.sysprop.GetNumWarmInstancesResponse>;
}

export class SysPropCrudService implements SysPropCrudService {
    private baseUrl: string;
    private fetcher: Fetcher;
    private token: Token | undefined;

    constructor(args: Service.Init) {
        this.fetcher = args.fetcher ?? defaultFetcher;
        this.baseUrl = path.join(args.origin, \\"/sysprop\\");
        this.token = args.token;
    }

    public async setNumWarmInstances(request: model.sysprop.SetNumWarmInstancesRequest): Promise<model.sysprop.SetNumWarmInstancesResponse> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \`/num-warm-instances/\${request.language}/\${request.numWarmInstances}\`),
            method: \\"PUT\\",
            headers: {},
            token: this.token
        });

        if (isResponseOk(encodedResponse)) {
            return {
                ok: true
            };
        }
        else {
            const error = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: false,
                error: error as model.sysprop.SetNumWarmInstancesErrorBody
            };
        }
    }

    public async getNumWarmInstances(): Promise<model.sysprop.GetNumWarmInstancesResponse> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \\"/num-warm-instances\\"),
            method: \\"GET\\",
            headers: {},
            token: this.token
        });

        if (isResponseOk(encodedResponse)) {
            const response = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: true,
                body: response as Record<model.commons.Language, number>
            };
        }
        else {
            const error = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: false,
                error: error as model.sysprop.GetNumWarmInstancesErrorBody
            };
        }
    }
}
",
            "name": "SysPropCrudService.ts",
            "type": "file",
          },
          Object {
            "contents": "export * from \\"./SysPropCrudService\\";
",
            "name": "index.ts",
            "type": "file",
          },
        ],
        "name": "sysprop",
        "type": "directory",
      },
    ],
    "name": "services",
    "type": "directory",
  },
]
`;
