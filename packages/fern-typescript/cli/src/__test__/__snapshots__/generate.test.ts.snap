// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`runGenerator trace 1`] = `
Array [
  Object {
    "contents": "{
    \\"name\\": \\"trace\\",
    \\"version\\": \\"0.0.0\\",
    \\"files\\": [
        \\"lib\\"
    ],
    \\"main\\": \\"./lib/cjs/index.js\\",
    \\"types\\": \\"./lib/cjs/index.d.ts\\",
    \\"exports\\": {
        \\".\\": {
            \\"require\\": \\"./lib/cjs/index.js\\",
            \\"default\\": \\"./lib/esm/index.js\\"
        }
    },
    \\"sideEffects\\": false,
    \\"scripts\\": {
        \\"build\\": \\"run-p build:esm build:cjs\\",
        \\"build:esm\\": \\"tsc --project tsconfig.esm.json && echo '{ \\\\\\"type\\\\\\": \\\\\\"module\\\\\\" }' > lib/esm/package.json\\",
        \\"build:cjs\\": \\"tsc --project tsconfig.json && echo '{ \\\\\\"type\\\\\\": \\\\\\"commonjs\\\\\\" }' > lib/cjs/package.json\\"
    },
    \\"dependencies\\": {
        \\"@fern-typescript/service-utils\\": \\"0.0.86\\"
    },
    \\"devDependencies\\": {
        \\"@types/node\\": \\"^17.0.33\\",
        \\"npm-run-all\\": \\"^4.1.5\\",
        \\"typescript\\": \\"^4.6.4\\"
    }
}",
    "name": "package.json",
    "type": "file",
  },
  Object {
    "contents": Array [
      Object {
        "contents": "export * from \\"./model\\";
export * from \\"./services\\";
",
        "name": "index.ts",
        "type": "file",
      },
      Object {
        "contents": Array [
          Object {
            "contents": Array [
              Object {
                "contents": "export * from \\"./service-types\\";
export * from \\"./types\\";
",
                "name": "index.ts",
                "type": "file",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": Array [
                      Object {
                        "contents": "import { SubmissionId } from \\"../../../submission/types/SubmissionId\\";
import { TestSubmissionUpdate } from \\"../../../submission/types/TestSubmissionUpdate\\";

export interface SendTestSubmissionUpdateRequest {
    submissionId: SubmissionId;
    request: TestSubmissionUpdate;
}
",
                        "name": "SendTestSubmissionUpdateRequest.ts.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "export type SendTestSubmissionUpdateResponse = SendTestSubmissionUpdateResponse.SuccessResponse | SendTestSubmissionUpdateResponse.ErrorResponse;

namespace SendTestSubmissionUpdateResponse {
    export interface SuccessResponse {
        ok: true;
        statusCode: number;
    }

    export interface ErrorResponse {
        ok: false;
        statusCode: number;
    }
}
",
                        "name": "SendTestSubmissionUpdateResponse.ts.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { SubmissionId } from \\"../../../submission/types/SubmissionId\\";
import { WorkspaceSubmissionUpdate } from \\"../../../submission/types/WorkspaceSubmissionUpdate\\";

export interface SendWorkspaceSubmissionUpdateRequest {
    submissionId: SubmissionId;
    request: WorkspaceSubmissionUpdate;
}
",
                        "name": "SendWorkspaceSubmissionUpdateRequest.ts.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "export type SendWorkspaceSubmissionUpdateResponse = SendWorkspaceSubmissionUpdateResponse.SuccessResponse | SendWorkspaceSubmissionUpdateResponse.ErrorResponse;

namespace SendWorkspaceSubmissionUpdateResponse {
    export interface SuccessResponse {
        ok: true;
        statusCode: number;
    }

    export interface ErrorResponse {
        ok: false;
        statusCode: number;
    }
}
",
                        "name": "SendWorkspaceSubmissionUpdateResponse.ts.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { SubmissionId } from \\"../../../submission/types/SubmissionId\\";
import { StoreTracedTestCaseRequest } from \\"../../types/StoreTracedTestCaseRequest\\";

export interface StoreTracedTestCaseRequest {
    submissionId: SubmissionId;
    testCaseId: string;
    request: StoreTracedTestCaseRequest;
}
",
                        "name": "StoreTracedTestCaseRequest.ts.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "export type StoreTracedTestCaseResponse = StoreTracedTestCaseResponse.SuccessResponse | StoreTracedTestCaseResponse.ErrorResponse;

namespace StoreTracedTestCaseResponse {
    export interface SuccessResponse {
        ok: true;
        statusCode: number;
    }

    export interface ErrorResponse {
        ok: false;
        statusCode: number;
    }
}
",
                        "name": "StoreTracedTestCaseResponse.ts.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { SubmissionId } from \\"../../../submission/types/SubmissionId\\";
import { TestCaseId } from \\"../../../problemV2/types/TestCaseId\\";
import { TraceResponseV2 } from \\"../../../submission/types/TraceResponseV2\\";

export interface StoreTracedTestCaseV2Request {
    submissionId: SubmissionId;
    testCaseId: TestCaseId;
    request: TraceResponseV2[];
}
",
                        "name": "StoreTracedTestCaseV2Request.ts.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "export type StoreTracedTestCaseV2Response = StoreTracedTestCaseV2Response.SuccessResponse | StoreTracedTestCaseV2Response.ErrorResponse;

namespace StoreTracedTestCaseV2Response {
    export interface SuccessResponse {
        ok: true;
        statusCode: number;
    }

    export interface ErrorResponse {
        ok: false;
        statusCode: number;
    }
}
",
                        "name": "StoreTracedTestCaseV2Response.ts.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { SubmissionId } from \\"../../../submission/types/SubmissionId\\";
import { StoreTracedWorkspaceRequest } from \\"../../types/StoreTracedWorkspaceRequest\\";

export interface StoreTracedWorkspaceRequest {
    submissionId: SubmissionId;
    request: StoreTracedWorkspaceRequest;
}
",
                        "name": "StoreTracedWorkspaceRequest.ts.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "export type StoreTracedWorkspaceResponse = StoreTracedWorkspaceResponse.SuccessResponse | StoreTracedWorkspaceResponse.ErrorResponse;

namespace StoreTracedWorkspaceResponse {
    export interface SuccessResponse {
        ok: true;
        statusCode: number;
    }

    export interface ErrorResponse {
        ok: false;
        statusCode: number;
    }
}
",
                        "name": "StoreTracedWorkspaceResponse.ts.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { SubmissionId } from \\"../../../submission/types/SubmissionId\\";
import { TraceResponseV2 } from \\"../../../submission/types/TraceResponseV2\\";

export interface StoreTracedWorkspaceV2Request {
    submissionId: SubmissionId;
    request: TraceResponseV2[];
}
",
                        "name": "StoreTracedWorkspaceV2Request.ts.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "export type StoreTracedWorkspaceV2Response = StoreTracedWorkspaceV2Response.SuccessResponse | StoreTracedWorkspaceV2Response.ErrorResponse;

namespace StoreTracedWorkspaceV2Response {
    export interface SuccessResponse {
        ok: true;
        statusCode: number;
    }

    export interface ErrorResponse {
        ok: false;
        statusCode: number;
    }
}
",
                        "name": "StoreTracedWorkspaceV2Response.ts.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { SubmissionId } from \\"../../../submission/types/SubmissionId\\";
import { TestSubmissionStatus } from \\"../../../submission/types/TestSubmissionStatus\\";

export interface UpdateTestSubmissionStatusRequest {
    submissionId: SubmissionId;
    request: TestSubmissionStatus;
}
",
                        "name": "UpdateTestSubmissionStatusRequest.ts.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "export type UpdateTestSubmissionStatusResponse = UpdateTestSubmissionStatusResponse.SuccessResponse | UpdateTestSubmissionStatusResponse.ErrorResponse;

namespace UpdateTestSubmissionStatusResponse {
    export interface SuccessResponse {
        ok: true;
        statusCode: number;
    }

    export interface ErrorResponse {
        ok: false;
        statusCode: number;
    }
}
",
                        "name": "UpdateTestSubmissionStatusResponse.ts.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { SubmissionId } from \\"../../../submission/types/SubmissionId\\";
import { WorkspaceSubmissionStatus } from \\"../../../submission/types/WorkspaceSubmissionStatus\\";

export interface UpdateWorkspaceSubmissionStatusRequest {
    submissionId: SubmissionId;
    request: WorkspaceSubmissionStatus;
}
",
                        "name": "UpdateWorkspaceSubmissionStatusRequest.ts.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "export type UpdateWorkspaceSubmissionStatusResponse = UpdateWorkspaceSubmissionStatusResponse.SuccessResponse | UpdateWorkspaceSubmissionStatusResponse.ErrorResponse;

namespace UpdateWorkspaceSubmissionStatusResponse {
    export interface SuccessResponse {
        ok: true;
        statusCode: number;
    }

    export interface ErrorResponse {
        ok: false;
        statusCode: number;
    }
}
",
                        "name": "UpdateWorkspaceSubmissionStatusResponse.ts.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "export * from \\"./SendTestSubmissionUpdateRequest.ts\\";
export * from \\"./SendTestSubmissionUpdateResponse.ts\\";
export * from \\"./SendWorkspaceSubmissionUpdateRequest.ts\\";
export * from \\"./SendWorkspaceSubmissionUpdateResponse.ts\\";
export * from \\"./StoreTracedTestCaseRequest.ts\\";
export * from \\"./StoreTracedTestCaseResponse.ts\\";
export * from \\"./StoreTracedTestCaseV2Request.ts\\";
export * from \\"./StoreTracedTestCaseV2Response.ts\\";
export * from \\"./StoreTracedWorkspaceRequest.ts\\";
export * from \\"./StoreTracedWorkspaceResponse.ts\\";
export * from \\"./StoreTracedWorkspaceV2Request.ts\\";
export * from \\"./StoreTracedWorkspaceV2Response.ts\\";
export * from \\"./UpdateTestSubmissionStatusRequest.ts\\";
export * from \\"./UpdateTestSubmissionStatusResponse.ts\\";
export * from \\"./UpdateWorkspaceSubmissionStatusRequest.ts\\";
export * from \\"./UpdateWorkspaceSubmissionStatusResponse.ts\\";
",
                        "name": "index.ts",
                        "type": "file",
                      },
                    ],
                    "name": "AdminService",
                    "type": "directory",
                  },
                  Object {
                    "contents": "export * from \\"./AdminService\\";
",
                    "name": "index.ts",
                    "type": "file",
                  },
                ],
                "name": "service-types",
                "type": "directory",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "import { TestCaseResultWithStdout } from \\"../../submission/types/TestCaseResultWithStdout\\";
import { TraceResponse } from \\"../../submission/types/TraceResponse\\";

export interface StoreTracedTestCaseRequest {
    result: TestCaseResultWithStdout;
    traceResponses: TraceResponse[];
}
",
                    "name": "StoreTracedTestCaseRequest.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { WorkspaceRunDetails } from \\"../../submission/types/WorkspaceRunDetails\\";
import { TraceResponse } from \\"../../submission/types/TraceResponse\\";

export interface StoreTracedWorkspaceRequest {
    workspaceRunDetails: WorkspaceRunDetails;
    traceResponses: TraceResponse[];
}
",
                    "name": "StoreTracedWorkspaceRequest.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export * from \\"./StoreTracedTestCaseRequest\\";
export * from \\"./StoreTracedWorkspaceRequest\\";
",
                    "name": "index.ts",
                    "type": "file",
                  },
                ],
                "name": "types",
                "type": "directory",
              },
            ],
            "name": "admin",
            "type": "directory",
          },
          Object {
            "contents": Array [
              Object {
                "contents": "export * from \\"./types\\";
",
                "name": "index.ts",
                "type": "file",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "import { NodeId } from \\"./NodeId\\";
import { BinaryTreeValue } from \\"./BinaryTreeValue\\";

export interface BinaryTreeNodeAndTreeValue {
    nodeId: NodeId;
    fullTree: BinaryTreeValue;
}
",
                    "name": "BinaryTreeNodeAndTreeValue.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { NodeId } from \\"./NodeId\\";

export interface BinaryTreeNodeValue {
    nodeId: NodeId;
    val: number;
    right: NodeId | null | undefined;
    left: NodeId | null | undefined;
}
",
                    "name": "BinaryTreeNodeValue.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { NodeId } from \\"./NodeId\\";
import { BinaryTreeNodeValue } from \\"./BinaryTreeNodeValue\\";

export interface BinaryTreeValue {
    root: NodeId | null | undefined;
    nodes: Record<NodeId, BinaryTreeNodeValue>;
}
",
                    "name": "BinaryTreeValue.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { DebugVariableValue } from \\"./DebugVariableValue\\";

export interface DebugKeyValuePairs {
    key: DebugVariableValue;
    value: DebugVariableValue;
}
",
                    "name": "DebugKeyValuePairs.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { DebugKeyValuePairs } from \\"./DebugKeyValuePairs\\";

export interface DebugMapValue {
    keyValuePairs: DebugKeyValuePairs[];
}
",
                    "name": "DebugMapValue.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../..\\";

export type DebugVariableValue =
    | DebugVariableValue.IntegerValue
    | DebugVariableValue.BooleanValue
    | DebugVariableValue.DoubleValue
    | DebugVariableValue.StringValue
    | DebugVariableValue.CharValue
    | DebugVariableValue.MapValue
    | DebugVariableValue.ListValue
    | DebugVariableValue.BinaryTreeNodeValue
    | DebugVariableValue.SinglyLinkedListNodeValue
    | DebugVariableValue.DoublyLinkedListNodeValue
    | DebugVariableValue.UndefinedValue
    | DebugVariableValue.NullValue
    | DebugVariableValue.GenericValue;

export declare namespace DebugVariableValue {
    interface IntegerValue {
        _type: \\"integerValue\\";
        integerValue: number;
    }

    interface BooleanValue {
        _type: \\"booleanValue\\";
        booleanValue: boolean;
    }

    interface DoubleValue {
        _type: \\"doubleValue\\";
        doubleValue: number;
    }

    interface StringValue {
        _type: \\"stringValue\\";
        stringValue: string;
    }

    interface CharValue {
        _type: \\"charValue\\";
        charValue: string;
    }

    interface MapValue extends model.DebugMapValue {
        _type: \\"mapValue\\";
    }

    interface ListValue {
        _type: \\"listValue\\";
        listValue: DebugVariableValue[];
    }

    interface BinaryTreeNodeValue extends model.BinaryTreeNodeAndTreeValue {
        _type: \\"binaryTreeNodeValue\\";
    }

    interface SinglyLinkedListNodeValue extends model.SinglyLinkedListNodeAndListValue {
        _type: \\"singlyLinkedListNodeValue\\";
    }

    interface DoublyLinkedListNodeValue extends model.DoublyLinkedListNodeAndListValue {
        _type: \\"doublyLinkedListNodeValue\\";
    }

    interface UndefinedValue {
        _type: \\"undefinedValue\\";
    }

    interface NullValue {
        _type: \\"nullValue\\";
    }

    interface GenericValue extends model.GenericValue {
        _type: \\"genericValue\\";
    }

    export interface _Visitor<Result> {
        integerValue: (value: number) => Result;
        booleanValue: (value: boolean) => Result;
        doubleValue: (value: number) => Result;
        stringValue: (value: string) => Result;
        charValue: (value: string) => Result;
        mapValue: (value: model.DebugMapValue) => Result;
        listValue: (value: DebugVariableValue[]) => Result;
        binaryTreeNodeValue: (value: model.BinaryTreeNodeAndTreeValue) => Result;
        singlyLinkedListNodeValue: (value: model.SinglyLinkedListNodeAndListValue) => Result;
        doublyLinkedListNodeValue: (value: model.DoublyLinkedListNodeAndListValue) => Result;
        undefinedValue: () => Result;
        nullValue: () => Result;
        genericValue: (value: model.GenericValue) => Result;
        _unknown: () => Result;
    }
}

export const DebugVariableValue = {
    integerValue: (value: number): DebugVariableValue.IntegerValue => ({
        integerValue: value,
        _type: \\"integerValue\\"
    }),

    booleanValue: (value: boolean): DebugVariableValue.BooleanValue => ({
        booleanValue: value,
        _type: \\"booleanValue\\"
    }),

    doubleValue: (value: number): DebugVariableValue.DoubleValue => ({
        doubleValue: value,
        _type: \\"doubleValue\\"
    }),

    stringValue: (value: string): DebugVariableValue.StringValue => ({
        stringValue: value,
        _type: \\"stringValue\\"
    }),

    charValue: (value: string): DebugVariableValue.CharValue => ({
        charValue: value,
        _type: \\"charValue\\"
    }),

    mapValue: (value: model.DebugMapValue): DebugVariableValue.MapValue => ({
        ...value,
        _type: \\"mapValue\\"
    }),

    listValue: (value: DebugVariableValue[]): DebugVariableValue.ListValue => ({
        listValue: value,
        _type: \\"listValue\\"
    }),

    binaryTreeNodeValue: (value: model.BinaryTreeNodeAndTreeValue): DebugVariableValue.BinaryTreeNodeValue => ({
        ...value,
        _type: \\"binaryTreeNodeValue\\"
    }),

    singlyLinkedListNodeValue: (value: model.SinglyLinkedListNodeAndListValue): DebugVariableValue.SinglyLinkedListNodeValue => ({
        ...value,
        _type: \\"singlyLinkedListNodeValue\\"
    }),

    doublyLinkedListNodeValue: (value: model.DoublyLinkedListNodeAndListValue): DebugVariableValue.DoublyLinkedListNodeValue => ({
        ...value,
        _type: \\"doublyLinkedListNodeValue\\"
    }),

    undefinedValue: (): DebugVariableValue.UndefinedValue => ({
        _type: \\"undefinedValue\\"
    }),

    nullValue: (): DebugVariableValue.NullValue => ({
        _type: \\"nullValue\\"
    }),

    genericValue: (value: model.GenericValue): DebugVariableValue.GenericValue => ({
        ...value,
        _type: \\"genericValue\\"
    }),

    _visit: <Result>(value: DebugVariableValue, visitor: DebugVariableValue._Visitor<Result>): Result => {
        switch (value._type) {
            case \\"integerValue\\": return visitor.integerValue(value.integerValue);
            case \\"booleanValue\\": return visitor.booleanValue(value.booleanValue);
            case \\"doubleValue\\": return visitor.doubleValue(value.doubleValue);
            case \\"stringValue\\": return visitor.stringValue(value.stringValue);
            case \\"charValue\\": return visitor.charValue(value.charValue);
            case \\"mapValue\\": return visitor.mapValue(value);
            case \\"listValue\\": return visitor.listValue(value.listValue);
            case \\"binaryTreeNodeValue\\": return visitor.binaryTreeNodeValue(value);
            case \\"singlyLinkedListNodeValue\\": return visitor.singlyLinkedListNodeValue(value);
            case \\"doublyLinkedListNodeValue\\": return visitor.doublyLinkedListNodeValue(value);
            case \\"undefinedValue\\": return visitor.undefinedValue();
            case \\"nullValue\\": return visitor.nullValue();
            case \\"genericValue\\": return visitor.genericValue(value);
            default: return visitor._unknown();
        }
    },

    _types: (): DebugVariableValue[\\"_type\\"][] => [\\"integerValue\\", \\"booleanValue\\", \\"doubleValue\\", \\"stringValue\\", \\"charValue\\", \\"mapValue\\", \\"listValue\\", \\"binaryTreeNodeValue\\", \\"singlyLinkedListNodeValue\\", \\"doublyLinkedListNodeValue\\", \\"undefinedValue\\", \\"nullValue\\", \\"genericValue\\"],
} as const;
",
                    "name": "DebugVariableValue.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { NodeId } from \\"./NodeId\\";
import { DoublyLinkedListValue } from \\"./DoublyLinkedListValue\\";

export interface DoublyLinkedListNodeAndListValue {
    nodeId: NodeId;
    fullList: DoublyLinkedListValue;
}
",
                    "name": "DoublyLinkedListNodeAndListValue.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { NodeId } from \\"./NodeId\\";

export interface DoublyLinkedListNodeValue {
    nodeId: NodeId;
    val: number;
    next: NodeId | null | undefined;
    prev: NodeId | null | undefined;
}
",
                    "name": "DoublyLinkedListNodeValue.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { NodeId } from \\"./NodeId\\";
import { DoublyLinkedListNodeValue } from \\"./DoublyLinkedListNodeValue\\";

export interface DoublyLinkedListValue {
    head: NodeId | null | undefined;
    nodes: Record<NodeId, DoublyLinkedListNodeValue>;
}
",
                    "name": "DoublyLinkedListValue.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export interface FileInfo {
    filename: string;
    contents: string;
}
",
                    "name": "FileInfo.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export interface GenericValue {
    stringifiedType: string | null | undefined;
    stringifiedValue: string;
}
",
                    "name": "GenericValue.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { VariableValue } from \\"./VariableValue\\";

export interface KeyValuePair {
    key: VariableValue;
    value: VariableValue;
}
",
                    "name": "KeyValuePair.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export type Language =
    | \\"JAVA\\"
    | \\"JAVASCRIPT\\"
    | \\"PYTHON\\";

export const Language = {
    Java: \\"JAVA\\",
    Javascript: \\"JAVASCRIPT\\",
    Python: \\"PYTHON\\",

    _visit: <Result>(value: Language, visitor: Language._Visitor<Result>): Result => {
        switch (value) {
            case Language.Java: return visitor.java();
            case Language.Javascript: return visitor.javascript();
            case Language.Python: return visitor.python();
            default: return visitor._unknown();
        }
    },

    _values: (): Language[] => [Language.Java, Language.Javascript, Language.Python],
} as const;

export declare namespace Language {
    type Java = \\"JAVA\\";
    type Javascript = \\"JAVASCRIPT\\";
    type Python = \\"PYTHON\\";

    export interface _Visitor<Result> {
        java: () => Result;
        javascript: () => Result;
        python: () => Result;
        _unknown: () => Result;
    }
}
",
                    "name": "Language.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { VariableType } from \\"./VariableType\\";

export interface ListType {
    valueType: VariableType;
    /** Whether this list is fixed-size (for languages that supports fixed-size lists). Defaults to false. */
    isFixedLength: boolean | null | undefined;
}
",
                    "name": "ListType.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { VariableType } from \\"./VariableType\\";

export interface MapType {
    keyType: VariableType;
    valueType: VariableType;
}
",
                    "name": "MapType.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { KeyValuePair } from \\"./KeyValuePair\\";

export interface MapValue {
    keyValuePairs: KeyValuePair[];
}
",
                    "name": "MapValue.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export type NodeId = string & {
    __NodeId: void;
};

export const NodeId = {
    of: (value: string): NodeId => value as NodeId
};
",
                    "name": "NodeId.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export type ProblemId = string & {
    __ProblemId: void;
};

export const ProblemId = {
    of: (value: string): ProblemId => value as ProblemId
};
",
                    "name": "ProblemId.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { NodeId } from \\"./NodeId\\";
import { SinglyLinkedListValue } from \\"./SinglyLinkedListValue\\";

export interface SinglyLinkedListNodeAndListValue {
    nodeId: NodeId;
    fullList: SinglyLinkedListValue;
}
",
                    "name": "SinglyLinkedListNodeAndListValue.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { NodeId } from \\"./NodeId\\";

export interface SinglyLinkedListNodeValue {
    nodeId: NodeId;
    val: number;
    next: NodeId | null | undefined;
}
",
                    "name": "SinglyLinkedListNodeValue.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { NodeId } from \\"./NodeId\\";
import { SinglyLinkedListNodeValue } from \\"./SinglyLinkedListNodeValue\\";

export interface SinglyLinkedListValue {
    head: NodeId | null | undefined;
    nodes: Record<NodeId, SinglyLinkedListNodeValue>;
}
",
                    "name": "SinglyLinkedListValue.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { VariableValue } from \\"./VariableValue\\";

export interface TestCase {
    id: string;
    params: VariableValue[];
}
",
                    "name": "TestCase.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { TestCase } from \\"./TestCase\\";
import { VariableValue } from \\"./VariableValue\\";

export interface TestCaseWithExpectedResult {
    testCase: TestCase;
    expectedResult: VariableValue;
}
",
                    "name": "TestCaseWithExpectedResult.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export type UserId = string & {
    __UserId: void;
};

export const UserId = {
    of: (value: string): UserId => value as UserId
};
",
                    "name": "UserId.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../..\\";

export type VariableType =
    | VariableType.IntegerType
    | VariableType.DoubleType
    | VariableType.BooleanType
    | VariableType.StringType
    | VariableType.CharType
    | VariableType.ListType
    | VariableType.MapType
    | VariableType.BinaryTreeType
    | VariableType.SinglyLinkedListType
    | VariableType.DoublyLinkedListType;

export declare namespace VariableType {
    interface IntegerType {
        _type: \\"integerType\\";
    }

    interface DoubleType {
        _type: \\"doubleType\\";
    }

    interface BooleanType {
        _type: \\"booleanType\\";
    }

    interface StringType {
        _type: \\"stringType\\";
    }

    interface CharType {
        _type: \\"charType\\";
    }

    interface ListType extends model.ListType {
        _type: \\"listType\\";
    }

    interface MapType extends model.MapType {
        _type: \\"mapType\\";
    }

    interface BinaryTreeType {
        _type: \\"binaryTreeType\\";
    }

    interface SinglyLinkedListType {
        _type: \\"singlyLinkedListType\\";
    }

    interface DoublyLinkedListType {
        _type: \\"doublyLinkedListType\\";
    }

    export interface _Visitor<Result> {
        integerType: () => Result;
        doubleType: () => Result;
        booleanType: () => Result;
        stringType: () => Result;
        charType: () => Result;
        listType: (value: model.ListType) => Result;
        mapType: (value: model.MapType) => Result;
        binaryTreeType: () => Result;
        singlyLinkedListType: () => Result;
        doublyLinkedListType: () => Result;
        _unknown: () => Result;
    }
}

export const VariableType = {
    integerType: (): VariableType.IntegerType => ({
        _type: \\"integerType\\"
    }),

    doubleType: (): VariableType.DoubleType => ({
        _type: \\"doubleType\\"
    }),

    booleanType: (): VariableType.BooleanType => ({
        _type: \\"booleanType\\"
    }),

    stringType: (): VariableType.StringType => ({
        _type: \\"stringType\\"
    }),

    charType: (): VariableType.CharType => ({
        _type: \\"charType\\"
    }),

    listType: (value: model.ListType): VariableType.ListType => ({
        ...value,
        _type: \\"listType\\"
    }),

    mapType: (value: model.MapType): VariableType.MapType => ({
        ...value,
        _type: \\"mapType\\"
    }),

    binaryTreeType: (): VariableType.BinaryTreeType => ({
        _type: \\"binaryTreeType\\"
    }),

    singlyLinkedListType: (): VariableType.SinglyLinkedListType => ({
        _type: \\"singlyLinkedListType\\"
    }),

    doublyLinkedListType: (): VariableType.DoublyLinkedListType => ({
        _type: \\"doublyLinkedListType\\"
    }),

    _visit: <Result>(value: VariableType, visitor: VariableType._Visitor<Result>): Result => {
        switch (value._type) {
            case \\"integerType\\": return visitor.integerType();
            case \\"doubleType\\": return visitor.doubleType();
            case \\"booleanType\\": return visitor.booleanType();
            case \\"stringType\\": return visitor.stringType();
            case \\"charType\\": return visitor.charType();
            case \\"listType\\": return visitor.listType(value);
            case \\"mapType\\": return visitor.mapType(value);
            case \\"binaryTreeType\\": return visitor.binaryTreeType();
            case \\"singlyLinkedListType\\": return visitor.singlyLinkedListType();
            case \\"doublyLinkedListType\\": return visitor.doublyLinkedListType();
            default: return visitor._unknown();
        }
    },

    _types: (): VariableType[\\"_type\\"][] => [\\"integerType\\", \\"doubleType\\", \\"booleanType\\", \\"stringType\\", \\"charType\\", \\"listType\\", \\"mapType\\", \\"binaryTreeType\\", \\"singlyLinkedListType\\", \\"doublyLinkedListType\\"],
} as const;
",
                    "name": "VariableType.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../..\\";

export type VariableValue =
    | VariableValue.IntegerValue
    | VariableValue.BooleanValue
    | VariableValue.DoubleValue
    | VariableValue.StringValue
    | VariableValue.CharValue
    | VariableValue.MapValue
    | VariableValue.ListValue
    | VariableValue.BinaryTreeValue
    | VariableValue.SinglyLinkedListValue
    | VariableValue.DoublyLinkedListValue
    | VariableValue.NullValue;

export declare namespace VariableValue {
    interface IntegerValue {
        _type: \\"integerValue\\";
        integerValue: number;
    }

    interface BooleanValue {
        _type: \\"booleanValue\\";
        booleanValue: boolean;
    }

    interface DoubleValue {
        _type: \\"doubleValue\\";
        doubleValue: number;
    }

    interface StringValue {
        _type: \\"stringValue\\";
        stringValue: string;
    }

    interface CharValue {
        _type: \\"charValue\\";
        charValue: string;
    }

    interface MapValue extends model.MapValue {
        _type: \\"mapValue\\";
    }

    interface ListValue {
        _type: \\"listValue\\";
        listValue: VariableValue[];
    }

    interface BinaryTreeValue extends model.BinaryTreeValue {
        _type: \\"binaryTreeValue\\";
    }

    interface SinglyLinkedListValue extends model.SinglyLinkedListValue {
        _type: \\"singlyLinkedListValue\\";
    }

    interface DoublyLinkedListValue extends model.DoublyLinkedListValue {
        _type: \\"doublyLinkedListValue\\";
    }

    interface NullValue {
        _type: \\"nullValue\\";
    }

    export interface _Visitor<Result> {
        integerValue: (value: number) => Result;
        booleanValue: (value: boolean) => Result;
        doubleValue: (value: number) => Result;
        stringValue: (value: string) => Result;
        charValue: (value: string) => Result;
        mapValue: (value: model.MapValue) => Result;
        listValue: (value: VariableValue[]) => Result;
        binaryTreeValue: (value: model.BinaryTreeValue) => Result;
        singlyLinkedListValue: (value: model.SinglyLinkedListValue) => Result;
        doublyLinkedListValue: (value: model.DoublyLinkedListValue) => Result;
        nullValue: () => Result;
        _unknown: () => Result;
    }
}

export const VariableValue = {
    integerValue: (value: number): VariableValue.IntegerValue => ({
        integerValue: value,
        _type: \\"integerValue\\"
    }),

    booleanValue: (value: boolean): VariableValue.BooleanValue => ({
        booleanValue: value,
        _type: \\"booleanValue\\"
    }),

    doubleValue: (value: number): VariableValue.DoubleValue => ({
        doubleValue: value,
        _type: \\"doubleValue\\"
    }),

    stringValue: (value: string): VariableValue.StringValue => ({
        stringValue: value,
        _type: \\"stringValue\\"
    }),

    charValue: (value: string): VariableValue.CharValue => ({
        charValue: value,
        _type: \\"charValue\\"
    }),

    mapValue: (value: model.MapValue): VariableValue.MapValue => ({
        ...value,
        _type: \\"mapValue\\"
    }),

    listValue: (value: VariableValue[]): VariableValue.ListValue => ({
        listValue: value,
        _type: \\"listValue\\"
    }),

    binaryTreeValue: (value: model.BinaryTreeValue): VariableValue.BinaryTreeValue => ({
        ...value,
        _type: \\"binaryTreeValue\\"
    }),

    singlyLinkedListValue: (value: model.SinglyLinkedListValue): VariableValue.SinglyLinkedListValue => ({
        ...value,
        _type: \\"singlyLinkedListValue\\"
    }),

    doublyLinkedListValue: (value: model.DoublyLinkedListValue): VariableValue.DoublyLinkedListValue => ({
        ...value,
        _type: \\"doublyLinkedListValue\\"
    }),

    nullValue: (): VariableValue.NullValue => ({
        _type: \\"nullValue\\"
    }),

    _visit: <Result>(value: VariableValue, visitor: VariableValue._Visitor<Result>): Result => {
        switch (value._type) {
            case \\"integerValue\\": return visitor.integerValue(value.integerValue);
            case \\"booleanValue\\": return visitor.booleanValue(value.booleanValue);
            case \\"doubleValue\\": return visitor.doubleValue(value.doubleValue);
            case \\"stringValue\\": return visitor.stringValue(value.stringValue);
            case \\"charValue\\": return visitor.charValue(value.charValue);
            case \\"mapValue\\": return visitor.mapValue(value);
            case \\"listValue\\": return visitor.listValue(value.listValue);
            case \\"binaryTreeValue\\": return visitor.binaryTreeValue(value);
            case \\"singlyLinkedListValue\\": return visitor.singlyLinkedListValue(value);
            case \\"doublyLinkedListValue\\": return visitor.doublyLinkedListValue(value);
            case \\"nullValue\\": return visitor.nullValue();
            default: return visitor._unknown();
        }
    },

    _types: (): VariableValue[\\"_type\\"][] => [\\"integerValue\\", \\"booleanValue\\", \\"doubleValue\\", \\"stringValue\\", \\"charValue\\", \\"mapValue\\", \\"listValue\\", \\"binaryTreeValue\\", \\"singlyLinkedListValue\\", \\"doublyLinkedListValue\\", \\"nullValue\\"],
} as const;
",
                    "name": "VariableValue.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export * from \\"./BinaryTreeNodeAndTreeValue\\";
export * from \\"./BinaryTreeNodeValue\\";
export * from \\"./BinaryTreeValue\\";
export * from \\"./DebugKeyValuePairs\\";
export * from \\"./DebugMapValue\\";
export * from \\"./DebugVariableValue\\";
export * from \\"./DoublyLinkedListNodeAndListValue\\";
export * from \\"./DoublyLinkedListNodeValue\\";
export * from \\"./DoublyLinkedListValue\\";
export * from \\"./FileInfo\\";
export * from \\"./GenericValue\\";
export * from \\"./KeyValuePair\\";
export * from \\"./Language\\";
export * from \\"./ListType\\";
export * from \\"./MapType\\";
export * from \\"./MapValue\\";
export * from \\"./NodeId\\";
export * from \\"./ProblemId\\";
export * from \\"./SinglyLinkedListNodeAndListValue\\";
export * from \\"./SinglyLinkedListNodeValue\\";
export * from \\"./SinglyLinkedListValue\\";
export * from \\"./TestCase\\";
export * from \\"./TestCaseWithExpectedResult\\";
export * from \\"./UserId\\";
export * from \\"./VariableType\\";
export * from \\"./VariableValue\\";
",
                    "name": "index.ts",
                    "type": "file",
                  },
                ],
                "name": "types",
                "type": "directory",
              },
            ],
            "name": "commons",
            "type": "directory",
          },
          Object {
            "contents": Array [
              Object {
                "contents": "export * from \\"./service-types\\";
",
                "name": "index.ts",
                "type": "file",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": Array [
                      Object {
                        "contents": "import { ProblemId } from \\"../../../commons/types/ProblemId\\";

export type GetHomepageProblemsResponse = GetHomepageProblemsResponse.SuccessResponse | GetHomepageProblemsResponse.ErrorResponse;

namespace GetHomepageProblemsResponse {
    export interface SuccessResponse {
        ok: true;
        statusCode: number;
        body: ProblemId[];
    }

    export interface ErrorResponse {
        ok: false;
        statusCode: number;
    }
}
",
                        "name": "GetHomepageProblemsResponse.ts.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "export type SetHomepageProblemsResponse = SetHomepageProblemsResponse.SuccessResponse | SetHomepageProblemsResponse.ErrorResponse;

namespace SetHomepageProblemsResponse {
    export interface SuccessResponse {
        ok: true;
        statusCode: number;
    }

    export interface ErrorResponse {
        ok: false;
        statusCode: number;
    }
}
",
                        "name": "SetHomepageProblemsResponse.ts.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "export * from \\"./GetHomepageProblemsResponse.ts\\";
export * from \\"./SetHomepageProblemsResponse.ts\\";
",
                        "name": "index.ts",
                        "type": "file",
                      },
                    ],
                    "name": "HomepageProblemService",
                    "type": "directory",
                  },
                  Object {
                    "contents": "export * from \\"./HomepageProblemService\\";
",
                    "name": "index.ts",
                    "type": "file",
                  },
                ],
                "name": "service-types",
                "type": "directory",
              },
            ],
            "name": "homepage",
            "type": "directory",
          },
          Object {
            "contents": "export * from \\"./admin\\";
export * from \\"./commons\\";
export * from \\"./homepage\\";
export * from \\"./langserver\\";
export * from \\"./migration\\";
export * from \\"./playlist\\";
export * from \\"./problem\\";
export * from \\"./problemV2\\";
export * from \\"./submission\\";
export * from \\"./sysprop\\";
",
            "name": "index.ts",
            "type": "file",
          },
          Object {
            "contents": Array [
              Object {
                "contents": "export * from \\"./types\\";
",
                "name": "index.ts",
                "type": "file",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "import { any } from \\"./any\\";

export interface LangServerRequest {
    request: any;
}
",
                    "name": "LangServerRequest.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { any } from \\"./any\\";

export interface LangServerResponse {
    response: any;
}
",
                    "name": "LangServerResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export * from \\"./LangServerRequest\\";
export * from \\"./LangServerResponse\\";
",
                    "name": "index.ts",
                    "type": "file",
                  },
                ],
                "name": "types",
                "type": "directory",
              },
            ],
            "name": "langserver",
            "type": "directory",
          },
          Object {
            "contents": Array [
              Object {
                "contents": "export * from \\"./service-types\\";
export * from \\"./types\\";
",
                "name": "index.ts",
                "type": "file",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": Array [
                      Object {
                        "contents": "import { Migration } from \\"../../types/Migration\\";

export type GetAttemptedMigrationsResponse = GetAttemptedMigrationsResponse.SuccessResponse | GetAttemptedMigrationsResponse.ErrorResponse;

namespace GetAttemptedMigrationsResponse {
    export interface SuccessResponse {
        ok: true;
        statusCode: number;
        body: Migration[];
    }

    export interface ErrorResponse {
        ok: false;
        statusCode: number;
    }
}
",
                        "name": "GetAttemptedMigrationsResponse.ts.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "export * from \\"./GetAttemptedMigrationsResponse.ts\\";
",
                        "name": "index.ts",
                        "type": "file",
                      },
                    ],
                    "name": "MigrationInfoService",
                    "type": "directory",
                  },
                  Object {
                    "contents": "export * from \\"./MigrationInfoService\\";
",
                    "name": "index.ts",
                    "type": "file",
                  },
                ],
                "name": "service-types",
                "type": "directory",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "import { MigrationStatus } from \\"./MigrationStatus\\";

export interface Migration {
    name: string;
    status: MigrationStatus;
}
",
                    "name": "Migration.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export type MigrationStatus =
    | \\"RUNNING\\"
    | \\"FAILED\\"
    | \\"FINISHED\\";

export const MigrationStatus = {
    Running: \\"RUNNING\\",
    Failed: \\"FAILED\\",
    Finished: \\"FINISHED\\",

    _visit: <Result>(value: MigrationStatus, visitor: MigrationStatus._Visitor<Result>): Result => {
        switch (value) {
            case MigrationStatus.Running: return visitor.running();
            case MigrationStatus.Failed: return visitor.failed();
            case MigrationStatus.Finished: return visitor.finished();
            default: return visitor._unknown();
        }
    },

    _values: (): MigrationStatus[] => [MigrationStatus.Running, MigrationStatus.Failed, MigrationStatus.Finished],
} as const;

export declare namespace MigrationStatus {
    type Running = \\"RUNNING\\";
    type Failed = \\"FAILED\\";
    type Finished = \\"FINISHED\\";

    export interface _Visitor<Result> {
        running: () => Result;
        failed: () => Result;
        finished: () => Result;
        _unknown: () => Result;
    }
}
",
                    "name": "MigrationStatus.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export * from \\"./Migration\\";
export * from \\"./MigrationStatus\\";
",
                    "name": "index.ts",
                    "type": "file",
                  },
                ],
                "name": "types",
                "type": "directory",
              },
            ],
            "name": "migration",
            "type": "directory",
          },
          Object {
            "contents": Array [
              Object {
                "contents": "export * from \\"./service-types\\";
export * from \\"./types\\";
",
                "name": "index.ts",
                "type": "file",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": Array [
                      Object {
                        "contents": "import { ProblemId } from \\"../../../commons/types/ProblemId\\";

export interface CreatePlaylistRequest {
    name: string;
    problems: ProblemId[];
}
",
                        "name": "CreatePlaylistRequest.ts.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { Playlist } from \\"../../types/Playlist\\";

export type CreatePlaylistResponse = CreatePlaylistResponse.SuccessResponse | CreatePlaylistResponse.ErrorResponse;

namespace CreatePlaylistResponse {
    export interface SuccessResponse {
        ok: true;
        statusCode: number;
        body: Playlist;
    }

    export interface ErrorResponse {
        ok: false;
        statusCode: number;
    }
}
",
                        "name": "CreatePlaylistResponse.ts.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { PlaylistId } from \\"../../types/PlaylistId\\";

export interface DeletePlaylistRequest {
    playlistId: PlaylistId;
}
",
                        "name": "DeletePlaylistRequest.ts.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "export type DeletePlaylistResponse = DeletePlaylistResponse.SuccessResponse | DeletePlaylistResponse.ErrorResponse;

namespace DeletePlaylistResponse {
    export interface SuccessResponse {
        ok: true;
        statusCode: number;
    }

    export interface ErrorResponse {
        ok: false;
        statusCode: number;
    }
}
",
                        "name": "DeletePlaylistResponse.ts.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { PlaylistId } from \\"../../types/PlaylistId\\";

export interface GetPlaylistRequest {
    playlistId: PlaylistId;
}
",
                        "name": "GetPlaylistRequest.ts.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { Playlist } from \\"../../types/Playlist\\";

export type GetPlaylistResponse = GetPlaylistResponse.SuccessResponse | GetPlaylistResponse.ErrorResponse;

namespace GetPlaylistResponse {
    export interface SuccessResponse {
        ok: true;
        statusCode: number;
        body: Playlist;
    }

    export interface ErrorResponse {
        ok: false;
        statusCode: number;
    }
}
",
                        "name": "GetPlaylistResponse.ts.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { Playlist } from \\"../../types/Playlist\\";

export type GetPlaylistsResponse = GetPlaylistsResponse.SuccessResponse | GetPlaylistsResponse.ErrorResponse;

namespace GetPlaylistsResponse {
    export interface SuccessResponse {
        ok: true;
        statusCode: number;
        body: Playlist[];
    }

    export interface ErrorResponse {
        ok: false;
        statusCode: number;
    }
}
",
                        "name": "GetPlaylistsResponse.ts.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { PlaylistId } from \\"../../types/PlaylistId\\";
import { UpdatePlaylistRequestBody } from \\"./UpdatePlaylistRequestBody.ts\\";

export interface UpdatePlaylistRequest {
    playlistId: PlaylistId;
    body: UpdatePlaylistRequestBody;
}
",
                        "name": "UpdatePlaylistRequest.ts.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { ProblemId } from \\"../../../commons/types/ProblemId\\";

export interface UpdatePlaylistRequestBody {
    name: string;
    problems: ProblemId[];
}
",
                        "name": "UpdatePlaylistRequestBody.ts.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { Playlist } from \\"../../types/Playlist\\";

export type UpdatePlaylistResponse = UpdatePlaylistResponse.SuccessResponse | UpdatePlaylistResponse.ErrorResponse;

namespace UpdatePlaylistResponse {
    export interface SuccessResponse {
        ok: true;
        statusCode: number;
        body: Playlist;
    }

    export interface ErrorResponse {
        ok: false;
        statusCode: number;
    }
}
",
                        "name": "UpdatePlaylistResponse.ts.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "export * from \\"./CreatePlaylistRequest.ts\\";
export * from \\"./CreatePlaylistResponse.ts\\";
export * from \\"./DeletePlaylistRequest.ts\\";
export * from \\"./DeletePlaylistResponse.ts\\";
export * from \\"./GetPlaylistRequest.ts\\";
export * from \\"./GetPlaylistResponse.ts\\";
export * from \\"./GetPlaylistsResponse.ts\\";
export * from \\"./UpdatePlaylistRequest.ts\\";
export * from \\"./UpdatePlaylistRequestBody.ts\\";
export * from \\"./UpdatePlaylistResponse.ts\\";
",
                        "name": "index.ts",
                        "type": "file",
                      },
                    ],
                    "name": "PlaylistCrudService",
                    "type": "directory",
                  },
                  Object {
                    "contents": "export * from \\"./PlaylistCrudService\\";
",
                    "name": "index.ts",
                    "type": "file",
                  },
                ],
                "name": "service-types",
                "type": "directory",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "import { PlaylistId } from \\"./PlaylistId\\";
import { ProblemId } from \\"../../commons/types/ProblemId\\";
import { UserId } from \\"../../commons/types/UserId\\";

export interface Playlist {
    playlistId: PlaylistId;
    name: string;
    problems: ProblemId[];
    ownerId: UserId;
}
",
                    "name": "Playlist.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export type PlaylistId = string & {
    __PlaylistId: void;
};

export const PlaylistId = {
    of: (value: string): PlaylistId => value as PlaylistId
};
",
                    "name": "PlaylistId.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export * from \\"./Playlist\\";
export * from \\"./PlaylistId\\";
",
                    "name": "index.ts",
                    "type": "file",
                  },
                ],
                "name": "types",
                "type": "directory",
              },
            ],
            "name": "playlist",
            "type": "directory",
          },
          Object {
            "contents": Array [
              Object {
                "contents": "export * from \\"./service-types\\";
export * from \\"./types\\";
",
                "name": "index.ts",
                "type": "file",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": Array [
                      Object {
                        "contents": "import { CreateProblemRequest } from \\"../../types/CreateProblemRequest\\";

export interface CreateProblemRequest {
    request: CreateProblemRequest;
}
",
                        "name": "CreateProblemRequest.ts.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { CreateProblemResponse } from \\"../../types/CreateProblemResponse\\";

export type CreateProblemResponse = CreateProblemResponse.SuccessResponse | CreateProblemResponse.ErrorResponse;

namespace CreateProblemResponse {
    export interface SuccessResponse {
        ok: true;
        statusCode: number;
        body: CreateProblemResponse;
    }

    export interface ErrorResponse {
        ok: false;
        statusCode: number;
    }
}
",
                        "name": "CreateProblemResponse.ts.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { ProblemId } from \\"../../../commons/types/ProblemId\\";

export interface DeleteProblemRequest {
    problemId: ProblemId;
}
",
                        "name": "DeleteProblemRequest.ts.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "export type DeleteProblemResponse = DeleteProblemResponse.SuccessResponse | DeleteProblemResponse.ErrorResponse;

namespace DeleteProblemResponse {
    export interface SuccessResponse {
        ok: true;
        statusCode: number;
    }

    export interface ErrorResponse {
        ok: false;
        statusCode: number;
    }
}
",
                        "name": "DeleteProblemResponse.ts.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { GetDefaultStarterFilesRequest } from \\"../../types/GetDefaultStarterFilesRequest\\";

export interface GetDefaultStarterFilesRequest {
    request: GetDefaultStarterFilesRequest;
}
",
                        "name": "GetDefaultStarterFilesRequest.ts.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { GetDefaultStarterFilesResponse } from \\"../../types/GetDefaultStarterFilesResponse\\";

export type GetDefaultStarterFilesResponse = GetDefaultStarterFilesResponse.SuccessResponse | GetDefaultStarterFilesResponse.ErrorResponse;

namespace GetDefaultStarterFilesResponse {
    export interface SuccessResponse {
        ok: true;
        statusCode: number;
        body: GetDefaultStarterFilesResponse;
    }

    export interface ErrorResponse {
        ok: false;
        statusCode: number;
    }
}
",
                        "name": "GetDefaultStarterFilesResponse.ts.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { ProblemId } from \\"../../../commons/types/ProblemId\\";
import { CreateProblemRequest } from \\"../../types/CreateProblemRequest\\";

export interface UpdateProblemRequest {
    problemId: ProblemId;
    request: CreateProblemRequest;
}
",
                        "name": "UpdateProblemRequest.ts.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { UpdateProblemResponse } from \\"../../types/UpdateProblemResponse\\";

export type UpdateProblemResponse = UpdateProblemResponse.SuccessResponse | UpdateProblemResponse.ErrorResponse;

namespace UpdateProblemResponse {
    export interface SuccessResponse {
        ok: true;
        statusCode: number;
        body: UpdateProblemResponse;
    }

    export interface ErrorResponse {
        ok: false;
        statusCode: number;
    }
}
",
                        "name": "UpdateProblemResponse.ts.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "export * from \\"./CreateProblemRequest.ts\\";
export * from \\"./CreateProblemResponse.ts\\";
export * from \\"./DeleteProblemRequest.ts\\";
export * from \\"./DeleteProblemResponse.ts\\";
export * from \\"./GetDefaultStarterFilesRequest.ts\\";
export * from \\"./GetDefaultStarterFilesResponse.ts\\";
export * from \\"./UpdateProblemRequest.ts\\";
export * from \\"./UpdateProblemResponse.ts\\";
",
                        "name": "index.ts",
                        "type": "file",
                      },
                    ],
                    "name": "ProblemCrudService",
                    "type": "directory",
                  },
                  Object {
                    "contents": Array [
                      Object {
                        "contents": "import { ProblemId } from \\"../../../commons/types/ProblemId\\";
import { TestCase } from \\"../../../commons/types/TestCase\\";

export interface GetExpectedResultRequest {
    problemId: ProblemId;
    testCase: TestCase;
}
",
                        "name": "GetExpectedResultRequest.ts.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { TestCaseWithExpectedResult } from \\"../../../commons/types/TestCaseWithExpectedResult\\";

export type GetExpectedResultResponse = GetExpectedResultResponse.SuccessResponse | GetExpectedResultResponse.ErrorResponse;

namespace GetExpectedResultResponse {
    export interface SuccessResponse {
        ok: true;
        statusCode: number;
        body: TestCaseWithExpectedResult;
    }

    export interface ErrorResponse {
        ok: false;
        statusCode: number;
    }
}
",
                        "name": "GetExpectedResultResponse.ts.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { ProblemId } from \\"../../../commons/types/ProblemId\\";

export interface GetLatestProblemRequest {
    problemId: ProblemId;
}
",
                        "name": "GetLatestProblemRequest.ts.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { ProblemInfo } from \\"../../types/ProblemInfo\\";

export type GetLatestProblemResponse = GetLatestProblemResponse.SuccessResponse | GetLatestProblemResponse.ErrorResponse;

namespace GetLatestProblemResponse {
    export interface SuccessResponse {
        ok: true;
        statusCode: number;
        body: ProblemInfo;
    }

    export interface ErrorResponse {
        ok: false;
        statusCode: number;
    }
}
",
                        "name": "GetLatestProblemResponse.ts.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { ProblemId } from \\"../../../commons/types/ProblemId\\";

export interface GetProblemVersionRequest {
    problemId: ProblemId;
    problemVersion: number;
}
",
                        "name": "GetProblemVersionRequest.ts.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { ProblemInfo } from \\"../../types/ProblemInfo\\";

export type GetProblemVersionResponse = GetProblemVersionResponse.SuccessResponse | GetProblemVersionResponse.ErrorResponse;

namespace GetProblemVersionResponse {
    export interface SuccessResponse {
        ok: true;
        statusCode: number;
        body: ProblemInfo;
    }

    export interface ErrorResponse {
        ok: false;
        statusCode: number;
    }
}
",
                        "name": "GetProblemVersionResponse.ts.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { ProblemInfo } from \\"../../types/ProblemInfo\\";

export type GetProblemsResponse = GetProblemsResponse.SuccessResponse | GetProblemsResponse.ErrorResponse;

namespace GetProblemsResponse {
    export interface SuccessResponse {
        ok: true;
        statusCode: number;
        body: ProblemInfo[];
    }

    export interface ErrorResponse {
        ok: false;
        statusCode: number;
    }
}
",
                        "name": "GetProblemsResponse.ts.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "export * from \\"./GetExpectedResultRequest.ts\\";
export * from \\"./GetExpectedResultResponse.ts\\";
export * from \\"./GetLatestProblemRequest.ts\\";
export * from \\"./GetLatestProblemResponse.ts\\";
export * from \\"./GetProblemsResponse.ts\\";
export * from \\"./GetProblemVersionRequest.ts\\";
export * from \\"./GetProblemVersionResponse.ts\\";
",
                        "name": "index.ts",
                        "type": "file",
                      },
                    ],
                    "name": "ProblemInfoService",
                    "type": "directory",
                  },
                  Object {
                    "contents": "export * from \\"./ProblemCrudService\\";
export * from \\"./ProblemInfoService\\";
",
                    "name": "index.ts",
                    "type": "file",
                  },
                ],
                "name": "service-types",
                "type": "directory",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "import * as model from \\"../..\\";

export type CreateProblemError =
    | CreateProblemError.Generic;

export declare namespace CreateProblemError {
    interface Generic extends model.GenericCreateProblemError {
        _type: \\"generic\\";
    }

    export interface _Visitor<Result> {
        generic: (value: model.GenericCreateProblemError) => Result;
        _unknown: () => Result;
    }
}

export const CreateProblemError = {
    generic: (value: model.GenericCreateProblemError): CreateProblemError.Generic => ({
        ...value,
        _type: \\"generic\\"
    }),

    _visit: <Result>(value: CreateProblemError, visitor: CreateProblemError._Visitor<Result>): Result => {
        switch (value._type) {
            case \\"generic\\": return visitor.generic(value);
            default: return visitor._unknown();
        }
    },

    _types: (): CreateProblemError[\\"_type\\"][] => [\\"generic\\"],
} as const;
",
                    "name": "CreateProblemError.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { ProblemDescription } from \\"./ProblemDescription\\";
import { Language } from \\"../../commons/types/Language\\";
import { ProblemFiles } from \\"./ProblemFiles\\";
import { VariableTypeAndName } from \\"./VariableTypeAndName\\";
import { VariableType } from \\"../../commons/types/VariableType\\";
import { TestCaseWithExpectedResult } from \\"../../commons/types/TestCaseWithExpectedResult\\";

export interface CreateProblemRequest {
    problemName: string;
    problemDescription: ProblemDescription;
    files: Record<Language, ProblemFiles>;
    inputParams: VariableTypeAndName[];
    outputType: VariableType;
    testcases: TestCaseWithExpectedResult[];
    methodName: string;
}
",
                    "name": "CreateProblemRequest.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../..\\";

export type CreateProblemResponse =
    | CreateProblemResponse.Success
    | CreateProblemResponse.Error;

export declare namespace CreateProblemResponse {
    interface Success {
        _type: \\"success\\";
        success: model.ProblemId;
    }

    interface Error {
        _type: \\"error\\";
        error: model.CreateProblemError;
    }

    export interface _Visitor<Result> {
        success: (value: model.ProblemId) => Result;
        error: (value: model.CreateProblemError) => Result;
        _unknown: () => Result;
    }
}

export const CreateProblemResponse = {
    success: (value: model.ProblemId): CreateProblemResponse.Success => ({
        success: value,
        _type: \\"success\\"
    }),

    error: (value: model.CreateProblemError): CreateProblemResponse.Error => ({
        error: value,
        _type: \\"error\\"
    }),

    _visit: <Result>(value: CreateProblemResponse, visitor: CreateProblemResponse._Visitor<Result>): Result => {
        switch (value._type) {
            case \\"success\\": return visitor.success(value.success);
            case \\"error\\": return visitor.error(value.error);
            default: return visitor._unknown();
        }
    },

    _types: (): CreateProblemResponse[\\"_type\\"][] => [\\"success\\", \\"error\\"],
} as const;
",
                    "name": "CreateProblemResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export interface GenericCreateProblemError {
    message: string;
    type: string;
    stacktrace: string;
}
",
                    "name": "GenericCreateProblemError.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { VariableTypeAndName } from \\"./VariableTypeAndName\\";
import { VariableType } from \\"../../commons/types/VariableType\\";

export interface GetDefaultStarterFilesRequest {
    inputParams: VariableTypeAndName[];
    outputType: VariableType;
    methodName: string;
}
",
                    "name": "GetDefaultStarterFilesRequest.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { Language } from \\"../../commons/types/Language\\";
import { ProblemFiles } from \\"./ProblemFiles\\";

export interface GetDefaultStarterFilesResponse {
    files: Record<Language, ProblemFiles>;
}
",
                    "name": "GetDefaultStarterFilesResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { ProblemDescriptionBoard } from \\"./ProblemDescriptionBoard\\";

export interface ProblemDescription {
    boards: ProblemDescriptionBoard[];
}
",
                    "name": "ProblemDescription.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../..\\";

export type ProblemDescriptionBoard =
    | ProblemDescriptionBoard.Html
    | ProblemDescriptionBoard.Variable
    | ProblemDescriptionBoard.TestCaseId;

export declare namespace ProblemDescriptionBoard {
    interface Html {
        _type: \\"html\\";
        html: string;
    }

    interface Variable {
        _type: \\"variable\\";
        variable: model.VariableValue;
    }

    interface TestCaseId {
        _type: \\"testCaseId\\";
        testCaseId: string;
    }

    export interface _Visitor<Result> {
        html: (value: string) => Result;
        variable: (value: model.VariableValue) => Result;
        testCaseId: (value: string) => Result;
        _unknown: () => Result;
    }
}

export const ProblemDescriptionBoard = {
    html: (value: string): ProblemDescriptionBoard.Html => ({
        html: value,
        _type: \\"html\\"
    }),

    variable: (value: model.VariableValue): ProblemDescriptionBoard.Variable => ({
        variable: value,
        _type: \\"variable\\"
    }),

    testCaseId: (value: string): ProblemDescriptionBoard.TestCaseId => ({
        testCaseId: value,
        _type: \\"testCaseId\\"
    }),

    _visit: <Result>(value: ProblemDescriptionBoard, visitor: ProblemDescriptionBoard._Visitor<Result>): Result => {
        switch (value._type) {
            case \\"html\\": return visitor.html(value.html);
            case \\"variable\\": return visitor.variable(value.variable);
            case \\"testCaseId\\": return visitor.testCaseId(value.testCaseId);
            default: return visitor._unknown();
        }
    },

    _types: (): ProblemDescriptionBoard[\\"_type\\"][] => [\\"html\\", \\"variable\\", \\"testCaseId\\"],
} as const;
",
                    "name": "ProblemDescriptionBoard.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { FileInfo } from \\"../../commons/types/FileInfo\\";

export interface ProblemFiles {
    solutionFile: FileInfo;
    readOnlyFiles: FileInfo[];
}
",
                    "name": "ProblemFiles.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { ProblemId } from \\"../../commons/types/ProblemId\\";
import { ProblemDescription } from \\"./ProblemDescription\\";
import { Language } from \\"../../commons/types/Language\\";
import { ProblemFiles } from \\"./ProblemFiles\\";
import { VariableTypeAndName } from \\"./VariableTypeAndName\\";
import { VariableType } from \\"../../commons/types/VariableType\\";
import { TestCaseWithExpectedResult } from \\"../../commons/types/TestCaseWithExpectedResult\\";

export interface ProblemInfo {
    problemId: ProblemId;
    problemDescription: ProblemDescription;
    problemName: string;
    problemVersion: number;
    files: Record<Language, ProblemFiles>;
    inputParams: VariableTypeAndName[];
    outputType: VariableType;
    testcases: TestCaseWithExpectedResult[];
    methodName: string;
    supportsCustomTestCases: boolean;
}
",
                    "name": "ProblemInfo.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export interface UpdateProblemResponse {
    problemVersion: number;
}
",
                    "name": "UpdateProblemResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { VariableType } from \\"../../commons/types/VariableType\\";

export interface VariableTypeAndName {
    variableType: VariableType;
    name: string;
}
",
                    "name": "VariableTypeAndName.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export * from \\"./CreateProblemError\\";
export * from \\"./CreateProblemRequest\\";
export * from \\"./CreateProblemResponse\\";
export * from \\"./GenericCreateProblemError\\";
export * from \\"./GetDefaultStarterFilesRequest\\";
export * from \\"./GetDefaultStarterFilesResponse\\";
export * from \\"./ProblemDescription\\";
export * from \\"./ProblemDescriptionBoard\\";
export * from \\"./ProblemFiles\\";
export * from \\"./ProblemInfo\\";
export * from \\"./UpdateProblemResponse\\";
export * from \\"./VariableTypeAndName\\";
",
                    "name": "index.ts",
                    "type": "file",
                  },
                ],
                "name": "types",
                "type": "directory",
              },
            ],
            "name": "problem",
            "type": "directory",
          },
          Object {
            "contents": Array [
              Object {
                "contents": "export * from \\"./service-types\\";
export * from \\"./types\\";
",
                "name": "index.ts",
                "type": "file",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": Array [
                      Object {
                        "contents": "import { CreateProblemRequestV2 } from \\"../../types/CreateProblemRequestV2\\";

export interface CreateProblemRequest {
    request: CreateProblemRequestV2;
}
",
                        "name": "CreateProblemRequest.ts.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { CreateProblemResponse } from \\"../../../problem/types/CreateProblemResponse\\";

export type CreateProblemResponse = CreateProblemResponse.SuccessResponse | CreateProblemResponse.ErrorResponse;

namespace CreateProblemResponse {
    export interface SuccessResponse {
        ok: true;
        statusCode: number;
        body: CreateProblemResponse;
    }

    export interface ErrorResponse {
        ok: false;
        statusCode: number;
    }
}
",
                        "name": "CreateProblemResponse.ts.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { ProblemId } from \\"../../../commons/types/ProblemId\\";

export interface DeleteProblemRequest {
    problemId: ProblemId;
}
",
                        "name": "DeleteProblemRequest.ts.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "export type DeleteProblemResponse = DeleteProblemResponse.SuccessResponse | DeleteProblemResponse.ErrorResponse;

namespace DeleteProblemResponse {
    export interface SuccessResponse {
        ok: true;
        statusCode: number;
    }

    export interface ErrorResponse {
        ok: false;
        statusCode: number;
    }
}
",
                        "name": "DeleteProblemResponse.ts.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { GetBasicSolutionFileRequest } from \\"../../types/GetBasicSolutionFileRequest\\";

export interface GetBasicSolutionFileRequest {
    request: GetBasicSolutionFileRequest;
}
",
                        "name": "GetBasicSolutionFileRequest.ts.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { GetBasicSolutionFileResponse } from \\"../../types/GetBasicSolutionFileResponse\\";

export type GetBasicSolutionFileResponse = GetBasicSolutionFileResponse.SuccessResponse | GetBasicSolutionFileResponse.ErrorResponse;

namespace GetBasicSolutionFileResponse {
    export interface SuccessResponse {
        ok: true;
        statusCode: number;
        body: GetBasicSolutionFileResponse;
    }

    export interface ErrorResponse {
        ok: false;
        statusCode: number;
    }
}
",
                        "name": "GetBasicSolutionFileResponse.ts.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { Language } from \\"../../../commons/types/Language\\";

export type GetDefaultDirectoryForProblemFilesResponse = GetDefaultDirectoryForProblemFilesResponse.SuccessResponse | GetDefaultDirectoryForProblemFilesResponse.ErrorResponse;

namespace GetDefaultDirectoryForProblemFilesResponse {
    export interface SuccessResponse {
        ok: true;
        statusCode: number;
        body: Record<Language, string>;
    }

    export interface ErrorResponse {
        ok: false;
        statusCode: number;
    }
}
",
                        "name": "GetDefaultDirectoryForProblemFilesResponse.ts.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { GetFunctionSignatureRequest } from \\"../../types/GetFunctionSignatureRequest\\";

export interface GetFunctionSignatureRequest {
    request: GetFunctionSignatureRequest;
}
",
                        "name": "GetFunctionSignatureRequest.ts.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { GetFunctionSignatureResponse } from \\"../../types/GetFunctionSignatureResponse\\";

export type GetFunctionSignatureResponse = GetFunctionSignatureResponse.SuccessResponse | GetFunctionSignatureResponse.ErrorResponse;

namespace GetFunctionSignatureResponse {
    export interface SuccessResponse {
        ok: true;
        statusCode: number;
        body: GetFunctionSignatureResponse;
    }

    export interface ErrorResponse {
        ok: false;
        statusCode: number;
    }
}
",
                        "name": "GetFunctionSignatureResponse.ts.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { GetGeneratedTestCaseFileRequest } from \\"../../types/GetGeneratedTestCaseFileRequest\\";

export interface GetGeneratedTestCaseFileRequest {
    request: GetGeneratedTestCaseFileRequest;
}
",
                        "name": "GetGeneratedTestCaseFileRequest.ts.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { Language } from \\"../../../commons/types/Language\\";
import { FileInfoV2 } from \\"../../types/FileInfoV2\\";

export type GetGeneratedTestCaseFileResponse = GetGeneratedTestCaseFileResponse.SuccessResponse | GetGeneratedTestCaseFileResponse.ErrorResponse;

namespace GetGeneratedTestCaseFileResponse {
    export interface SuccessResponse {
        ok: true;
        statusCode: number;
        body: Record<Language, FileInfoV2>;
    }

    export interface ErrorResponse {
        ok: false;
        statusCode: number;
    }
}
",
                        "name": "GetGeneratedTestCaseFileResponse.ts.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { GetGeneratedTestCaseTemplateFileRequest } from \\"../../types/GetGeneratedTestCaseTemplateFileRequest\\";

export interface GetGeneratedTestCaseTemplateFileRequest {
    request: GetGeneratedTestCaseTemplateFileRequest;
}
",
                        "name": "GetGeneratedTestCaseTemplateFileRequest.ts.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { Language } from \\"../../../commons/types/Language\\";
import { FileInfoV2 } from \\"../../types/FileInfoV2\\";

export type GetGeneratedTestCaseTemplateFileResponse = GetGeneratedTestCaseTemplateFileResponse.SuccessResponse | GetGeneratedTestCaseTemplateFileResponse.ErrorResponse;

namespace GetGeneratedTestCaseTemplateFileResponse {
    export interface SuccessResponse {
        ok: true;
        statusCode: number;
        body: Record<Language, FileInfoV2>;
    }

    export interface ErrorResponse {
        ok: false;
        statusCode: number;
    }
}
",
                        "name": "GetGeneratedTestCaseTemplateFileResponse.ts.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { ProblemId } from \\"../../../commons/types/ProblemId\\";
import { CreateProblemRequestV2 } from \\"../../types/CreateProblemRequestV2\\";

export interface UpdateProblemRequest {
    problemId: ProblemId;
    request: CreateProblemRequestV2;
}
",
                        "name": "UpdateProblemRequest.ts.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { UpdateProblemResponse } from \\"../../../problem/types/UpdateProblemResponse\\";

export type UpdateProblemResponse = UpdateProblemResponse.SuccessResponse | UpdateProblemResponse.ErrorResponse;

namespace UpdateProblemResponse {
    export interface SuccessResponse {
        ok: true;
        statusCode: number;
        body: UpdateProblemResponse;
    }

    export interface ErrorResponse {
        ok: false;
        statusCode: number;
    }
}
",
                        "name": "UpdateProblemResponse.ts.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "export * from \\"./CreateProblemRequest.ts\\";
export * from \\"./CreateProblemResponse.ts\\";
export * from \\"./DeleteProblemRequest.ts\\";
export * from \\"./DeleteProblemResponse.ts\\";
export * from \\"./GetBasicSolutionFileRequest.ts\\";
export * from \\"./GetBasicSolutionFileResponse.ts\\";
export * from \\"./GetDefaultDirectoryForProblemFilesResponse.ts\\";
export * from \\"./GetFunctionSignatureRequest.ts\\";
export * from \\"./GetFunctionSignatureResponse.ts\\";
export * from \\"./GetGeneratedTestCaseFileRequest.ts\\";
export * from \\"./GetGeneratedTestCaseFileResponse.ts\\";
export * from \\"./GetGeneratedTestCaseTemplateFileRequest.ts\\";
export * from \\"./GetGeneratedTestCaseTemplateFileResponse.ts\\";
export * from \\"./UpdateProblemRequest.ts\\";
export * from \\"./UpdateProblemResponse.ts\\";
",
                        "name": "index.ts",
                        "type": "file",
                      },
                    ],
                    "name": "ProblemCrudServiceV2",
                    "type": "directory",
                  },
                  Object {
                    "contents": Array [
                      Object {
                        "contents": "import { ProblemId } from \\"../../../commons/types/ProblemId\\";

export interface GetLatestProblemRequest {
    problemId: ProblemId;
}
",
                        "name": "GetLatestProblemRequest.ts.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { ProblemInfoV2 } from \\"../../types/ProblemInfoV2\\";

export type GetLatestProblemResponse = GetLatestProblemResponse.SuccessResponse | GetLatestProblemResponse.ErrorResponse;

namespace GetLatestProblemResponse {
    export interface SuccessResponse {
        ok: true;
        statusCode: number;
        body: ProblemInfoV2;
    }

    export interface ErrorResponse {
        ok: false;
        statusCode: number;
    }
}
",
                        "name": "GetLatestProblemResponse.ts.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { LightweightProblemInfoV2 } from \\"../../types/LightweightProblemInfoV2\\";

export type GetLightweightProblemsResponse = GetLightweightProblemsResponse.SuccessResponse | GetLightweightProblemsResponse.ErrorResponse;

namespace GetLightweightProblemsResponse {
    export interface SuccessResponse {
        ok: true;
        statusCode: number;
        body: LightweightProblemInfoV2[];
    }

    export interface ErrorResponse {
        ok: false;
        statusCode: number;
    }
}
",
                        "name": "GetLightweightProblemsResponse.ts.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { ProblemId } from \\"../../../commons/types/ProblemId\\";

export interface GetProblemVersionRequest {
    problemId: ProblemId;
    problemVersion: number;
}
",
                        "name": "GetProblemVersionRequest.ts.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { ProblemInfoV2 } from \\"../../types/ProblemInfoV2\\";

export type GetProblemVersionResponse = GetProblemVersionResponse.SuccessResponse | GetProblemVersionResponse.ErrorResponse;

namespace GetProblemVersionResponse {
    export interface SuccessResponse {
        ok: true;
        statusCode: number;
        body: ProblemInfoV2;
    }

    export interface ErrorResponse {
        ok: false;
        statusCode: number;
    }
}
",
                        "name": "GetProblemVersionResponse.ts.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { ProblemInfoV2 } from \\"../../types/ProblemInfoV2\\";

export type GetProblemsResponse = GetProblemsResponse.SuccessResponse | GetProblemsResponse.ErrorResponse;

namespace GetProblemsResponse {
    export interface SuccessResponse {
        ok: true;
        statusCode: number;
        body: ProblemInfoV2[];
    }

    export interface ErrorResponse {
        ok: false;
        statusCode: number;
    }
}
",
                        "name": "GetProblemsResponse.ts.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "export * from \\"./GetLatestProblemRequest.ts\\";
export * from \\"./GetLatestProblemResponse.ts\\";
export * from \\"./GetLightweightProblemsResponse.ts\\";
export * from \\"./GetProblemsResponse.ts\\";
export * from \\"./GetProblemVersionRequest.ts\\";
export * from \\"./GetProblemVersionResponse.ts\\";
",
                        "name": "index.ts",
                        "type": "file",
                      },
                    ],
                    "name": "ProblemInfoServicV2",
                    "type": "directory",
                  },
                  Object {
                    "contents": "export * from \\"./ProblemCrudServiceV2\\";
export * from \\"./ProblemInfoServicV2\\";
",
                    "name": "index.ts",
                    "type": "file",
                  },
                ],
                "name": "service-types",
                "type": "directory",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "import * as model from \\"../..\\";

export type AssertCorrectnessCheck =
    | AssertCorrectnessCheck.DeepEquality
    | AssertCorrectnessCheck.Custom;

export declare namespace AssertCorrectnessCheck {
    interface DeepEquality extends model.DeepEqualityCorrectnessCheck {
        _type: \\"deepEquality\\";
    }

    interface Custom extends model.VoidFunctionDefinitionThatTakesActualResult {
        _type: \\"custom\\";
    }

    export interface _Visitor<Result> {
        deepEquality: (value: model.DeepEqualityCorrectnessCheck) => Result;
        custom: (value: model.VoidFunctionDefinitionThatTakesActualResult) => Result;
        _unknown: () => Result;
    }
}

export const AssertCorrectnessCheck = {
    deepEquality: (value: model.DeepEqualityCorrectnessCheck): AssertCorrectnessCheck.DeepEquality => ({
        ...value,
        _type: \\"deepEquality\\"
    }),

    custom: (value: model.VoidFunctionDefinitionThatTakesActualResult): AssertCorrectnessCheck.Custom => ({
        ...value,
        _type: \\"custom\\"
    }),

    _visit: <Result>(value: AssertCorrectnessCheck, visitor: AssertCorrectnessCheck._Visitor<Result>): Result => {
        switch (value._type) {
            case \\"deepEquality\\": return visitor.deepEquality(value);
            case \\"custom\\": return visitor.custom(value);
            default: return visitor._unknown();
        }
    },

    _types: (): AssertCorrectnessCheck[\\"_type\\"][] => [\\"deepEquality\\", \\"custom\\"],
} as const;
",
                    "name": "AssertCorrectnessCheck.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { NonVoidFunctionSignature } from \\"./NonVoidFunctionSignature\\";
import { Language } from \\"../../commons/types/Language\\";
import { Files } from \\"./Files\\";
import { BasicTestCaseTemplate } from \\"./BasicTestCaseTemplate\\";

export interface BasicCustomFiles {
    methodName: string;
    signature: NonVoidFunctionSignature;
    additionalFiles: Record<Language, Files>;
    basicTestCaseTemplate: BasicTestCaseTemplate;
}
",
                    "name": "BasicCustomFiles.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { TestCaseTemplateId } from \\"./TestCaseTemplateId\\";
import { TestCaseImplementationDescription } from \\"./TestCaseImplementationDescription\\";
import { ParameterId } from \\"./ParameterId\\";

export interface BasicTestCaseTemplate {
    templateId: TestCaseTemplateId;
    name: string;
    description: TestCaseImplementationDescription;
    expectedValueParameterId: ParameterId;
}
",
                    "name": "BasicTestCaseTemplate.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { ProblemDescription } from \\"../../problem/types/ProblemDescription\\";
import { CustomFiles } from \\"./CustomFiles\\";
import { TestCaseTemplate } from \\"./TestCaseTemplate\\";
import { TestCaseV2 } from \\"./TestCaseV2\\";
import { Language } from \\"../../commons/types/Language\\";

export interface CreateProblemRequestV2 {
    problemName: string;
    problemDescription: ProblemDescription;
    customFiles: CustomFiles;
    customTestCaseTemplates: TestCaseTemplate[];
    testcases: TestCaseV2[];
    supportedLanguages: Language[];
    isPublic: boolean;
}
",
                    "name": "CreateProblemRequestV2.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../..\\";
import { Language } from \\"../../commons/types/Language\\";
import { Files } from \\"./Files\\";

export type CustomFiles =
    | CustomFiles.Basic
    | CustomFiles.Custom;

export declare namespace CustomFiles {
    interface Basic extends model.BasicCustomFiles {
        _type: \\"basic\\";
    }

    interface Custom {
        _type: \\"custom\\";
        custom: Record<Language, Files>;
    }

    export interface _Visitor<Result> {
        basic: (value: model.BasicCustomFiles) => Result;
        custom: (value: Record<Language, Files>) => Result;
        _unknown: () => Result;
    }
}

export const CustomFiles = {
    basic: (value: model.BasicCustomFiles): CustomFiles.Basic => ({
        ...value,
        _type: \\"basic\\"
    }),

    custom: (value: Record<Language, Files>): CustomFiles.Custom => ({
        custom: value,
        _type: \\"custom\\"
    }),

    _visit: <Result>(value: CustomFiles, visitor: CustomFiles._Visitor<Result>): Result => {
        switch (value._type) {
            case \\"basic\\": return visitor.basic(value);
            case \\"custom\\": return visitor.custom(value.custom);
            default: return visitor._unknown();
        }
    },

    _types: (): CustomFiles[\\"_type\\"][] => [\\"basic\\", \\"custom\\"],
} as const;
",
                    "name": "CustomFiles.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { ParameterId } from \\"./ParameterId\\";

export interface DeepEqualityCorrectnessCheck {
    expectedValueParameterId: ParameterId;
}
",
                    "name": "DeepEqualityCorrectnessCheck.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { FileInfoV2 } from \\"./FileInfoV2\\";
import { VariableType } from \\"../../commons/types/VariableType\\";

export interface DefaultProvidedFile {
    file: FileInfoV2;
    relatedTypes: VariableType[];
}
",
                    "name": "DefaultProvidedFile.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export interface FileInfoV2 {
    filename: string;
    directory: string;
    contents: string;
    editable: boolean;
}
",
                    "name": "FileInfoV2.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { FileInfoV2 } from \\"./FileInfoV2\\";

export interface Files {
    files: FileInfoV2[];
}
",
                    "name": "Files.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export interface FunctionImplementation {
    impl: string;
    imports: string | null | undefined;
}
",
                    "name": "FunctionImplementation.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { Language } from \\"../../commons/types/Language\\";
import { FunctionImplementation } from \\"./FunctionImplementation\\";

export interface FunctionImplementationForMultipleLanguages {
    codeByLanguage: Record<Language, FunctionImplementation>;
}
",
                    "name": "FunctionImplementationForMultipleLanguages.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../..\\";

export type FunctionSignature =
    | FunctionSignature.Void
    | FunctionSignature.NonVoid
    /**
     * Useful when specifying custom grading for a testcase where actualResult is defined. */
    | FunctionSignature.VoidThatTakesActualResult;

export declare namespace FunctionSignature {
    interface Void extends model.VoidFunctionSignature {
        _type: \\"void\\";
    }

    interface NonVoid extends model.NonVoidFunctionSignature {
        _type: \\"nonVoid\\";
    }

    interface VoidThatTakesActualResult extends model.VoidFunctionSignatureThatTakesActualResult {
        _type: \\"voidThatTakesActualResult\\";
    }

    export interface _Visitor<Result> {
        void: (value: model.VoidFunctionSignature) => Result;
        nonVoid: (value: model.NonVoidFunctionSignature) => Result;
        voidThatTakesActualResult: (value: model.VoidFunctionSignatureThatTakesActualResult) => Result;
        _unknown: () => Result;
    }
}

export const FunctionSignature = {
    void: (value: model.VoidFunctionSignature): FunctionSignature.Void => ({
        ...value,
        _type: \\"void\\"
    }),

    nonVoid: (value: model.NonVoidFunctionSignature): FunctionSignature.NonVoid => ({
        ...value,
        _type: \\"nonVoid\\"
    }),

    voidThatTakesActualResult: (value: model.VoidFunctionSignatureThatTakesActualResult): FunctionSignature.VoidThatTakesActualResult => ({
        ...value,
        _type: \\"voidThatTakesActualResult\\"
    }),

    _visit: <Result>(value: FunctionSignature, visitor: FunctionSignature._Visitor<Result>): Result => {
        switch (value._type) {
            case \\"void\\": return visitor.void(value);
            case \\"nonVoid\\": return visitor.nonVoid(value);
            case \\"voidThatTakesActualResult\\": return visitor.voidThatTakesActualResult(value);
            default: return visitor._unknown();
        }
    },

    _types: (): FunctionSignature[\\"_type\\"][] => [\\"void\\", \\"nonVoid\\", \\"voidThatTakesActualResult\\"],
} as const;
",
                    "name": "FunctionSignature.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { Language } from \\"../../commons/types/Language\\";
import { Files } from \\"./Files\\";

export interface GeneratedFiles {
    generatedTestCaseFiles: Record<Language, Files>;
    generatedTemplateFiles: Record<Language, Files>;
    other: Record<Language, Files>;
}
",
                    "name": "GeneratedFiles.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { NonVoidFunctionSignature } from \\"./NonVoidFunctionSignature\\";

export interface GetBasicSolutionFileRequest {
    methodName: string;
    signature: NonVoidFunctionSignature;
}
",
                    "name": "GetBasicSolutionFileRequest.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { Language } from \\"../../commons/types/Language\\";
import { FileInfoV2 } from \\"./FileInfoV2\\";

export interface GetBasicSolutionFileResponse {
    solutionFileByLanguage: Record<Language, FileInfoV2>;
}
",
                    "name": "GetBasicSolutionFileResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { Language } from \\"../../commons/types/Language\\";
import { DefaultProvidedFile } from \\"./DefaultProvidedFile\\";

export interface GetDefaultProvidedFilesResponse {
    filesByLanguage: Record<Language, DefaultProvidedFile[]>;
}
",
                    "name": "GetDefaultProvidedFilesResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { FunctionSignature } from \\"./FunctionSignature\\";

export interface GetFunctionSignatureRequest {
    functionSignature: FunctionSignature;
}
",
                    "name": "GetFunctionSignatureRequest.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { Language } from \\"../../commons/types/Language\\";

export interface GetFunctionSignatureResponse {
    functionByLanguage: Record<Language, string>;
}
",
                    "name": "GetFunctionSignatureResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { TestCaseTemplate } from \\"./TestCaseTemplate\\";
import { TestCaseV2 } from \\"./TestCaseV2\\";

/**
 * Supply template if the test case relies on it
 */
export interface GetGeneratedTestCaseFileRequest {
    template: TestCaseTemplate | null | undefined;
    testCase: TestCaseV2;
}
",
                    "name": "GetGeneratedTestCaseFileRequest.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { TestCaseTemplate } from \\"./TestCaseTemplate\\";

export interface GetGeneratedTestCaseTemplateFileRequest {
    template: TestCaseTemplate;
}
",
                    "name": "GetGeneratedTestCaseTemplateFileRequest.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { ProblemId } from \\"../../commons/types/ProblemId\\";
import { VariableType } from \\"../../commons/types/VariableType\\";

export interface LightweightProblemInfoV2 {
    problemId: ProblemId;
    problemName: string;
    problemVersion: number;
    variableTypes: VariableType[];
}
",
                    "name": "LightweightProblemInfoV2.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { NonVoidFunctionSignature } from \\"./NonVoidFunctionSignature\\";
import { FunctionImplementationForMultipleLanguages } from \\"./FunctionImplementationForMultipleLanguages\\";

export interface NonVoidFunctionDefinition {
    signature: NonVoidFunctionSignature;
    code: FunctionImplementationForMultipleLanguages;
}
",
                    "name": "NonVoidFunctionDefinition.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { Parameter } from \\"./Parameter\\";
import { VariableType } from \\"../../commons/types/VariableType\\";

export interface NonVoidFunctionSignature {
    parameters: Parameter[];
    returnType: VariableType;
}
",
                    "name": "NonVoidFunctionSignature.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { ParameterId } from \\"./ParameterId\\";
import { VariableType } from \\"../../commons/types/VariableType\\";

export interface Parameter {
    parameterId: ParameterId;
    name: string;
    variableType: VariableType;
}
",
                    "name": "Parameter.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export type ParameterId = string & {
    __ParameterId: void;
};

export const ParameterId = {
    of: (value: string): ParameterId => value as ParameterId
};
",
                    "name": "ParameterId.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { ProblemId } from \\"../../commons/types/ProblemId\\";
import { ProblemDescription } from \\"../../problem/types/ProblemDescription\\";
import { Language } from \\"../../commons/types/Language\\";
import { CustomFiles } from \\"./CustomFiles\\";
import { GeneratedFiles } from \\"./GeneratedFiles\\";
import { TestCaseTemplate } from \\"./TestCaseTemplate\\";
import { TestCaseV2 } from \\"./TestCaseV2\\";

export interface ProblemInfoV2 {
    problemId: ProblemId;
    problemDescription: ProblemDescription;
    problemName: string;
    problemVersion: number;
    supportedLanguages: Language[];
    customFiles: CustomFiles;
    generatedFiles: GeneratedFiles;
    customTestCaseTemplates: TestCaseTemplate[];
    testcases: TestCaseV2[];
    isPublic: boolean;
}
",
                    "name": "ProblemInfoV2.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export interface TestCaseExpects {
    expectedStdout: string | null | undefined;
}
",
                    "name": "TestCaseExpects.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../..\\";

export type TestCaseFunction =
    | TestCaseFunction.WithActualResult
    | TestCaseFunction.Custom;

export declare namespace TestCaseFunction {
    interface WithActualResult extends model.TestCaseWithActualResultImplementation {
        _type: \\"withActualResult\\";
    }

    interface Custom extends model.VoidFunctionDefinition {
        _type: \\"custom\\";
    }

    export interface _Visitor<Result> {
        withActualResult: (value: model.TestCaseWithActualResultImplementation) => Result;
        custom: (value: model.VoidFunctionDefinition) => Result;
        _unknown: () => Result;
    }
}

export const TestCaseFunction = {
    withActualResult: (value: model.TestCaseWithActualResultImplementation): TestCaseFunction.WithActualResult => ({
        ...value,
        _type: \\"withActualResult\\"
    }),

    custom: (value: model.VoidFunctionDefinition): TestCaseFunction.Custom => ({
        ...value,
        _type: \\"custom\\"
    }),

    _visit: <Result>(value: TestCaseFunction, visitor: TestCaseFunction._Visitor<Result>): Result => {
        switch (value._type) {
            case \\"withActualResult\\": return visitor.withActualResult(value);
            case \\"custom\\": return visitor.custom(value);
            default: return visitor._unknown();
        }
    },

    _types: (): TestCaseFunction[\\"_type\\"][] => [\\"withActualResult\\", \\"custom\\"],
} as const;
",
                    "name": "TestCaseFunction.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export type TestCaseId = string & {
    __TestCaseId: void;
};

export const TestCaseId = {
    of: (value: string): TestCaseId => value as TestCaseId
};
",
                    "name": "TestCaseId.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { TestCaseImplementationDescription } from \\"./TestCaseImplementationDescription\\";
import { TestCaseFunction } from \\"./TestCaseFunction\\";

export interface TestCaseImplementation {
    description: TestCaseImplementationDescription;
    function: TestCaseFunction;
}
",
                    "name": "TestCaseImplementation.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { TestCaseImplementationDescriptionBoard } from \\"./TestCaseImplementationDescriptionBoard\\";

export interface TestCaseImplementationDescription {
    boards: TestCaseImplementationDescriptionBoard[];
}
",
                    "name": "TestCaseImplementationDescription.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../..\\";

export type TestCaseImplementationDescriptionBoard =
    | TestCaseImplementationDescriptionBoard.Html
    | TestCaseImplementationDescriptionBoard.ParamId;

export declare namespace TestCaseImplementationDescriptionBoard {
    interface Html {
        _type: \\"html\\";
        html: string;
    }

    interface ParamId {
        _type: \\"paramId\\";
        paramId: model.ParameterId;
    }

    export interface _Visitor<Result> {
        html: (value: string) => Result;
        paramId: (value: model.ParameterId) => Result;
        _unknown: () => Result;
    }
}

export const TestCaseImplementationDescriptionBoard = {
    html: (value: string): TestCaseImplementationDescriptionBoard.Html => ({
        html: value,
        _type: \\"html\\"
    }),

    paramId: (value: model.ParameterId): TestCaseImplementationDescriptionBoard.ParamId => ({
        paramId: value,
        _type: \\"paramId\\"
    }),

    _visit: <Result>(value: TestCaseImplementationDescriptionBoard, visitor: TestCaseImplementationDescriptionBoard._Visitor<Result>): Result => {
        switch (value._type) {
            case \\"html\\": return visitor.html(value.html);
            case \\"paramId\\": return visitor.paramId(value.paramId);
            default: return visitor._unknown();
        }
    },

    _types: (): TestCaseImplementationDescriptionBoard[\\"_type\\"][] => [\\"html\\", \\"paramId\\"],
} as const;
",
                    "name": "TestCaseImplementationDescriptionBoard.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../..\\";

export type TestCaseImplementationReference =
    | TestCaseImplementationReference.TemplateId
    | TestCaseImplementationReference.Implementation;

export declare namespace TestCaseImplementationReference {
    interface TemplateId {
        _type: \\"templateId\\";
        templateId: model.TestCaseTemplateId;
    }

    interface Implementation extends model.TestCaseImplementation {
        _type: \\"implementation\\";
    }

    export interface _Visitor<Result> {
        templateId: (value: model.TestCaseTemplateId) => Result;
        implementation: (value: model.TestCaseImplementation) => Result;
        _unknown: () => Result;
    }
}

export const TestCaseImplementationReference = {
    templateId: (value: model.TestCaseTemplateId): TestCaseImplementationReference.TemplateId => ({
        templateId: value,
        _type: \\"templateId\\"
    }),

    implementation: (value: model.TestCaseImplementation): TestCaseImplementationReference.Implementation => ({
        ...value,
        _type: \\"implementation\\"
    }),

    _visit: <Result>(value: TestCaseImplementationReference, visitor: TestCaseImplementationReference._Visitor<Result>): Result => {
        switch (value._type) {
            case \\"templateId\\": return visitor.templateId(value.templateId);
            case \\"implementation\\": return visitor.implementation(value);
            default: return visitor._unknown();
        }
    },

    _types: (): TestCaseImplementationReference[\\"_type\\"][] => [\\"templateId\\", \\"implementation\\"],
} as const;
",
                    "name": "TestCaseImplementationReference.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { TestCaseId } from \\"./TestCaseId\\";

export interface TestCaseMetadata {
    id: TestCaseId;
    name: string;
    hidden: boolean;
}
",
                    "name": "TestCaseMetadata.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { TestCaseTemplateId } from \\"./TestCaseTemplateId\\";
import { TestCaseImplementation } from \\"./TestCaseImplementation\\";

export interface TestCaseTemplate {
    templateId: TestCaseTemplateId;
    name: string;
    implementation: TestCaseImplementation;
}
",
                    "name": "TestCaseTemplate.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export type TestCaseTemplateId = string & {
    __TestCaseTemplateId: void;
};

export const TestCaseTemplateId = {
    of: (value: string): TestCaseTemplateId => value as TestCaseTemplateId
};
",
                    "name": "TestCaseTemplateId.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { TestCaseMetadata } from \\"./TestCaseMetadata\\";
import { TestCaseImplementationReference } from \\"./TestCaseImplementationReference\\";
import { ParameterId } from \\"./ParameterId\\";
import { VariableValue } from \\"../../commons/types/VariableValue\\";
import { TestCaseExpects } from \\"./TestCaseExpects\\";

export interface TestCaseV2 {
    metadata: TestCaseMetadata;
    implementation: TestCaseImplementationReference;
    arguments: Record<ParameterId, VariableValue>;
    expects: TestCaseExpects | null | undefined;
}
",
                    "name": "TestCaseV2.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { NonVoidFunctionDefinition } from \\"./NonVoidFunctionDefinition\\";
import { AssertCorrectnessCheck } from \\"./AssertCorrectnessCheck\\";

export interface TestCaseWithActualResultImplementation {
    getActualResult: NonVoidFunctionDefinition;
    assertCorrectnessCheck: AssertCorrectnessCheck;
}
",
                    "name": "TestCaseWithActualResultImplementation.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { Parameter } from \\"./Parameter\\";
import { FunctionImplementationForMultipleLanguages } from \\"./FunctionImplementationForMultipleLanguages\\";

export interface VoidFunctionDefinition {
    parameters: Parameter[];
    code: FunctionImplementationForMultipleLanguages;
}
",
                    "name": "VoidFunctionDefinition.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { Parameter } from \\"./Parameter\\";
import { FunctionImplementationForMultipleLanguages } from \\"./FunctionImplementationForMultipleLanguages\\";

/**
 * The generated signature will include an additional param, actualResult
 */
export interface VoidFunctionDefinitionThatTakesActualResult {
    additionalParameters: Parameter[];
    code: FunctionImplementationForMultipleLanguages;
}
",
                    "name": "VoidFunctionDefinitionThatTakesActualResult.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { Parameter } from \\"./Parameter\\";

export interface VoidFunctionSignature {
    parameters: Parameter[];
}
",
                    "name": "VoidFunctionSignature.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { Parameter } from \\"./Parameter\\";
import { VariableType } from \\"../../commons/types/VariableType\\";

export interface VoidFunctionSignatureThatTakesActualResult {
    parameters: Parameter[];
    actualResultType: VariableType;
}
",
                    "name": "VoidFunctionSignatureThatTakesActualResult.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export * from \\"./AssertCorrectnessCheck\\";
export * from \\"./BasicCustomFiles\\";
export * from \\"./BasicTestCaseTemplate\\";
export * from \\"./CreateProblemRequestV2\\";
export * from \\"./CustomFiles\\";
export * from \\"./DeepEqualityCorrectnessCheck\\";
export * from \\"./DefaultProvidedFile\\";
export * from \\"./FileInfoV2\\";
export * from \\"./Files\\";
export * from \\"./FunctionImplementation\\";
export * from \\"./FunctionImplementationForMultipleLanguages\\";
export * from \\"./FunctionSignature\\";
export * from \\"./GeneratedFiles\\";
export * from \\"./GetBasicSolutionFileRequest\\";
export * from \\"./GetBasicSolutionFileResponse\\";
export * from \\"./GetDefaultProvidedFilesResponse\\";
export * from \\"./GetFunctionSignatureRequest\\";
export * from \\"./GetFunctionSignatureResponse\\";
export * from \\"./GetGeneratedTestCaseFileRequest\\";
export * from \\"./GetGeneratedTestCaseTemplateFileRequest\\";
export * from \\"./LightweightProblemInfoV2\\";
export * from \\"./NonVoidFunctionDefinition\\";
export * from \\"./NonVoidFunctionSignature\\";
export * from \\"./Parameter\\";
export * from \\"./ParameterId\\";
export * from \\"./ProblemInfoV2\\";
export * from \\"./TestCaseExpects\\";
export * from \\"./TestCaseFunction\\";
export * from \\"./TestCaseId\\";
export * from \\"./TestCaseImplementation\\";
export * from \\"./TestCaseImplementationDescription\\";
export * from \\"./TestCaseImplementationDescriptionBoard\\";
export * from \\"./TestCaseImplementationReference\\";
export * from \\"./TestCaseMetadata\\";
export * from \\"./TestCaseTemplate\\";
export * from \\"./TestCaseTemplateId\\";
export * from \\"./TestCaseV2\\";
export * from \\"./TestCaseWithActualResultImplementation\\";
export * from \\"./VoidFunctionDefinition\\";
export * from \\"./VoidFunctionDefinitionThatTakesActualResult\\";
export * from \\"./VoidFunctionSignature\\";
export * from \\"./VoidFunctionSignatureThatTakesActualResult\\";
",
                    "name": "index.ts",
                    "type": "file",
                  },
                ],
                "name": "types",
                "type": "directory",
              },
            ],
            "name": "problemV2",
            "type": "directory",
          },
          Object {
            "contents": Array [
              Object {
                "contents": "export * from \\"./service-types\\";
export * from \\"./types\\";
",
                "name": "index.ts",
                "type": "file",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": Array [
                      Object {
                        "contents": "import { Language } from \\"../../../commons/types/Language\\";

export interface CreateExecutionSessionRequest {
    language: Language;
}
",
                        "name": "CreateExecutionSessionRequest.ts.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { ExecutionSessionResponse } from \\"../../types/ExecutionSessionResponse\\";

export type CreateExecutionSessionResponse = CreateExecutionSessionResponse.SuccessResponse | CreateExecutionSessionResponse.ErrorResponse;

namespace CreateExecutionSessionResponse {
    export interface SuccessResponse {
        ok: true;
        statusCode: number;
        body: ExecutionSessionResponse;
    }

    export interface ErrorResponse {
        ok: false;
        statusCode: number;
    }
}
",
                        "name": "CreateExecutionSessionResponse.ts.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "export interface GetExecutionSessionRequest {
    sessionId: string;
}
",
                        "name": "GetExecutionSessionRequest.ts.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { ExecutionSessionResponse } from \\"../../types/ExecutionSessionResponse\\";

export type GetExecutionSessionResponse = GetExecutionSessionResponse.SuccessResponse | GetExecutionSessionResponse.ErrorResponse;

namespace GetExecutionSessionResponse {
    export interface SuccessResponse {
        ok: true;
        statusCode: number;
        body: ExecutionSessionResponse | null | undefined;
    }

    export interface ErrorResponse {
        ok: false;
        statusCode: number;
    }
}
",
                        "name": "GetExecutionSessionResponse.ts.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { ExecutionSessionsState } from \\"../../types/ExecutionSessionsState\\";

export type GetExecutionSessionsStateResponse = GetExecutionSessionsStateResponse.SuccessResponse | GetExecutionSessionsStateResponse.ErrorResponse;

namespace GetExecutionSessionsStateResponse {
    export interface SuccessResponse {
        ok: true;
        statusCode: number;
        body: ExecutionSessionsState;
    }

    export interface ErrorResponse {
        ok: false;
        statusCode: number;
    }
}
",
                        "name": "GetExecutionSessionsStateResponse.ts.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "export interface StopExecutionSessionRequest {
    sessionId: string;
}
",
                        "name": "StopExecutionSessionRequest.ts.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "export type StopExecutionSessionResponse = StopExecutionSessionResponse.SuccessResponse | StopExecutionSessionResponse.ErrorResponse;

namespace StopExecutionSessionResponse {
    export interface SuccessResponse {
        ok: true;
        statusCode: number;
    }

    export interface ErrorResponse {
        ok: false;
        statusCode: number;
    }
}
",
                        "name": "StopExecutionSessionResponse.ts.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "export * from \\"./CreateExecutionSessionRequest.ts\\";
export * from \\"./CreateExecutionSessionResponse.ts\\";
export * from \\"./GetExecutionSessionRequest.ts\\";
export * from \\"./GetExecutionSessionResponse.ts\\";
export * from \\"./GetExecutionSessionsStateResponse.ts\\";
export * from \\"./StopExecutionSessionRequest.ts\\";
export * from \\"./StopExecutionSessionResponse.ts\\";
",
                        "name": "index.ts",
                        "type": "file",
                      },
                    ],
                    "name": "ExecutionSesssionManagementService",
                    "type": "directory",
                  },
                  Object {
                    "contents": Array [
                      Object {
                        "contents": "import { SubmissionId } from \\"../../types/SubmissionId\\";

export interface GetSubmissionStateRequest {
    submissionId: SubmissionId;
}
",
                        "name": "GetSubmissionStateRequest.ts.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { SubmissionState } from \\"../../types/SubmissionState\\";

export type GetSubmissionStateResponse = GetSubmissionStateResponse.SuccessResponse | GetSubmissionStateResponse.ErrorResponse;

namespace GetSubmissionStateResponse {
    export interface SuccessResponse {
        ok: true;
        statusCode: number;
        body: SubmissionState;
    }

    export interface ErrorResponse {
        ok: false;
        statusCode: number;
    }
}
",
                        "name": "GetSubmissionStateResponse.ts.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { SubmissionId } from \\"../../types/SubmissionId\\";

export interface GetSubmissionStateV2Request {
    submissionId: SubmissionId;
}
",
                        "name": "GetSubmissionStateV2Request.ts.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { SubmissionStateV2 } from \\"../../types/SubmissionStateV2\\";

export type GetSubmissionStateV2Response = GetSubmissionStateV2Response.SuccessResponse | GetSubmissionStateV2Response.ErrorResponse;

namespace GetSubmissionStateV2Response {
    export interface SuccessResponse {
        ok: true;
        statusCode: number;
        body: SubmissionStateV2;
    }

    export interface ErrorResponse {
        ok: false;
        statusCode: number;
    }
}
",
                        "name": "GetSubmissionStateV2Response.ts.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { SubmissionId } from \\"../../types/SubmissionId\\";
import { GetTraceResponsesPageRequest } from \\"../../types/GetTraceResponsesPageRequest\\";

export interface GetTraceResponsesPageForWorkspaceRequest {
    submissionId: SubmissionId;
    request: GetTraceResponsesPageRequest;
}
",
                        "name": "GetTraceResponsesPageForWorkspaceRequest.ts.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { TraceResponsesPage } from \\"../../types/TraceResponsesPage\\";

export type GetTraceResponsesPageForWorkspaceResponse = GetTraceResponsesPageForWorkspaceResponse.SuccessResponse | GetTraceResponsesPageForWorkspaceResponse.ErrorResponse;

namespace GetTraceResponsesPageForWorkspaceResponse {
    export interface SuccessResponse {
        ok: true;
        statusCode: number;
        body: TraceResponsesPage;
    }

    export interface ErrorResponse {
        ok: false;
        statusCode: number;
    }
}
",
                        "name": "GetTraceResponsesPageForWorkspaceResponse.ts.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { SubmissionId } from \\"../../types/SubmissionId\\";
import { GetTraceResponsesPageRequest } from \\"../../types/GetTraceResponsesPageRequest\\";

export interface GetTraceResponsesPageRequest {
    submissionId: SubmissionId;
    testCaseId: string;
    request: GetTraceResponsesPageRequest;
}
",
                        "name": "GetTraceResponsesPageRequest.ts.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { TraceResponsesPage } from \\"../../types/TraceResponsesPage\\";

export type GetTraceResponsesPageResponse = GetTraceResponsesPageResponse.SuccessResponse | GetTraceResponsesPageResponse.ErrorResponse;

namespace GetTraceResponsesPageResponse {
    export interface SuccessResponse {
        ok: true;
        statusCode: number;
        body: TraceResponsesPage;
    }

    export interface ErrorResponse {
        ok: false;
        statusCode: number;
    }
}
",
                        "name": "GetTraceResponsesPageResponse.ts.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { SubmissionId } from \\"../../types/SubmissionId\\";
import { GetTraceResponsesPageRequest } from \\"../../types/GetTraceResponsesPageRequest\\";

export interface GetTraceResponsesV2PageForWorkspaceRequest {
    submissionId: SubmissionId;
    request: GetTraceResponsesPageRequest;
}
",
                        "name": "GetTraceResponsesV2PageForWorkspaceRequest.ts.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { TraceResponsesPageV2 } from \\"../../types/TraceResponsesPageV2\\";

export type GetTraceResponsesV2PageForWorkspaceResponse = GetTraceResponsesV2PageForWorkspaceResponse.SuccessResponse | GetTraceResponsesV2PageForWorkspaceResponse.ErrorResponse;

namespace GetTraceResponsesV2PageForWorkspaceResponse {
    export interface SuccessResponse {
        ok: true;
        statusCode: number;
        body: TraceResponsesPageV2;
    }

    export interface ErrorResponse {
        ok: false;
        statusCode: number;
    }
}
",
                        "name": "GetTraceResponsesV2PageForWorkspaceResponse.ts.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { SubmissionId } from \\"../../types/SubmissionId\\";
import { TestCaseId } from \\"../../../problemV2/types/TestCaseId\\";
import { GetTraceResponsesPageRequest } from \\"../../types/GetTraceResponsesPageRequest\\";

export interface GetTraceResponsesV2PageRequest {
    submissionId: SubmissionId;
    testCaseId: TestCaseId;
    request: GetTraceResponsesPageRequest;
}
",
                        "name": "GetTraceResponsesV2PageRequest.ts.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { TraceResponsesPageV2 } from \\"../../types/TraceResponsesPageV2\\";

export type GetTraceResponsesV2PageResponse = GetTraceResponsesV2PageResponse.SuccessResponse | GetTraceResponsesV2PageResponse.ErrorResponse;

namespace GetTraceResponsesV2PageResponse {
    export interface SuccessResponse {
        ok: true;
        statusCode: number;
        body: TraceResponsesPageV2;
    }

    export interface ErrorResponse {
        ok: false;
        statusCode: number;
    }
}
",
                        "name": "GetTraceResponsesV2PageResponse.ts.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "export * from \\"./GetSubmissionStateRequest.ts\\";
export * from \\"./GetSubmissionStateResponse.ts\\";
export * from \\"./GetSubmissionStateV2Request.ts\\";
export * from \\"./GetSubmissionStateV2Response.ts\\";
export * from \\"./GetTraceResponsesPageForWorkspaceRequest.ts\\";
export * from \\"./GetTraceResponsesPageForWorkspaceResponse.ts\\";
export * from \\"./GetTraceResponsesPageRequest.ts\\";
export * from \\"./GetTraceResponsesPageResponse.ts\\";
export * from \\"./GetTraceResponsesV2PageForWorkspaceRequest.ts\\";
export * from \\"./GetTraceResponsesV2PageForWorkspaceResponse.ts\\";
export * from \\"./GetTraceResponsesV2PageRequest.ts\\";
export * from \\"./GetTraceResponsesV2PageResponse.ts\\";
",
                        "name": "index.ts",
                        "type": "file",
                      },
                    ],
                    "name": "SubmissionInfoService",
                    "type": "directory",
                  },
                  Object {
                    "contents": Array [
                      Object {
                        "contents": "import { WorkspaceStarterFilesResponse } from \\"../../types/WorkspaceStarterFilesResponse\\";

export type GetWorkspaceStarterFilesResponse = GetWorkspaceStarterFilesResponse.SuccessResponse | GetWorkspaceStarterFilesResponse.ErrorResponse;

namespace GetWorkspaceStarterFilesResponse {
    export interface SuccessResponse {
        ok: true;
        statusCode: number;
        body: WorkspaceStarterFilesResponse;
    }

    export interface ErrorResponse {
        ok: false;
        statusCode: number;
    }
}
",
                        "name": "GetWorkspaceStarterFilesResponse.ts.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { WorkspaceStarterFilesResponseV2 } from \\"../../types/WorkspaceStarterFilesResponseV2\\";

export type GetWorkspaceStarterFilesV2Response = GetWorkspaceStarterFilesV2Response.SuccessResponse | GetWorkspaceStarterFilesV2Response.ErrorResponse;

namespace GetWorkspaceStarterFilesV2Response {
    export interface SuccessResponse {
        ok: true;
        statusCode: number;
        body: WorkspaceStarterFilesResponseV2;
    }

    export interface ErrorResponse {
        ok: false;
        statusCode: number;
    }
}
",
                        "name": "GetWorkspaceStarterFilesV2Response.ts.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "export * from \\"./GetWorkspaceStarterFilesResponse.ts\\";
export * from \\"./GetWorkspaceStarterFilesV2Response.ts\\";
",
                        "name": "index.ts",
                        "type": "file",
                      },
                    ],
                    "name": "WorkspaceInfoService",
                    "type": "directory",
                  },
                  Object {
                    "contents": "export * from \\"./ExecutionSesssionManagementService\\";
export * from \\"./SubmissionInfoService\\";
export * from \\"./WorkspaceInfoService\\";
",
                    "name": "index.ts",
                    "type": "file",
                  },
                ],
                "name": "service-types",
                "type": "directory",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "import * as model from \\"../..\\";

export type ActualResult =
    | ActualResult.Value
    | ActualResult.Exception
    | ActualResult.ExceptionV2;

export declare namespace ActualResult {
    interface Value {
        _type: \\"value\\";
        value: model.VariableValue;
    }

    interface Exception extends model.ExceptionInfo {
        _type: \\"exception\\";
    }

    interface ExceptionV2 {
        _type: \\"exceptionV2\\";
        exceptionV2: model.ExceptionV2;
    }

    export interface _Visitor<Result> {
        value: (value: model.VariableValue) => Result;
        exception: (value: model.ExceptionInfo) => Result;
        exceptionV2: (value: model.ExceptionV2) => Result;
        _unknown: () => Result;
    }
}

export const ActualResult = {
    value: (value: model.VariableValue): ActualResult.Value => ({
        value: value,
        _type: \\"value\\"
    }),

    exception: (value: model.ExceptionInfo): ActualResult.Exception => ({
        ...value,
        _type: \\"exception\\"
    }),

    exceptionV2: (value: model.ExceptionV2): ActualResult.ExceptionV2 => ({
        exceptionV2: value,
        _type: \\"exceptionV2\\"
    }),

    _visit: <Result>(value: ActualResult, visitor: ActualResult._Visitor<Result>): Result => {
        switch (value._type) {
            case \\"value\\": return visitor.value(value.value);
            case \\"exception\\": return visitor.exception(value);
            case \\"exceptionV2\\": return visitor.exceptionV2(value.exceptionV2);
            default: return visitor._unknown();
        }
    },

    _types: (): ActualResult[\\"_type\\"][] => [\\"value\\", \\"exception\\", \\"exceptionV2\\"],
} as const;
",
                    "name": "ActualResult.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { SubmissionId } from \\"./SubmissionId\\";
import { ExecutionSessionStatus } from \\"./ExecutionSessionStatus\\";

export interface BuildingExecutorResponse {
    submissionId: SubmissionId;
    status: ExecutionSessionStatus;
}
",
                    "name": "BuildingExecutorResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../..\\";

export type CodeExecutionUpdate =
    /**
     * Statuses if an executor for the session isn't ready (Before RunningResponse). */
    | CodeExecutionUpdate.BuildingExecutor
    /**
     * Sent once a test submission is executing. */
    | CodeExecutionUpdate.Running
    /**
     * Sent if a submission cannot be run (i.e. Compile Error). */
    | CodeExecutionUpdate.Errored
    /**
     * Sent if a submission is stopped. */
    | CodeExecutionUpdate.Stopped
    /**
     * Graded testcases without trace information. */
    | CodeExecutionUpdate.Graded
    /**
     * Graded submission for v2 problems. */
    | CodeExecutionUpdate.GradedV2
    /**
     * Workspace run without trace information. */
    | CodeExecutionUpdate.WorkspaceRan
    /**
     * Gives progress about what is being recorded. */
    | CodeExecutionUpdate.Recording
    /**
     * Graded testcases with trace information. */
    | CodeExecutionUpdate.Recorded
    /**
     * Sent if an invalid request is sent for a submission. */
    | CodeExecutionUpdate.InvalidRequest
    /**
     * Sent once a submission is graded and fully recorded. */
    | CodeExecutionUpdate.Finished;

export declare namespace CodeExecutionUpdate {
    interface BuildingExecutor extends model.BuildingExecutorResponse {
        _type: \\"buildingExecutor\\";
    }

    interface Running extends model.RunningResponse {
        _type: \\"running\\";
    }

    interface Errored extends model.ErroredResponse {
        _type: \\"errored\\";
    }

    interface Stopped extends model.StoppedResponse {
        _type: \\"stopped\\";
    }

    interface Graded extends model.GradedResponse {
        _type: \\"graded\\";
    }

    interface GradedV2 extends model.GradedResponseV2 {
        _type: \\"gradedV2\\";
    }

    interface WorkspaceRan extends model.WorkspaceRanResponse {
        _type: \\"workspaceRan\\";
    }

    interface Recording extends model.RecordingResponseNotification {
        _type: \\"recording\\";
    }

    interface Recorded extends model.RecordedResponseNotification {
        _type: \\"recorded\\";
    }

    interface InvalidRequest extends model.InvalidRequestResponse {
        _type: \\"invalidRequest\\";
    }

    interface Finished extends model.FinishedResponse {
        _type: \\"finished\\";
    }

    export interface _Visitor<Result> {
        buildingExecutor: (value: model.BuildingExecutorResponse) => Result;
        running: (value: model.RunningResponse) => Result;
        errored: (value: model.ErroredResponse) => Result;
        stopped: (value: model.StoppedResponse) => Result;
        graded: (value: model.GradedResponse) => Result;
        gradedV2: (value: model.GradedResponseV2) => Result;
        workspaceRan: (value: model.WorkspaceRanResponse) => Result;
        recording: (value: model.RecordingResponseNotification) => Result;
        recorded: (value: model.RecordedResponseNotification) => Result;
        invalidRequest: (value: model.InvalidRequestResponse) => Result;
        finished: (value: model.FinishedResponse) => Result;
        _unknown: () => Result;
    }
}

export const CodeExecutionUpdate = {
    buildingExecutor: (value: model.BuildingExecutorResponse): CodeExecutionUpdate.BuildingExecutor => ({
        ...value,
        _type: \\"buildingExecutor\\"
    }),

    running: (value: model.RunningResponse): CodeExecutionUpdate.Running => ({
        ...value,
        _type: \\"running\\"
    }),

    errored: (value: model.ErroredResponse): CodeExecutionUpdate.Errored => ({
        ...value,
        _type: \\"errored\\"
    }),

    stopped: (value: model.StoppedResponse): CodeExecutionUpdate.Stopped => ({
        ...value,
        _type: \\"stopped\\"
    }),

    graded: (value: model.GradedResponse): CodeExecutionUpdate.Graded => ({
        ...value,
        _type: \\"graded\\"
    }),

    gradedV2: (value: model.GradedResponseV2): CodeExecutionUpdate.GradedV2 => ({
        ...value,
        _type: \\"gradedV2\\"
    }),

    workspaceRan: (value: model.WorkspaceRanResponse): CodeExecutionUpdate.WorkspaceRan => ({
        ...value,
        _type: \\"workspaceRan\\"
    }),

    recording: (value: model.RecordingResponseNotification): CodeExecutionUpdate.Recording => ({
        ...value,
        _type: \\"recording\\"
    }),

    recorded: (value: model.RecordedResponseNotification): CodeExecutionUpdate.Recorded => ({
        ...value,
        _type: \\"recorded\\"
    }),

    invalidRequest: (value: model.InvalidRequestResponse): CodeExecutionUpdate.InvalidRequest => ({
        ...value,
        _type: \\"invalidRequest\\"
    }),

    finished: (value: model.FinishedResponse): CodeExecutionUpdate.Finished => ({
        ...value,
        _type: \\"finished\\"
    }),

    _visit: <Result>(value: CodeExecutionUpdate, visitor: CodeExecutionUpdate._Visitor<Result>): Result => {
        switch (value._type) {
            case \\"buildingExecutor\\": return visitor.buildingExecutor(value);
            case \\"running\\": return visitor.running(value);
            case \\"errored\\": return visitor.errored(value);
            case \\"stopped\\": return visitor.stopped(value);
            case \\"graded\\": return visitor.graded(value);
            case \\"gradedV2\\": return visitor.gradedV2(value);
            case \\"workspaceRan\\": return visitor.workspaceRan(value);
            case \\"recording\\": return visitor.recording(value);
            case \\"recorded\\": return visitor.recorded(value);
            case \\"invalidRequest\\": return visitor.invalidRequest(value);
            case \\"finished\\": return visitor.finished(value);
            default: return visitor._unknown();
        }
    },

    _types: (): CodeExecutionUpdate[\\"_type\\"][] => [\\"buildingExecutor\\", \\"running\\", \\"errored\\", \\"stopped\\", \\"graded\\", \\"gradedV2\\", \\"workspaceRan\\", \\"recording\\", \\"recorded\\", \\"invalidRequest\\", \\"finished\\"],
} as const;
",
                    "name": "CodeExecutionUpdate.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export interface CompileError {
    message: string;
}
",
                    "name": "CompileError.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { ProblemId } from \\"../../commons/types/ProblemId\\";
import { SubmissionId } from \\"./SubmissionId\\";

export interface CustomTestCasesUnsupported {
    problemId: ProblemId;
    submissionId: SubmissionId;
}
",
                    "name": "CustomTestCasesUnsupported.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../..\\";

export type ErrorInfo =
    | ErrorInfo.CompileError
    /**
     * If the submission cannot be executed and throws a runtime error before getting to any of the testcases.
     *  */
    | ErrorInfo.RuntimeError
    /**
     * If the trace backend encounters an unexpected error.
     *  */
    | ErrorInfo.InternalError;

export declare namespace ErrorInfo {
    interface CompileError extends model.CompileError {
        _type: \\"compileError\\";
    }

    interface RuntimeError extends model.RuntimeError {
        _type: \\"runtimeError\\";
    }

    interface InternalError extends model.InternalError {
        _type: \\"internalError\\";
    }

    export interface _Visitor<Result> {
        compileError: (value: model.CompileError) => Result;
        runtimeError: (value: model.RuntimeError) => Result;
        internalError: (value: model.InternalError) => Result;
        _unknown: () => Result;
    }
}

export const ErrorInfo = {
    compileError: (value: model.CompileError): ErrorInfo.CompileError => ({
        ...value,
        _type: \\"compileError\\"
    }),

    runtimeError: (value: model.RuntimeError): ErrorInfo.RuntimeError => ({
        ...value,
        _type: \\"runtimeError\\"
    }),

    internalError: (value: model.InternalError): ErrorInfo.InternalError => ({
        ...value,
        _type: \\"internalError\\"
    }),

    _visit: <Result>(value: ErrorInfo, visitor: ErrorInfo._Visitor<Result>): Result => {
        switch (value._type) {
            case \\"compileError\\": return visitor.compileError(value);
            case \\"runtimeError\\": return visitor.runtimeError(value);
            case \\"internalError\\": return visitor.internalError(value);
            default: return visitor._unknown();
        }
    },

    _types: (): ErrorInfo[\\"_type\\"][] => [\\"compileError\\", \\"runtimeError\\", \\"internalError\\"],
} as const;
",
                    "name": "ErrorInfo.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { SubmissionId } from \\"./SubmissionId\\";
import { ErrorInfo } from \\"./ErrorInfo\\";

export interface ErroredResponse {
    submissionId: SubmissionId;
    errorInfo: ErrorInfo;
}
",
                    "name": "ErroredResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export interface ExceptionInfo {
    exceptionType: string;
    exceptionMessage: string;
    exceptionStacktrace: string;
}
",
                    "name": "ExceptionInfo.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../..\\";

export type ExceptionV2 =
    | ExceptionV2.Generic
    | ExceptionV2.Timeout;

export declare namespace ExceptionV2 {
    interface Generic extends model.ExceptionInfo {
        _type: \\"generic\\";
    }

    interface Timeout {
        _type: \\"timeout\\";
    }

    export interface _Visitor<Result> {
        generic: (value: model.ExceptionInfo) => Result;
        timeout: () => Result;
        _unknown: () => Result;
    }
}

export const ExceptionV2 = {
    generic: (value: model.ExceptionInfo): ExceptionV2.Generic => ({
        ...value,
        _type: \\"generic\\"
    }),

    timeout: (): ExceptionV2.Timeout => ({
        _type: \\"timeout\\"
    }),

    _visit: <Result>(value: ExceptionV2, visitor: ExceptionV2._Visitor<Result>): Result => {
        switch (value._type) {
            case \\"generic\\": return visitor.generic(value);
            case \\"timeout\\": return visitor.timeout();
            default: return visitor._unknown();
        }
    },

    _types: (): ExceptionV2[\\"_type\\"][] => [\\"generic\\", \\"timeout\\"],
} as const;
",
                    "name": "ExceptionV2.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { Language } from \\"../../commons/types/Language\\";
import { ExecutionSessionStatus } from \\"./ExecutionSessionStatus\\";

export interface ExecutionSessionResponse {
    sessionId: string;
    executionSessionUrl: string | null | undefined;
    language: Language;
    status: ExecutionSessionStatus;
}
",
                    "name": "ExecutionSessionResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { Language } from \\"../../commons/types/Language\\";
import { ExecutionSessionStatus } from \\"./ExecutionSessionStatus\\";

export interface ExecutionSessionState {
    lastTimeContacted: string | null | undefined;
    sessionId: string;
    isWarmInstance: boolean;
    awsTaskId: string | null | undefined;
    language: Language;
    status: ExecutionSessionStatus;
}
",
                    "name": "ExecutionSessionState.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export type ExecutionSessionStatus =
    | \\"CREATING_CONTAINER\\"
    | \\"PROVISIONING_CONTAINER\\"
    | \\"PENDING_CONTAINER\\"
    | \\"RUNNING_CONTAINER\\"
    | \\"LIVE_CONTAINER\\"
    | \\"FAILED_TO_LAUNCH\\";

export const ExecutionSessionStatus = {
    CreatingContainer: \\"CREATING_CONTAINER\\",
    ProvisioningContainer: \\"PROVISIONING_CONTAINER\\",
    PendingContainer: \\"PENDING_CONTAINER\\",
    RunningContainer: \\"RUNNING_CONTAINER\\",
    LiveContainer: \\"LIVE_CONTAINER\\",
    FailedToLaunch: \\"FAILED_TO_LAUNCH\\",

    _visit: <Result>(value: ExecutionSessionStatus, visitor: ExecutionSessionStatus._Visitor<Result>): Result => {
        switch (value) {
            case ExecutionSessionStatus.CreatingContainer: return visitor.creatingContainer();
            case ExecutionSessionStatus.ProvisioningContainer: return visitor.provisioningContainer();
            case ExecutionSessionStatus.PendingContainer: return visitor.pendingContainer();
            case ExecutionSessionStatus.RunningContainer: return visitor.runningContainer();
            case ExecutionSessionStatus.LiveContainer: return visitor.liveContainer();
            case ExecutionSessionStatus.FailedToLaunch: return visitor.failedToLaunch();
            default: return visitor._unknown();
        }
    },

    _values: (): ExecutionSessionStatus[] => [ExecutionSessionStatus.CreatingContainer, ExecutionSessionStatus.ProvisioningContainer, ExecutionSessionStatus.PendingContainer, ExecutionSessionStatus.RunningContainer, ExecutionSessionStatus.LiveContainer, ExecutionSessionStatus.FailedToLaunch],
} as const;

export declare namespace ExecutionSessionStatus {
    type CreatingContainer = \\"CREATING_CONTAINER\\";
    type ProvisioningContainer = \\"PROVISIONING_CONTAINER\\";
    type PendingContainer = \\"PENDING_CONTAINER\\";
    type RunningContainer = \\"RUNNING_CONTAINER\\";
    type LiveContainer = \\"LIVE_CONTAINER\\";
    type FailedToLaunch = \\"FAILED_TO_LAUNCH\\";

    export interface _Visitor<Result> {
        creatingContainer: () => Result;
        provisioningContainer: () => Result;
        pendingContainer: () => Result;
        runningContainer: () => Result;
        liveContainer: () => Result;
        failedToLaunch: () => Result;
        _unknown: () => Result;
    }
}
",
                    "name": "ExecutionSessionStatus.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { ExecutionSessionState } from \\"./ExecutionSessionState\\";

export interface ExecutionSessionsState {
    states: Record<string, ExecutionSessionState>;
    numWarmingInstances: number | null | undefined;
    warmingSessionIds: string[];
}
",
                    "name": "ExecutionSessionsState.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { SubmissionId } from \\"./SubmissionId\\";

export interface ExistingSubmissionExecuting {
    submissionId: SubmissionId;
}
",
                    "name": "ExistingSubmissionExecuting.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export interface ExpressionLocation {
    start: number;
    offset: number;
}
",
                    "name": "ExpressionLocation.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { SubmissionId } from \\"./SubmissionId\\";

export interface FinishedResponse {
    submissionId: SubmissionId;
}
",
                    "name": "FinishedResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export interface GetTraceResponsesPageRequest {
    offset: number | null | undefined;
}
",
                    "name": "GetTraceResponsesPageRequest.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { SubmissionId } from \\"./SubmissionId\\";
import { TestCaseResultWithStdout } from \\"./TestCaseResultWithStdout\\";

export interface GradedResponse {
    submissionId: SubmissionId;
    testCases: Record<string, TestCaseResultWithStdout>;
}
",
                    "name": "GradedResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { SubmissionId } from \\"./SubmissionId\\";
import { TestCaseId } from \\"../../problemV2/types/TestCaseId\\";
import { TestCaseGrade } from \\"./TestCaseGrade\\";

export interface GradedResponseV2 {
    submissionId: SubmissionId;
    testCases: Record<TestCaseId, TestCaseGrade>;
}
",
                    "name": "GradedResponseV2.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { TestCaseId } from \\"../../problemV2/types/TestCaseId\\";
import { TestCaseGrade } from \\"./TestCaseGrade\\";

export interface GradedTestCaseUpdate {
    testCaseId: TestCaseId;
    grade: TestCaseGrade;
}
",
                    "name": "GradedTestCaseUpdate.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { ProblemId } from \\"../../commons/types/ProblemId\\";

export interface InitializeProblemRequest {
    problemId: ProblemId;
    problemVersion: number | null | undefined;
}
",
                    "name": "InitializeProblemRequest.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { ExceptionInfo } from \\"./ExceptionInfo\\";

export interface InternalError {
    exceptionInfo: ExceptionInfo;
}
",
                    "name": "InternalError.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../..\\";

export type InvalidRequestCause =
    /**
     * The submission request references a submission id that doesn't exist. */
    | InvalidRequestCause.SubmissionIdNotFound
    | InvalidRequestCause.CustomTestCasesUnsupported
    /**
     * The submission request was routed to an incorrect language executor. */
    | InvalidRequestCause.UnexpectedLanguage;

export declare namespace InvalidRequestCause {
    interface SubmissionIdNotFound extends model.SubmissionIdNotFound {
        _type: \\"submissionIdNotFound\\";
    }

    interface CustomTestCasesUnsupported extends model.CustomTestCasesUnsupported {
        _type: \\"customTestCasesUnsupported\\";
    }

    interface UnexpectedLanguage extends model.UnexpectedLanguageError {
        _type: \\"unexpectedLanguage\\";
    }

    export interface _Visitor<Result> {
        submissionIdNotFound: (value: model.SubmissionIdNotFound) => Result;
        customTestCasesUnsupported: (value: model.CustomTestCasesUnsupported) => Result;
        unexpectedLanguage: (value: model.UnexpectedLanguageError) => Result;
        _unknown: () => Result;
    }
}

export const InvalidRequestCause = {
    submissionIdNotFound: (value: model.SubmissionIdNotFound): InvalidRequestCause.SubmissionIdNotFound => ({
        ...value,
        _type: \\"submissionIdNotFound\\"
    }),

    customTestCasesUnsupported: (value: model.CustomTestCasesUnsupported): InvalidRequestCause.CustomTestCasesUnsupported => ({
        ...value,
        _type: \\"customTestCasesUnsupported\\"
    }),

    unexpectedLanguage: (value: model.UnexpectedLanguageError): InvalidRequestCause.UnexpectedLanguage => ({
        ...value,
        _type: \\"unexpectedLanguage\\"
    }),

    _visit: <Result>(value: InvalidRequestCause, visitor: InvalidRequestCause._Visitor<Result>): Result => {
        switch (value._type) {
            case \\"submissionIdNotFound\\": return visitor.submissionIdNotFound(value);
            case \\"customTestCasesUnsupported\\": return visitor.customTestCasesUnsupported(value);
            case \\"unexpectedLanguage\\": return visitor.unexpectedLanguage(value);
            default: return visitor._unknown();
        }
    },

    _types: (): InvalidRequestCause[\\"_type\\"][] => [\\"submissionIdNotFound\\", \\"customTestCasesUnsupported\\", \\"unexpectedLanguage\\"],
} as const;
",
                    "name": "InvalidRequestCause.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { SubmissionRequest } from \\"./SubmissionRequest\\";
import { InvalidRequestCause } from \\"./InvalidRequestCause\\";

export interface InvalidRequestResponse {
    request: SubmissionRequest;
    cause: InvalidRequestCause;
}
",
                    "name": "InvalidRequestResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export interface LightweightStackframeInformation {
    numStackFrames: number;
    topStackFrameMethodName: string;
}
",
                    "name": "LightweightStackframeInformation.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { SubmissionId } from \\"./SubmissionId\\";

export interface RecordedResponseNotification {
    submissionId: SubmissionId;
    traceResponsesSize: number;
    testCaseId: string | null | undefined;
}
",
                    "name": "RecordedResponseNotification.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { TestCaseId } from \\"../../problemV2/types/TestCaseId\\";

export interface RecordedTestCaseUpdate {
    testCaseId: TestCaseId;
    traceResponsesSize: number;
}
",
                    "name": "RecordedTestCaseUpdate.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { SubmissionId } from \\"./SubmissionId\\";
import { LightweightStackframeInformation } from \\"./LightweightStackframeInformation\\";
import { TracedFile } from \\"./TracedFile\\";

export interface RecordingResponseNotification {
    submissionId: SubmissionId;
    testCaseId: string | null | undefined;
    lineNumber: number;
    lightweightStackInfo: LightweightStackframeInformation;
    tracedFile: TracedFile | null | undefined;
}
",
                    "name": "RecordingResponseNotification.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { SubmissionId } from \\"./SubmissionId\\";
import { RunningSubmissionState } from \\"./RunningSubmissionState\\";

export interface RunningResponse {
    submissionId: SubmissionId;
    state: RunningSubmissionState;
}
",
                    "name": "RunningResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export type RunningSubmissionState =
    | \\"QUEUEING_SUBMISSION\\"
    | \\"KILLING_HISTORICAL_SUBMISSIONS\\"
    | \\"WRITING_SUBMISSION_TO_FILE\\"
    | \\"COMPILING_SUBMISSION\\"
    | \\"RUNNING_SUBMISSION\\";

export const RunningSubmissionState = {
    QueueingSubmission: \\"QUEUEING_SUBMISSION\\",
    KillingHistoricalSubmissions: \\"KILLING_HISTORICAL_SUBMISSIONS\\",
    WritingSubmissionToFile: \\"WRITING_SUBMISSION_TO_FILE\\",
    CompilingSubmission: \\"COMPILING_SUBMISSION\\",
    RunningSubmission: \\"RUNNING_SUBMISSION\\",

    _visit: <Result>(value: RunningSubmissionState, visitor: RunningSubmissionState._Visitor<Result>): Result => {
        switch (value) {
            case RunningSubmissionState.QueueingSubmission: return visitor.queueingSubmission();
            case RunningSubmissionState.KillingHistoricalSubmissions: return visitor.killingHistoricalSubmissions();
            case RunningSubmissionState.WritingSubmissionToFile: return visitor.writingSubmissionToFile();
            case RunningSubmissionState.CompilingSubmission: return visitor.compilingSubmission();
            case RunningSubmissionState.RunningSubmission: return visitor.runningSubmission();
            default: return visitor._unknown();
        }
    },

    _values: (): RunningSubmissionState[] => [RunningSubmissionState.QueueingSubmission, RunningSubmissionState.KillingHistoricalSubmissions, RunningSubmissionState.WritingSubmissionToFile, RunningSubmissionState.CompilingSubmission, RunningSubmissionState.RunningSubmission],
} as const;

export declare namespace RunningSubmissionState {
    type QueueingSubmission = \\"QUEUEING_SUBMISSION\\";
    type KillingHistoricalSubmissions = \\"KILLING_HISTORICAL_SUBMISSIONS\\";
    type WritingSubmissionToFile = \\"WRITING_SUBMISSION_TO_FILE\\";
    type CompilingSubmission = \\"COMPILING_SUBMISSION\\";
    type RunningSubmission = \\"RUNNING_SUBMISSION\\";

    export interface _Visitor<Result> {
        queueingSubmission: () => Result;
        killingHistoricalSubmissions: () => Result;
        writingSubmissionToFile: () => Result;
        compilingSubmission: () => Result;
        runningSubmission: () => Result;
        _unknown: () => Result;
    }
}
",
                    "name": "RunningSubmissionState.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export interface RuntimeError {
    message: string;
}
",
                    "name": "RuntimeError.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { DebugVariableValue } from \\"../../commons/types/DebugVariableValue\\";

export interface Scope {
    variables: Record<string, DebugVariableValue>;
}
",
                    "name": "Scope.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export type ShareId = string & {
    __ShareId: void;
};

export const ShareId = {
    of: (value: string): ShareId => value as ShareId
};
",
                    "name": "ShareId.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { Scope } from \\"./Scope\\";

export interface StackFrame {
    methodName: string;
    lineNumber: number;
    scopes: Scope[];
}
",
                    "name": "StackFrame.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { StackFrame } from \\"./StackFrame\\";

export interface StackInformation {
    numStackFrames: number;
    topStackFrame: StackFrame | null | undefined;
}
",
                    "name": "StackInformation.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { SubmissionId } from \\"./SubmissionId\\";

export interface StderrResponse {
    submissionId: SubmissionId;
    stderr: string;
}
",
                    "name": "StderrResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { SubmissionId } from \\"./SubmissionId\\";

export interface StdoutResponse {
    submissionId: SubmissionId;
    stdout: string;
}
",
                    "name": "StdoutResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { SubmissionId } from \\"./SubmissionId\\";

export interface StopRequest {
    submissionId: SubmissionId;
}
",
                    "name": "StopRequest.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { SubmissionId } from \\"./SubmissionId\\";

export interface StoppedResponse {
    submissionId: SubmissionId;
}
",
                    "name": "StoppedResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export interface SubmissionFileInfo {
    directory: string;
    filename: string;
    contents: string;
}
",
                    "name": "SubmissionFileInfo.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export type SubmissionId = string & {
    __SubmissionId: void;
};

export const SubmissionId = {
    of: (value: string): SubmissionId => value as SubmissionId
};
",
                    "name": "SubmissionId.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { SubmissionId } from \\"./SubmissionId\\";

export interface SubmissionIdNotFound {
    missingSubmissionId: SubmissionId;
}
",
                    "name": "SubmissionIdNotFound.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../..\\";

export type SubmissionRequest =
    | SubmissionRequest.InitializeProblemRequest
    | SubmissionRequest.InitializeWorkspaceRequest
    | SubmissionRequest.SubmitV2
    | SubmissionRequest.WorkspaceSubmit
    | SubmissionRequest.Stop;

export declare namespace SubmissionRequest {
    interface InitializeProblemRequest extends model.InitializeProblemRequest {
        _type: \\"initializeProblemRequest\\";
    }

    interface InitializeWorkspaceRequest {
        _type: \\"initializeWorkspaceRequest\\";
    }

    interface SubmitV2 extends model.SubmitRequestV2 {
        _type: \\"submitV2\\";
    }

    interface WorkspaceSubmit extends model.WorkspaceSubmitRequest {
        _type: \\"workspaceSubmit\\";
    }

    interface Stop extends model.StopRequest {
        _type: \\"stop\\";
    }

    export interface _Visitor<Result> {
        initializeProblemRequest: (value: model.InitializeProblemRequest) => Result;
        initializeWorkspaceRequest: () => Result;
        submitV2: (value: model.SubmitRequestV2) => Result;
        workspaceSubmit: (value: model.WorkspaceSubmitRequest) => Result;
        stop: (value: model.StopRequest) => Result;
        _unknown: () => Result;
    }
}

export const SubmissionRequest = {
    initializeProblemRequest: (value: model.InitializeProblemRequest): SubmissionRequest.InitializeProblemRequest => ({
        ...value,
        _type: \\"initializeProblemRequest\\"
    }),

    initializeWorkspaceRequest: (): SubmissionRequest.InitializeWorkspaceRequest => ({
        _type: \\"initializeWorkspaceRequest\\"
    }),

    submitV2: (value: model.SubmitRequestV2): SubmissionRequest.SubmitV2 => ({
        ...value,
        _type: \\"submitV2\\"
    }),

    workspaceSubmit: (value: model.WorkspaceSubmitRequest): SubmissionRequest.WorkspaceSubmit => ({
        ...value,
        _type: \\"workspaceSubmit\\"
    }),

    stop: (value: model.StopRequest): SubmissionRequest.Stop => ({
        ...value,
        _type: \\"stop\\"
    }),

    _visit: <Result>(value: SubmissionRequest, visitor: SubmissionRequest._Visitor<Result>): Result => {
        switch (value._type) {
            case \\"initializeProblemRequest\\": return visitor.initializeProblemRequest(value);
            case \\"initializeWorkspaceRequest\\": return visitor.initializeWorkspaceRequest();
            case \\"submitV2\\": return visitor.submitV2(value);
            case \\"workspaceSubmit\\": return visitor.workspaceSubmit(value);
            case \\"stop\\": return visitor.stop(value);
            default: return visitor._unknown();
        }
    },

    _types: (): SubmissionRequest[\\"_type\\"][] => [\\"initializeProblemRequest\\", \\"initializeWorkspaceRequest\\", \\"submitV2\\", \\"workspaceSubmit\\", \\"stop\\"],
} as const;
",
                    "name": "SubmissionRequest.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../..\\";

export type SubmissionResponse =
    | SubmissionResponse.ServerInitialized
    | SubmissionResponse.ProblemInitialized
    | SubmissionResponse.WorkspaceInitialized
    | SubmissionResponse.ServerErrored
    | SubmissionResponse.CodeExecutionUpdate
    | SubmissionResponse.Terminated;

export declare namespace SubmissionResponse {
    interface ServerInitialized {
        _type: \\"serverInitialized\\";
    }

    interface ProblemInitialized {
        _type: \\"problemInitialized\\";
        problemInitialized: model.ProblemId;
    }

    interface WorkspaceInitialized {
        _type: \\"workspaceInitialized\\";
    }

    interface ServerErrored extends model.ExceptionInfo {
        _type: \\"serverErrored\\";
    }

    interface CodeExecutionUpdate {
        _type: \\"codeExecutionUpdate\\";
        codeExecutionUpdate: model.CodeExecutionUpdate;
    }

    interface Terminated extends model.TerminatedResponse {
        _type: \\"terminated\\";
    }

    export interface _Visitor<Result> {
        serverInitialized: () => Result;
        problemInitialized: (value: model.ProblemId) => Result;
        workspaceInitialized: () => Result;
        serverErrored: (value: model.ExceptionInfo) => Result;
        codeExecutionUpdate: (value: model.CodeExecutionUpdate) => Result;
        terminated: (value: model.TerminatedResponse) => Result;
        _unknown: () => Result;
    }
}

export const SubmissionResponse = {
    serverInitialized: (): SubmissionResponse.ServerInitialized => ({
        _type: \\"serverInitialized\\"
    }),

    problemInitialized: (value: model.ProblemId): SubmissionResponse.ProblemInitialized => ({
        problemInitialized: value,
        _type: \\"problemInitialized\\"
    }),

    workspaceInitialized: (): SubmissionResponse.WorkspaceInitialized => ({
        _type: \\"workspaceInitialized\\"
    }),

    serverErrored: (value: model.ExceptionInfo): SubmissionResponse.ServerErrored => ({
        ...value,
        _type: \\"serverErrored\\"
    }),

    codeExecutionUpdate: (value: model.CodeExecutionUpdate): SubmissionResponse.CodeExecutionUpdate => ({
        codeExecutionUpdate: value,
        _type: \\"codeExecutionUpdate\\"
    }),

    terminated: (value: model.TerminatedResponse): SubmissionResponse.Terminated => ({
        ...value,
        _type: \\"terminated\\"
    }),

    _visit: <Result>(value: SubmissionResponse, visitor: SubmissionResponse._Visitor<Result>): Result => {
        switch (value._type) {
            case \\"serverInitialized\\": return visitor.serverInitialized();
            case \\"problemInitialized\\": return visitor.problemInitialized(value.problemInitialized);
            case \\"workspaceInitialized\\": return visitor.workspaceInitialized();
            case \\"serverErrored\\": return visitor.serverErrored(value);
            case \\"codeExecutionUpdate\\": return visitor.codeExecutionUpdate(value.codeExecutionUpdate);
            case \\"terminated\\": return visitor.terminated(value);
            default: return visitor._unknown();
        }
    },

    _types: (): SubmissionResponse[\\"_type\\"][] => [\\"serverInitialized\\", \\"problemInitialized\\", \\"workspaceInitialized\\", \\"serverErrored\\", \\"codeExecutionUpdate\\", \\"terminated\\"],
} as const;
",
                    "name": "SubmissionResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { datetime } from \\"./datetime\\";
import { Language } from \\"../../commons/types/Language\\";
import { SubmissionTypeState } from \\"./SubmissionTypeState\\";

export interface SubmissionState {
    timeSubmitted: datetime | null | undefined;
    submission: string;
    language: Language;
    submissionTypeState: SubmissionTypeState;
}
",
                    "name": "SubmissionState.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { datetime } from \\"./datetime\\";
import { Language } from \\"../../commons/types/Language\\";
import { SubmissionFileInfo } from \\"./SubmissionFileInfo\\";
import { SubmissionStatusV2 } from \\"./SubmissionStatusV2\\";

export interface SubmissionStateV2 {
    timeSubmitted: datetime;
    language: Language;
    submissionFiles: SubmissionFileInfo[];
    submissionStatus: SubmissionStatusV2;
}
",
                    "name": "SubmissionStateV2.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../..\\";

export type SubmissionStatusForTestCase =
    | SubmissionStatusForTestCase.Graded
    | SubmissionStatusForTestCase.GradedV2
    | SubmissionStatusForTestCase.Traced;

export declare namespace SubmissionStatusForTestCase {
    interface Graded extends model.TestCaseResultWithStdout {
        _type: \\"graded\\";
    }

    interface GradedV2 {
        _type: \\"gradedV2\\";
        gradedV2: model.TestCaseGrade;
    }

    interface Traced extends model.TracedTestCase {
        _type: \\"traced\\";
    }

    export interface _Visitor<Result> {
        graded: (value: model.TestCaseResultWithStdout) => Result;
        gradedV2: (value: model.TestCaseGrade) => Result;
        traced: (value: model.TracedTestCase) => Result;
        _unknown: () => Result;
    }
}

export const SubmissionStatusForTestCase = {
    graded: (value: model.TestCaseResultWithStdout): SubmissionStatusForTestCase.Graded => ({
        ...value,
        _type: \\"graded\\"
    }),

    gradedV2: (value: model.TestCaseGrade): SubmissionStatusForTestCase.GradedV2 => ({
        gradedV2: value,
        _type: \\"gradedV2\\"
    }),

    traced: (value: model.TracedTestCase): SubmissionStatusForTestCase.Traced => ({
        ...value,
        _type: \\"traced\\"
    }),

    _visit: <Result>(value: SubmissionStatusForTestCase, visitor: SubmissionStatusForTestCase._Visitor<Result>): Result => {
        switch (value._type) {
            case \\"graded\\": return visitor.graded(value);
            case \\"gradedV2\\": return visitor.gradedV2(value.gradedV2);
            case \\"traced\\": return visitor.traced(value);
            default: return visitor._unknown();
        }
    },

    _types: (): SubmissionStatusForTestCase[\\"_type\\"][] => [\\"graded\\", \\"gradedV2\\", \\"traced\\"],
} as const;
",
                    "name": "SubmissionStatusForTestCase.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../..\\";

export type SubmissionStatusV2 =
    | SubmissionStatusV2.Test
    | SubmissionStatusV2.Workspace;

export declare namespace SubmissionStatusV2 {
    interface Test extends model.TestSubmissionStatusV2 {
        _type: \\"test\\";
    }

    interface Workspace extends model.WorkspaceSubmissionStatusV2 {
        _type: \\"workspace\\";
    }

    export interface _Visitor<Result> {
        test: (value: model.TestSubmissionStatusV2) => Result;
        workspace: (value: model.WorkspaceSubmissionStatusV2) => Result;
        _unknown: () => Result;
    }
}

export const SubmissionStatusV2 = {
    test: (value: model.TestSubmissionStatusV2): SubmissionStatusV2.Test => ({
        ...value,
        _type: \\"test\\"
    }),

    workspace: (value: model.WorkspaceSubmissionStatusV2): SubmissionStatusV2.Workspace => ({
        ...value,
        _type: \\"workspace\\"
    }),

    _visit: <Result>(value: SubmissionStatusV2, visitor: SubmissionStatusV2._Visitor<Result>): Result => {
        switch (value._type) {
            case \\"test\\": return visitor.test(value);
            case \\"workspace\\": return visitor.workspace(value);
            default: return visitor._unknown();
        }
    },

    _types: (): SubmissionStatusV2[\\"_type\\"][] => [\\"test\\", \\"workspace\\"],
} as const;
",
                    "name": "SubmissionStatusV2.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * Keep in sync with SubmissionType.
 */
export type SubmissionTypeEnum =
    | \\"TEST\\";

export const SubmissionTypeEnum = {
    Test: \\"TEST\\",

    _visit: <Result>(value: SubmissionTypeEnum, visitor: SubmissionTypeEnum._Visitor<Result>): Result => {
        switch (value) {
            case SubmissionTypeEnum.Test: return visitor.test();
            default: return visitor._unknown();
        }
    },

    _values: (): SubmissionTypeEnum[] => [SubmissionTypeEnum.Test],
} as const;

export declare namespace SubmissionTypeEnum {
    type Test = \\"TEST\\";

    export interface _Visitor<Result> {
        test: () => Result;
        _unknown: () => Result;
    }
}
",
                    "name": "SubmissionTypeEnum.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../..\\";

export type SubmissionTypeState =
    | SubmissionTypeState.Test
    | SubmissionTypeState.Workspace;

export declare namespace SubmissionTypeState {
    interface Test extends model.TestSubmissionState {
        _type: \\"test\\";
    }

    interface Workspace extends model.WorkspaceSubmissionState {
        _type: \\"workspace\\";
    }

    export interface _Visitor<Result> {
        test: (value: model.TestSubmissionState) => Result;
        workspace: (value: model.WorkspaceSubmissionState) => Result;
        _unknown: () => Result;
    }
}

export const SubmissionTypeState = {
    test: (value: model.TestSubmissionState): SubmissionTypeState.Test => ({
        ...value,
        _type: \\"test\\"
    }),

    workspace: (value: model.WorkspaceSubmissionState): SubmissionTypeState.Workspace => ({
        ...value,
        _type: \\"workspace\\"
    }),

    _visit: <Result>(value: SubmissionTypeState, visitor: SubmissionTypeState._Visitor<Result>): Result => {
        switch (value._type) {
            case \\"test\\": return visitor.test(value);
            case \\"workspace\\": return visitor.workspace(value);
            default: return visitor._unknown();
        }
    },

    _types: (): SubmissionTypeState[\\"_type\\"][] => [\\"test\\", \\"workspace\\"],
} as const;
",
                    "name": "SubmissionTypeState.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { SubmissionId } from \\"./SubmissionId\\";
import { Language } from \\"../../commons/types/Language\\";
import { SubmissionFileInfo } from \\"./SubmissionFileInfo\\";
import { ProblemId } from \\"../../commons/types/ProblemId\\";

export interface SubmitRequestV2 {
    submissionId: SubmissionId;
    language: Language;
    submissionFiles: SubmissionFileInfo[];
    problemId: ProblemId;
    problemVersion: number | null | undefined;
    userId: string | null | undefined;
}
",
                    "name": "SubmitRequestV2.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export interface TerminatedResponse {
}
",
                    "name": "TerminatedResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../..\\";

export type TestCaseGrade =
    | TestCaseGrade.Hidden
    | TestCaseGrade.NonHidden;

export declare namespace TestCaseGrade {
    interface Hidden extends model.TestCaseHiddenGrade {
        _type: \\"hidden\\";
    }

    interface NonHidden extends model.TestCaseNonHiddenGrade {
        _type: \\"nonHidden\\";
    }

    export interface _Visitor<Result> {
        hidden: (value: model.TestCaseHiddenGrade) => Result;
        nonHidden: (value: model.TestCaseNonHiddenGrade) => Result;
        _unknown: () => Result;
    }
}

export const TestCaseGrade = {
    hidden: (value: model.TestCaseHiddenGrade): TestCaseGrade.Hidden => ({
        ...value,
        _type: \\"hidden\\"
    }),

    nonHidden: (value: model.TestCaseNonHiddenGrade): TestCaseGrade.NonHidden => ({
        ...value,
        _type: \\"nonHidden\\"
    }),

    _visit: <Result>(value: TestCaseGrade, visitor: TestCaseGrade._Visitor<Result>): Result => {
        switch (value._type) {
            case \\"hidden\\": return visitor.hidden(value);
            case \\"nonHidden\\": return visitor.nonHidden(value);
            default: return visitor._unknown();
        }
    },

    _types: (): TestCaseGrade[\\"_type\\"][] => [\\"hidden\\", \\"nonHidden\\"],
} as const;
",
                    "name": "TestCaseGrade.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export interface TestCaseHiddenGrade {
    passed: boolean;
}
",
                    "name": "TestCaseHiddenGrade.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { VariableValue } from \\"../../commons/types/VariableValue\\";
import { ExceptionV2 } from \\"./ExceptionV2\\";

export interface TestCaseNonHiddenGrade {
    passed: boolean;
    actualResult: VariableValue | null | undefined;
    exception: ExceptionV2 | null | undefined;
    stdout: string;
}
",
                    "name": "TestCaseNonHiddenGrade.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { VariableValue } from \\"../../commons/types/VariableValue\\";
import { ActualResult } from \\"./ActualResult\\";

export interface TestCaseResult {
    expectedResult: VariableValue;
    actualResult: ActualResult;
    passed: boolean;
}
",
                    "name": "TestCaseResult.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { TestCaseResult } from \\"./TestCaseResult\\";

export interface TestCaseResultWithStdout {
    result: TestCaseResult;
    stdout: string;
}
",
                    "name": "TestCaseResultWithStdout.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { ProblemId } from \\"../../commons/types/ProblemId\\";
import { TestCase } from \\"../../commons/types/TestCase\\";
import { TestSubmissionStatus } from \\"./TestSubmissionStatus\\";

export interface TestSubmissionState {
    problemId: ProblemId;
    defaultTestCases: TestCase[];
    customTestCases: TestCase[];
    status: TestSubmissionStatus;
}
",
                    "name": "TestSubmissionState.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../..\\";
import { SubmissionStatusForTestCase } from \\"./SubmissionStatusForTestCase\\";

export type TestSubmissionStatus =
    | TestSubmissionStatus.Stopped
    | TestSubmissionStatus.Errored
    | TestSubmissionStatus.Running
    | TestSubmissionStatus.TestCaseIdToState;

export declare namespace TestSubmissionStatus {
    interface Stopped {
        _type: \\"stopped\\";
    }

    interface Errored {
        _type: \\"errored\\";
        errored: model.ErrorInfo;
    }

    interface Running {
        _type: \\"running\\";
        running: model.RunningSubmissionState;
    }

    interface TestCaseIdToState {
        _type: \\"testCaseIdToState\\";
        testCaseIdToState: Record<string, SubmissionStatusForTestCase>;
    }

    export interface _Visitor<Result> {
        stopped: () => Result;
        errored: (value: model.ErrorInfo) => Result;
        running: (value: model.RunningSubmissionState) => Result;
        testCaseIdToState: (value: Record<string, SubmissionStatusForTestCase>) => Result;
        _unknown: () => Result;
    }
}

export const TestSubmissionStatus = {
    stopped: (): TestSubmissionStatus.Stopped => ({
        _type: \\"stopped\\"
    }),

    errored: (value: model.ErrorInfo): TestSubmissionStatus.Errored => ({
        errored: value,
        _type: \\"errored\\"
    }),

    running: (value: model.RunningSubmissionState): TestSubmissionStatus.Running => ({
        running: value,
        _type: \\"running\\"
    }),

    testCaseIdToState: (value: Record<string, SubmissionStatusForTestCase>): TestSubmissionStatus.TestCaseIdToState => ({
        testCaseIdToState: value,
        _type: \\"testCaseIdToState\\"
    }),

    _visit: <Result>(value: TestSubmissionStatus, visitor: TestSubmissionStatus._Visitor<Result>): Result => {
        switch (value._type) {
            case \\"stopped\\": return visitor.stopped();
            case \\"errored\\": return visitor.errored(value.errored);
            case \\"running\\": return visitor.running(value.running);
            case \\"testCaseIdToState\\": return visitor.testCaseIdToState(value.testCaseIdToState);
            default: return visitor._unknown();
        }
    },

    _types: (): TestSubmissionStatus[\\"_type\\"][] => [\\"stopped\\", \\"errored\\", \\"running\\", \\"testCaseIdToState\\"],
} as const;
",
                    "name": "TestSubmissionStatus.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { TestSubmissionUpdate } from \\"./TestSubmissionUpdate\\";
import { ProblemId } from \\"../../commons/types/ProblemId\\";
import { ProblemInfoV2 } from \\"../../problemV2/types/ProblemInfoV2\\";

export interface TestSubmissionStatusV2 {
    updates: TestSubmissionUpdate[];
    problemId: ProblemId;
    problemVersion: number;
    problemInfo: ProblemInfoV2;
}
",
                    "name": "TestSubmissionStatusV2.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { datetime } from \\"./datetime\\";
import { TestSubmissionUpdateInfo } from \\"./TestSubmissionUpdateInfo\\";

export interface TestSubmissionUpdate {
    updateTime: datetime;
    updateInfo: TestSubmissionUpdateInfo;
}
",
                    "name": "TestSubmissionUpdate.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../..\\";

export type TestSubmissionUpdateInfo =
    | TestSubmissionUpdateInfo.Running
    | TestSubmissionUpdateInfo.Stopped
    | TestSubmissionUpdateInfo.Errored
    | TestSubmissionUpdateInfo.GradedTestCase
    | TestSubmissionUpdateInfo.RecordedTestCase
    | TestSubmissionUpdateInfo.Finished;

export declare namespace TestSubmissionUpdateInfo {
    interface Running {
        _type: \\"running\\";
        running: model.RunningSubmissionState;
    }

    interface Stopped {
        _type: \\"stopped\\";
    }

    interface Errored {
        _type: \\"errored\\";
        errored: model.ErrorInfo;
    }

    interface GradedTestCase extends model.GradedTestCaseUpdate {
        _type: \\"gradedTestCase\\";
    }

    interface RecordedTestCase extends model.RecordedTestCaseUpdate {
        _type: \\"recordedTestCase\\";
    }

    interface Finished {
        _type: \\"finished\\";
    }

    export interface _Visitor<Result> {
        running: (value: model.RunningSubmissionState) => Result;
        stopped: () => Result;
        errored: (value: model.ErrorInfo) => Result;
        gradedTestCase: (value: model.GradedTestCaseUpdate) => Result;
        recordedTestCase: (value: model.RecordedTestCaseUpdate) => Result;
        finished: () => Result;
        _unknown: () => Result;
    }
}

export const TestSubmissionUpdateInfo = {
    running: (value: model.RunningSubmissionState): TestSubmissionUpdateInfo.Running => ({
        running: value,
        _type: \\"running\\"
    }),

    stopped: (): TestSubmissionUpdateInfo.Stopped => ({
        _type: \\"stopped\\"
    }),

    errored: (value: model.ErrorInfo): TestSubmissionUpdateInfo.Errored => ({
        errored: value,
        _type: \\"errored\\"
    }),

    gradedTestCase: (value: model.GradedTestCaseUpdate): TestSubmissionUpdateInfo.GradedTestCase => ({
        ...value,
        _type: \\"gradedTestCase\\"
    }),

    recordedTestCase: (value: model.RecordedTestCaseUpdate): TestSubmissionUpdateInfo.RecordedTestCase => ({
        ...value,
        _type: \\"recordedTestCase\\"
    }),

    finished: (): TestSubmissionUpdateInfo.Finished => ({
        _type: \\"finished\\"
    }),

    _visit: <Result>(value: TestSubmissionUpdateInfo, visitor: TestSubmissionUpdateInfo._Visitor<Result>): Result => {
        switch (value._type) {
            case \\"running\\": return visitor.running(value.running);
            case \\"stopped\\": return visitor.stopped();
            case \\"errored\\": return visitor.errored(value.errored);
            case \\"gradedTestCase\\": return visitor.gradedTestCase(value);
            case \\"recordedTestCase\\": return visitor.recordedTestCase(value);
            case \\"finished\\": return visitor.finished();
            default: return visitor._unknown();
        }
    },

    _types: (): TestSubmissionUpdateInfo[\\"_type\\"][] => [\\"running\\", \\"stopped\\", \\"errored\\", \\"gradedTestCase\\", \\"recordedTestCase\\", \\"finished\\"],
} as const;
",
                    "name": "TestSubmissionUpdateInfo.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { SubmissionId } from \\"./SubmissionId\\";
import { DebugVariableValue } from \\"../../commons/types/DebugVariableValue\\";
import { ExpressionLocation } from \\"./ExpressionLocation\\";
import { StackInformation } from \\"./StackInformation\\";

export interface TraceResponse {
    submissionId: SubmissionId;
    lineNumber: number;
    returnValue: DebugVariableValue | null | undefined;
    expressionLocation: ExpressionLocation | null | undefined;
    stack: StackInformation;
    stdout: string | null | undefined;
}
",
                    "name": "TraceResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { SubmissionId } from \\"./SubmissionId\\";
import { TracedFile } from \\"./TracedFile\\";
import { DebugVariableValue } from \\"../../commons/types/DebugVariableValue\\";
import { ExpressionLocation } from \\"./ExpressionLocation\\";
import { StackInformation } from \\"./StackInformation\\";

export interface TraceResponseV2 {
    submissionId: SubmissionId;
    lineNumber: number;
    file: TracedFile;
    returnValue: DebugVariableValue | null | undefined;
    expressionLocation: ExpressionLocation | null | undefined;
    stack: StackInformation;
    stdout: string | null | undefined;
}
",
                    "name": "TraceResponseV2.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { TraceResponse } from \\"./TraceResponse\\";

export interface TraceResponsesPage {
    /**
     * If present, use this to load subseqent pages.
     * The offset is the id of the next trace response to load.
     *
     */
    offset: number | null | undefined;
    traceResponses: TraceResponse[];
}
",
                    "name": "TraceResponsesPage.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { TraceResponseV2 } from \\"./TraceResponseV2\\";

export interface TraceResponsesPageV2 {
    /**
     * If present, use this to load subseqent pages.
     * The offset is the id of the next trace response to load.
     *
     */
    offset: number | null | undefined;
    traceResponses: TraceResponseV2[];
}
",
                    "name": "TraceResponsesPageV2.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export interface TracedFile {
    filename: string;
    directory: string;
}
",
                    "name": "TracedFile.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { TestCaseResultWithStdout } from \\"./TestCaseResultWithStdout\\";

export interface TracedTestCase {
    result: TestCaseResultWithStdout;
    traceResponsesSize: number;
}
",
                    "name": "TracedTestCase.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { Language } from \\"../../commons/types/Language\\";

export interface UnexpectedLanguageError {
    expectedLanguage: Language;
    actualLanguage: Language;
}
",
                    "name": "UnexpectedLanguageError.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { FileInfo } from \\"../../commons/types/FileInfo\\";

export interface WorkspaceFiles {
    mainFile: FileInfo;
    readOnlyFiles: FileInfo[];
}
",
                    "name": "WorkspaceFiles.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { SubmissionId } from \\"./SubmissionId\\";
import { WorkspaceRunDetails } from \\"./WorkspaceRunDetails\\";

export interface WorkspaceRanResponse {
    submissionId: SubmissionId;
    runDetails: WorkspaceRunDetails;
}
",
                    "name": "WorkspaceRanResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { ExceptionV2 } from \\"./ExceptionV2\\";
import { ExceptionInfo } from \\"./ExceptionInfo\\";

export interface WorkspaceRunDetails {
    exceptionV2: ExceptionV2 | null | undefined;
    exception: ExceptionInfo | null | undefined;
    stdout: string;
}
",
                    "name": "WorkspaceRunDetails.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { Language } from \\"../../commons/types/Language\\";
import { WorkspaceFiles } from \\"./WorkspaceFiles\\";

export interface WorkspaceStarterFilesResponse {
    files: Record<Language, WorkspaceFiles>;
}
",
                    "name": "WorkspaceStarterFilesResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { Language } from \\"../../commons/types/Language\\";
import { Files } from \\"../../problemV2/types/Files\\";

export interface WorkspaceStarterFilesResponseV2 {
    filesByLanguage: Record<Language, Files>;
}
",
                    "name": "WorkspaceStarterFilesResponseV2.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { WorkspaceSubmissionStatus } from \\"./WorkspaceSubmissionStatus\\";

export interface WorkspaceSubmissionState {
    status: WorkspaceSubmissionStatus;
}
",
                    "name": "WorkspaceSubmissionState.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../..\\";

export type WorkspaceSubmissionStatus =
    | WorkspaceSubmissionStatus.Stopped
    | WorkspaceSubmissionStatus.Errored
    | WorkspaceSubmissionStatus.Running
    | WorkspaceSubmissionStatus.Ran
    | WorkspaceSubmissionStatus.Traced;

export declare namespace WorkspaceSubmissionStatus {
    interface Stopped {
        _type: \\"stopped\\";
    }

    interface Errored {
        _type: \\"errored\\";
        errored: model.ErrorInfo;
    }

    interface Running {
        _type: \\"running\\";
        running: model.RunningSubmissionState;
    }

    interface Ran extends model.WorkspaceRunDetails {
        _type: \\"ran\\";
    }

    interface Traced extends model.WorkspaceRunDetails {
        _type: \\"traced\\";
    }

    export interface _Visitor<Result> {
        stopped: () => Result;
        errored: (value: model.ErrorInfo) => Result;
        running: (value: model.RunningSubmissionState) => Result;
        ran: (value: model.WorkspaceRunDetails) => Result;
        traced: (value: model.WorkspaceRunDetails) => Result;
        _unknown: () => Result;
    }
}

export const WorkspaceSubmissionStatus = {
    stopped: (): WorkspaceSubmissionStatus.Stopped => ({
        _type: \\"stopped\\"
    }),

    errored: (value: model.ErrorInfo): WorkspaceSubmissionStatus.Errored => ({
        errored: value,
        _type: \\"errored\\"
    }),

    running: (value: model.RunningSubmissionState): WorkspaceSubmissionStatus.Running => ({
        running: value,
        _type: \\"running\\"
    }),

    ran: (value: model.WorkspaceRunDetails): WorkspaceSubmissionStatus.Ran => ({
        ...value,
        _type: \\"ran\\"
    }),

    traced: (value: model.WorkspaceRunDetails): WorkspaceSubmissionStatus.Traced => ({
        ...value,
        _type: \\"traced\\"
    }),

    _visit: <Result>(value: WorkspaceSubmissionStatus, visitor: WorkspaceSubmissionStatus._Visitor<Result>): Result => {
        switch (value._type) {
            case \\"stopped\\": return visitor.stopped();
            case \\"errored\\": return visitor.errored(value.errored);
            case \\"running\\": return visitor.running(value.running);
            case \\"ran\\": return visitor.ran(value);
            case \\"traced\\": return visitor.traced(value);
            default: return visitor._unknown();
        }
    },

    _types: (): WorkspaceSubmissionStatus[\\"_type\\"][] => [\\"stopped\\", \\"errored\\", \\"running\\", \\"ran\\", \\"traced\\"],
} as const;
",
                    "name": "WorkspaceSubmissionStatus.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { WorkspaceSubmissionUpdate } from \\"./WorkspaceSubmissionUpdate\\";

export interface WorkspaceSubmissionStatusV2 {
    updates: WorkspaceSubmissionUpdate[];
}
",
                    "name": "WorkspaceSubmissionStatusV2.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { datetime } from \\"./datetime\\";
import { WorkspaceSubmissionUpdateInfo } from \\"./WorkspaceSubmissionUpdateInfo\\";

export interface WorkspaceSubmissionUpdate {
    updateTime: datetime;
    updateInfo: WorkspaceSubmissionUpdateInfo;
}
",
                    "name": "WorkspaceSubmissionUpdate.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import * as model from \\"../..\\";

export type WorkspaceSubmissionUpdateInfo =
    | WorkspaceSubmissionUpdateInfo.Running
    | WorkspaceSubmissionUpdateInfo.Ran
    | WorkspaceSubmissionUpdateInfo.Stopped
    | WorkspaceSubmissionUpdateInfo.Traced
    | WorkspaceSubmissionUpdateInfo.TracedV2
    | WorkspaceSubmissionUpdateInfo.Errored
    | WorkspaceSubmissionUpdateInfo.Finished;

export declare namespace WorkspaceSubmissionUpdateInfo {
    interface Running {
        _type: \\"running\\";
        running: model.RunningSubmissionState;
    }

    interface Ran extends model.WorkspaceRunDetails {
        _type: \\"ran\\";
    }

    interface Stopped {
        _type: \\"stopped\\";
    }

    interface Traced {
        _type: \\"traced\\";
    }

    interface TracedV2 extends model.WorkspaceTracedUpdate {
        _type: \\"tracedV2\\";
    }

    interface Errored {
        _type: \\"errored\\";
        errored: model.ErrorInfo;
    }

    interface Finished {
        _type: \\"finished\\";
    }

    export interface _Visitor<Result> {
        running: (value: model.RunningSubmissionState) => Result;
        ran: (value: model.WorkspaceRunDetails) => Result;
        stopped: () => Result;
        traced: () => Result;
        tracedV2: (value: model.WorkspaceTracedUpdate) => Result;
        errored: (value: model.ErrorInfo) => Result;
        finished: () => Result;
        _unknown: () => Result;
    }
}

export const WorkspaceSubmissionUpdateInfo = {
    running: (value: model.RunningSubmissionState): WorkspaceSubmissionUpdateInfo.Running => ({
        running: value,
        _type: \\"running\\"
    }),

    ran: (value: model.WorkspaceRunDetails): WorkspaceSubmissionUpdateInfo.Ran => ({
        ...value,
        _type: \\"ran\\"
    }),

    stopped: (): WorkspaceSubmissionUpdateInfo.Stopped => ({
        _type: \\"stopped\\"
    }),

    traced: (): WorkspaceSubmissionUpdateInfo.Traced => ({
        _type: \\"traced\\"
    }),

    tracedV2: (value: model.WorkspaceTracedUpdate): WorkspaceSubmissionUpdateInfo.TracedV2 => ({
        ...value,
        _type: \\"tracedV2\\"
    }),

    errored: (value: model.ErrorInfo): WorkspaceSubmissionUpdateInfo.Errored => ({
        errored: value,
        _type: \\"errored\\"
    }),

    finished: (): WorkspaceSubmissionUpdateInfo.Finished => ({
        _type: \\"finished\\"
    }),

    _visit: <Result>(value: WorkspaceSubmissionUpdateInfo, visitor: WorkspaceSubmissionUpdateInfo._Visitor<Result>): Result => {
        switch (value._type) {
            case \\"running\\": return visitor.running(value.running);
            case \\"ran\\": return visitor.ran(value);
            case \\"stopped\\": return visitor.stopped();
            case \\"traced\\": return visitor.traced();
            case \\"tracedV2\\": return visitor.tracedV2(value);
            case \\"errored\\": return visitor.errored(value.errored);
            case \\"finished\\": return visitor.finished();
            default: return visitor._unknown();
        }
    },

    _types: (): WorkspaceSubmissionUpdateInfo[\\"_type\\"][] => [\\"running\\", \\"ran\\", \\"stopped\\", \\"traced\\", \\"tracedV2\\", \\"errored\\", \\"finished\\"],
} as const;
",
                    "name": "WorkspaceSubmissionUpdateInfo.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { SubmissionId } from \\"./SubmissionId\\";
import { Language } from \\"../../commons/types/Language\\";
import { SubmissionFileInfo } from \\"./SubmissionFileInfo\\";

export interface WorkspaceSubmitRequest {
    submissionId: SubmissionId;
    language: Language;
    submissionFiles: SubmissionFileInfo[];
    userId: string | null | undefined;
}
",
                    "name": "WorkspaceSubmitRequest.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export interface WorkspaceTracedUpdate {
    traceResponsesSize: number;
}
",
                    "name": "WorkspaceTracedUpdate.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export * from \\"./ActualResult\\";
export * from \\"./BuildingExecutorResponse\\";
export * from \\"./CodeExecutionUpdate\\";
export * from \\"./CompileError\\";
export * from \\"./CustomTestCasesUnsupported\\";
export * from \\"./ErroredResponse\\";
export * from \\"./ErrorInfo\\";
export * from \\"./ExceptionInfo\\";
export * from \\"./ExceptionV2\\";
export * from \\"./ExecutionSessionResponse\\";
export * from \\"./ExecutionSessionsState\\";
export * from \\"./ExecutionSessionState\\";
export * from \\"./ExecutionSessionStatus\\";
export * from \\"./ExistingSubmissionExecuting\\";
export * from \\"./ExpressionLocation\\";
export * from \\"./FinishedResponse\\";
export * from \\"./GetTraceResponsesPageRequest\\";
export * from \\"./GradedResponse\\";
export * from \\"./GradedResponseV2\\";
export * from \\"./GradedTestCaseUpdate\\";
export * from \\"./InitializeProblemRequest\\";
export * from \\"./InternalError\\";
export * from \\"./InvalidRequestCause\\";
export * from \\"./InvalidRequestResponse\\";
export * from \\"./LightweightStackframeInformation\\";
export * from \\"./RecordedResponseNotification\\";
export * from \\"./RecordedTestCaseUpdate\\";
export * from \\"./RecordingResponseNotification\\";
export * from \\"./RunningResponse\\";
export * from \\"./RunningSubmissionState\\";
export * from \\"./RuntimeError\\";
export * from \\"./Scope\\";
export * from \\"./ShareId\\";
export * from \\"./StackFrame\\";
export * from \\"./StackInformation\\";
export * from \\"./StderrResponse\\";
export * from \\"./StdoutResponse\\";
export * from \\"./StoppedResponse\\";
export * from \\"./StopRequest\\";
export * from \\"./SubmissionFileInfo\\";
export * from \\"./SubmissionId\\";
export * from \\"./SubmissionIdNotFound\\";
export * from \\"./SubmissionRequest\\";
export * from \\"./SubmissionResponse\\";
export * from \\"./SubmissionState\\";
export * from \\"./SubmissionStateV2\\";
export * from \\"./SubmissionStatusForTestCase\\";
export * from \\"./SubmissionStatusV2\\";
export * from \\"./SubmissionTypeEnum\\";
export * from \\"./SubmissionTypeState\\";
export * from \\"./SubmitRequestV2\\";
export * from \\"./TerminatedResponse\\";
export * from \\"./TestCaseGrade\\";
export * from \\"./TestCaseHiddenGrade\\";
export * from \\"./TestCaseNonHiddenGrade\\";
export * from \\"./TestCaseResult\\";
export * from \\"./TestCaseResultWithStdout\\";
export * from \\"./TestSubmissionState\\";
export * from \\"./TestSubmissionStatus\\";
export * from \\"./TestSubmissionStatusV2\\";
export * from \\"./TestSubmissionUpdate\\";
export * from \\"./TestSubmissionUpdateInfo\\";
export * from \\"./TracedFile\\";
export * from \\"./TracedTestCase\\";
export * from \\"./TraceResponse\\";
export * from \\"./TraceResponsesPage\\";
export * from \\"./TraceResponsesPageV2\\";
export * from \\"./TraceResponseV2\\";
export * from \\"./UnexpectedLanguageError\\";
export * from \\"./WorkspaceFiles\\";
export * from \\"./WorkspaceRanResponse\\";
export * from \\"./WorkspaceRunDetails\\";
export * from \\"./WorkspaceStarterFilesResponse\\";
export * from \\"./WorkspaceStarterFilesResponseV2\\";
export * from \\"./WorkspaceSubmissionState\\";
export * from \\"./WorkspaceSubmissionStatus\\";
export * from \\"./WorkspaceSubmissionStatusV2\\";
export * from \\"./WorkspaceSubmissionUpdate\\";
export * from \\"./WorkspaceSubmissionUpdateInfo\\";
export * from \\"./WorkspaceSubmitRequest\\";
export * from \\"./WorkspaceTracedUpdate\\";
",
                    "name": "index.ts",
                    "type": "file",
                  },
                ],
                "name": "types",
                "type": "directory",
              },
            ],
            "name": "submission",
            "type": "directory",
          },
          Object {
            "contents": Array [
              Object {
                "contents": "export * from \\"./service-types\\";
",
                "name": "index.ts",
                "type": "file",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": Array [
                      Object {
                        "contents": "import { Language } from \\"../../../commons/types/Language\\";

export type GetNumWarmInstancesResponse = GetNumWarmInstancesResponse.SuccessResponse | GetNumWarmInstancesResponse.ErrorResponse;

namespace GetNumWarmInstancesResponse {
    export interface SuccessResponse {
        ok: true;
        statusCode: number;
        body: Record<Language, number>;
    }

    export interface ErrorResponse {
        ok: false;
        statusCode: number;
    }
}
",
                        "name": "GetNumWarmInstancesResponse.ts.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { Language } from \\"../../../commons/types/Language\\";

export interface SetNumWarmInstancesRequest {
    language: Language;
    numWarmInstances: number;
}
",
                        "name": "SetNumWarmInstancesRequest.ts.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "export type SetNumWarmInstancesResponse = SetNumWarmInstancesResponse.SuccessResponse | SetNumWarmInstancesResponse.ErrorResponse;

namespace SetNumWarmInstancesResponse {
    export interface SuccessResponse {
        ok: true;
        statusCode: number;
    }

    export interface ErrorResponse {
        ok: false;
        statusCode: number;
    }
}
",
                        "name": "SetNumWarmInstancesResponse.ts.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "export * from \\"./GetNumWarmInstancesResponse.ts\\";
export * from \\"./SetNumWarmInstancesRequest.ts\\";
export * from \\"./SetNumWarmInstancesResponse.ts\\";
",
                        "name": "index.ts",
                        "type": "file",
                      },
                    ],
                    "name": "SysPropCrudService",
                    "type": "directory",
                  },
                  Object {
                    "contents": "export * from \\"./SysPropCrudService\\";
",
                    "name": "index.ts",
                    "type": "file",
                  },
                ],
                "name": "service-types",
                "type": "directory",
              },
            ],
            "name": "sysprop",
            "type": "directory",
          },
        ],
        "name": "model",
        "type": "directory",
      },
      Object {
        "contents": Array [
          Object {
            "contents": Array [
              Object {
                "contents": "import { Fetcher, defaultFetcher, Service, isResponseOk, Token } from \\"@fern-typescript/service-utils\\";
import path from \\"path\\";
import * as model from \\"../../model\\";

export interface Client {
    updateTestSubmissionStatus(request: model.UpdateTestSubmissionStatusRequest): Promise<model.UpdateTestSubmissionStatusResponse>;
    sendTestSubmissionUpdate(request: model.SendTestSubmissionUpdateRequest): Promise<model.SendTestSubmissionUpdateResponse>;
    updateWorkspaceSubmissionStatus(request: model.UpdateWorkspaceSubmissionStatusRequest): Promise<model.UpdateWorkspaceSubmissionStatusResponse>;
    sendWorkspaceSubmissionUpdate(request: model.SendWorkspaceSubmissionUpdateRequest): Promise<model.SendWorkspaceSubmissionUpdateResponse>;
    storeTracedTestCase(request: model.StoreTracedTestCaseRequest): Promise<model.StoreTracedTestCaseResponse>;
    storeTracedTestCaseV2(request: model.StoreTracedTestCaseV2Request): Promise<model.StoreTracedTestCaseV2Response>;
    storeTracedWorkspace(request: model.StoreTracedWorkspaceRequest): Promise<model.StoreTracedWorkspaceResponse>;
    storeTracedWorkspaceV2(request: model.StoreTracedWorkspaceV2Request): Promise<model.StoreTracedWorkspaceV2Response>;
}

export class Client implements Client {
    private baseUrl: string;
    private fetcher: Fetcher;
    private token: Token | undefined;

    constructor(args: Service.Init) {
        this.fetcher = args.fetcher ?? defaultFetcher;
        this.baseUrl = path.join(args.origin, \\"/admin\\");
        this.token = args.token;
    }

    public async updateTestSubmissionStatus(request: model.UpdateTestSubmissionStatusRequest): Promise<model.UpdateTestSubmissionStatusResponse> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \`/store-test-submission-status/\${request.submissionId}\`),
            method: \\"POST\\",
            headers: {},
            token: this.token
        });

        if (isResponseOk(encodedResponse)) {
            return {
                ok: true,
                statusCode: encodedResponse.statusCode
            };
        }
        else {
            return {
                ok: false,
                statusCode: encodedResponse.statusCode
            };
        }
    }

    public async sendTestSubmissionUpdate(request: model.SendTestSubmissionUpdateRequest): Promise<model.SendTestSubmissionUpdateResponse> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \`/store-test-submission-status-v2/\${request.submissionId}\`),
            method: \\"POST\\",
            headers: {},
            token: this.token
        });

        if (isResponseOk(encodedResponse)) {
            return {
                ok: true,
                statusCode: encodedResponse.statusCode
            };
        }
        else {
            return {
                ok: false,
                statusCode: encodedResponse.statusCode
            };
        }
    }

    public async updateWorkspaceSubmissionStatus(request: model.UpdateWorkspaceSubmissionStatusRequest): Promise<model.UpdateWorkspaceSubmissionStatusResponse> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \`/store-workspace-submission-status/\${request.submissionId}\`),
            method: \\"POST\\",
            headers: {},
            token: this.token
        });

        if (isResponseOk(encodedResponse)) {
            return {
                ok: true,
                statusCode: encodedResponse.statusCode
            };
        }
        else {
            return {
                ok: false,
                statusCode: encodedResponse.statusCode
            };
        }
    }

    public async sendWorkspaceSubmissionUpdate(request: model.SendWorkspaceSubmissionUpdateRequest): Promise<model.SendWorkspaceSubmissionUpdateResponse> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \`/store-workspace-submission-status-v2/\${request.submissionId}\`),
            method: \\"POST\\",
            headers: {},
            token: this.token
        });

        if (isResponseOk(encodedResponse)) {
            return {
                ok: true,
                statusCode: encodedResponse.statusCode
            };
        }
        else {
            return {
                ok: false,
                statusCode: encodedResponse.statusCode
            };
        }
    }

    public async storeTracedTestCase(request: model.StoreTracedTestCaseRequest): Promise<model.StoreTracedTestCaseResponse> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \`/store-test-trace/submission/\${request.submissionId}/testCase/\${request.testCaseId}\`),
            method: \\"POST\\",
            headers: {},
            token: this.token
        });

        if (isResponseOk(encodedResponse)) {
            return {
                ok: true,
                statusCode: encodedResponse.statusCode
            };
        }
        else {
            return {
                ok: false,
                statusCode: encodedResponse.statusCode
            };
        }
    }

    public async storeTracedTestCaseV2(request: model.StoreTracedTestCaseV2Request): Promise<model.StoreTracedTestCaseV2Response> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \`/store-test-trace-v2/submission/\${request.submissionId}/testCase/\${request.testCaseId}\`),
            method: \\"POST\\",
            headers: {},
            token: this.token
        });

        if (isResponseOk(encodedResponse)) {
            return {
                ok: true,
                statusCode: encodedResponse.statusCode
            };
        }
        else {
            return {
                ok: false,
                statusCode: encodedResponse.statusCode
            };
        }
    }

    public async storeTracedWorkspace(request: model.StoreTracedWorkspaceRequest): Promise<model.StoreTracedWorkspaceResponse> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \`/store-workspace-trace/submission/\${request.submissionId}\`),
            method: \\"POST\\",
            headers: {},
            token: this.token
        });

        if (isResponseOk(encodedResponse)) {
            return {
                ok: true,
                statusCode: encodedResponse.statusCode
            };
        }
        else {
            return {
                ok: false,
                statusCode: encodedResponse.statusCode
            };
        }
    }

    public async storeTracedWorkspaceV2(request: model.StoreTracedWorkspaceV2Request): Promise<model.StoreTracedWorkspaceV2Response> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \`/store-workspace-trace-v2/submission/\${request.submissionId}\`),
            method: \\"POST\\",
            headers: {},
            token: this.token
        });

        if (isResponseOk(encodedResponse)) {
            return {
                ok: true,
                statusCode: encodedResponse.statusCode
            };
        }
        else {
            return {
                ok: false,
                statusCode: encodedResponse.statusCode
            };
        }
    }
}
",
                "name": "AdminService.ts",
                "type": "file",
              },
              Object {
                "contents": "export * from \\"./AdminService\\";
",
                "name": "index.ts",
                "type": "file",
              },
            ],
            "name": "AdminService",
            "type": "directory",
          },
          Object {
            "contents": Array [
              Object {
                "contents": "import { Fetcher, defaultFetcher, Service, isResponseOk, Token } from \\"@fern-typescript/service-utils\\";
import path from \\"path\\";
import * as model from \\"../../model\\";

export interface Client {
    createExecutionSession(request: model.CreateExecutionSessionRequest): Promise<model.CreateExecutionSessionResponse>;
    getExecutionSession(request: model.GetExecutionSessionRequest): Promise<model.GetExecutionSessionResponse>;
    stopExecutionSession(request: model.StopExecutionSessionRequest): Promise<model.StopExecutionSessionResponse>;
    getExecutionSessionsState(): Promise<model.GetExecutionSessionsStateResponse>;
}

/**
 * Responsible for spinning up and spinning down execution.
 */
export class Client implements Client {
    private baseUrl: string;
    private fetcher: Fetcher;
    private token: Token | undefined;

    constructor(args: Service.Init) {
        this.fetcher = args.fetcher ?? defaultFetcher;
        this.baseUrl = path.join(args.origin, \\"/sessions\\");
        this.token = args.token;
    }

    public async createExecutionSession(request: model.CreateExecutionSessionRequest): Promise<model.CreateExecutionSessionResponse> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \`/create-session/\${request.language}\`),
            method: \\"POST\\",
            headers: {},
            token: this.token
        });

        if (isResponseOk(encodedResponse)) {
            const response = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: true,
                statusCode: encodedResponse.statusCode,
                body: response as model.ExecutionSessionResponse
            };
        }
        else {
            return {
                ok: false,
                statusCode: encodedResponse.statusCode
            };
        }
    }

    public async getExecutionSession(request: model.GetExecutionSessionRequest): Promise<model.GetExecutionSessionResponse> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \`/\${request.sessionId}\`),
            method: \\"GET\\",
            headers: {},
            token: this.token
        });

        if (isResponseOk(encodedResponse)) {
            const response = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: true,
                statusCode: encodedResponse.statusCode,
                body: response as model.ExecutionSessionResponse | null | undefined
            };
        }
        else {
            return {
                ok: false,
                statusCode: encodedResponse.statusCode
            };
        }
    }

    public async stopExecutionSession(request: model.StopExecutionSessionRequest): Promise<model.StopExecutionSessionResponse> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \`/stop/\${request.sessionId}\`),
            method: \\"DELETE\\",
            headers: {},
            token: this.token
        });

        if (isResponseOk(encodedResponse)) {
            return {
                ok: true,
                statusCode: encodedResponse.statusCode
            };
        }
        else {
            return {
                ok: false,
                statusCode: encodedResponse.statusCode
            };
        }
    }

    public async getExecutionSessionsState(): Promise<model.GetExecutionSessionsStateResponse> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \\"/execution-sessions-state\\"),
            method: \\"GET\\",
            headers: {},
            token: this.token
        });

        if (isResponseOk(encodedResponse)) {
            const response = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: true,
                statusCode: encodedResponse.statusCode,
                body: response as model.ExecutionSessionsState
            };
        }
        else {
            return {
                ok: false,
                statusCode: encodedResponse.statusCode
            };
        }
    }
}
",
                "name": "ExecutionSesssionManagementService.ts",
                "type": "file",
              },
              Object {
                "contents": "export * from \\"./ExecutionSesssionManagementService\\";
",
                "name": "index.ts",
                "type": "file",
              },
            ],
            "name": "ExecutionSesssionManagementService",
            "type": "directory",
          },
          Object {
            "contents": Array [
              Object {
                "contents": "import { Fetcher, defaultFetcher, Service, isResponseOk, Token } from \\"@fern-typescript/service-utils\\";
import path from \\"path\\";
import * as model from \\"../../model\\";

export interface Client {
    getHomepageProblems(): Promise<model.GetHomepageProblemsResponse>;
    setHomepageProblems(request: model.ProblemId[]): Promise<model.SetHomepageProblemsResponse>;
}

export class Client implements Client {
    private baseUrl: string;
    private fetcher: Fetcher;
    private token: Token | undefined;

    constructor(args: Service.Init) {
        this.fetcher = args.fetcher ?? defaultFetcher;
        this.baseUrl = path.join(args.origin, \\"/homepage-problems\\");
        this.token = args.token;
    }

    public async getHomepageProblems(): Promise<model.GetHomepageProblemsResponse> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \\"/\\"),
            method: \\"GET\\",
            headers: {},
            token: this.token
        });

        if (isResponseOk(encodedResponse)) {
            const response = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: true,
                statusCode: encodedResponse.statusCode,
                body: response as model.ProblemId[]
            };
        }
        else {
            return {
                ok: false,
                statusCode: encodedResponse.statusCode
            };
        }
    }

    public async setHomepageProblems(request: model.ProblemId[]): Promise<model.SetHomepageProblemsResponse> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \\"/\\"),
            method: \\"POST\\",
            headers: {},
            token: this.token,
            body: {
                content: JSON.stringify(request),
                contentType: \\"application/json\\"
            }
        });

        if (isResponseOk(encodedResponse)) {
            return {
                ok: true,
                statusCode: encodedResponse.statusCode
            };
        }
        else {
            return {
                ok: false,
                statusCode: encodedResponse.statusCode
            };
        }
    }
}
",
                "name": "HomepageProblemService.ts",
                "type": "file",
              },
              Object {
                "contents": "export * from \\"./HomepageProblemService\\";
",
                "name": "index.ts",
                "type": "file",
              },
            ],
            "name": "HomepageProblemService",
            "type": "directory",
          },
          Object {
            "contents": Array [
              Object {
                "contents": "import { Fetcher, defaultFetcher, Service, isResponseOk, Token } from \\"@fern-typescript/service-utils\\";
import path from \\"path\\";
import * as model from \\"../../model\\";

export interface Client {
    getAttemptedMigrations(): Promise<model.GetAttemptedMigrationsResponse>;
}

export class Client implements Client {
    private baseUrl: string;
    private fetcher: Fetcher;
    private token: Token | undefined;

    constructor(args: Service.Init) {
        this.fetcher = args.fetcher ?? defaultFetcher;
        this.baseUrl = path.join(args.origin, \\"/migration-info\\");
        this.token = args.token;
    }

    public async getAttemptedMigrations(): Promise<model.GetAttemptedMigrationsResponse> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \\"/all\\"),
            method: \\"GET\\",
            headers: {},
            token: this.token
        });

        if (isResponseOk(encodedResponse)) {
            const response = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: true,
                statusCode: encodedResponse.statusCode,
                body: response as model.Migration[]
            };
        }
        else {
            return {
                ok: false,
                statusCode: encodedResponse.statusCode
            };
        }
    }
}
",
                "name": "MigrationInfoService.ts",
                "type": "file",
              },
              Object {
                "contents": "export * from \\"./MigrationInfoService\\";
",
                "name": "index.ts",
                "type": "file",
              },
            ],
            "name": "MigrationInfoService",
            "type": "directory",
          },
          Object {
            "contents": Array [
              Object {
                "contents": "import { Fetcher, defaultFetcher, Service, isResponseOk, Token } from \\"@fern-typescript/service-utils\\";
import path from \\"path\\";
import * as model from \\"../../model\\";

export interface Client {
    createPlaylist(request: model.CreatePlaylistRequest): Promise<model.CreatePlaylistResponse>;
    getPlaylists(): Promise<model.GetPlaylistsResponse>;
    getPlaylist(request: model.GetPlaylistRequest): Promise<model.GetPlaylistResponse>;
    updatePlaylist(request: model.UpdatePlaylistRequest): Promise<model.UpdatePlaylistResponse>;
    deletePlaylist(request: model.DeletePlaylistRequest): Promise<model.DeletePlaylistResponse>;
}

export class Client implements Client {
    private baseUrl: string;
    private fetcher: Fetcher;
    private token: Token | undefined;

    constructor(args: Service.Init) {
        this.fetcher = args.fetcher ?? defaultFetcher;
        this.baseUrl = path.join(args.origin, \\"/v2/playlist\\");
        this.token = args.token;
    }

    public async createPlaylist(request: model.CreatePlaylistRequest): Promise<model.CreatePlaylistResponse> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \\"/create\\"),
            method: \\"POST\\",
            headers: {},
            token: this.token,
            body: {
                content: JSON.stringify(request),
                contentType: \\"application/json\\"
            }
        });

        if (isResponseOk(encodedResponse)) {
            const response = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: true,
                statusCode: encodedResponse.statusCode,
                body: response as model.Playlist
            };
        }
        else {
            return {
                ok: false,
                statusCode: encodedResponse.statusCode
            };
        }
    }

    public async getPlaylists(): Promise<model.GetPlaylistsResponse> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \\"/all\\"),
            method: \\"GET\\",
            headers: {},
            token: this.token
        });

        if (isResponseOk(encodedResponse)) {
            const response = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: true,
                statusCode: encodedResponse.statusCode,
                body: response as model.Playlist[]
            };
        }
        else {
            return {
                ok: false,
                statusCode: encodedResponse.statusCode
            };
        }
    }

    public async getPlaylist(request: model.GetPlaylistRequest): Promise<model.GetPlaylistResponse> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \`/\${request.playlistId}\`),
            method: \\"GET\\",
            headers: {},
            token: this.token
        });

        if (isResponseOk(encodedResponse)) {
            const response = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: true,
                statusCode: encodedResponse.statusCode,
                body: response as model.Playlist
            };
        }
        else {
            return {
                ok: false,
                statusCode: encodedResponse.statusCode
            };
        }
    }

    public async updatePlaylist(request: model.UpdatePlaylistRequest): Promise<model.UpdatePlaylistResponse> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \`/\${request.playlistId}\`),
            method: \\"PUT\\",
            headers: {},
            token: this.token,
            body: {
                content: JSON.stringify(request.body),
                contentType: \\"application/json\\"
            }
        });

        if (isResponseOk(encodedResponse)) {
            const response = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: true,
                statusCode: encodedResponse.statusCode,
                body: response as model.Playlist
            };
        }
        else {
            return {
                ok: false,
                statusCode: encodedResponse.statusCode
            };
        }
    }

    public async deletePlaylist(request: model.DeletePlaylistRequest): Promise<model.DeletePlaylistResponse> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \`/\${request.playlistId}\`),
            method: \\"DELETE\\",
            headers: {},
            token: this.token
        });

        if (isResponseOk(encodedResponse)) {
            return {
                ok: true,
                statusCode: encodedResponse.statusCode
            };
        }
        else {
            return {
                ok: false,
                statusCode: encodedResponse.statusCode
            };
        }
    }
}
",
                "name": "PlaylistCrudService.ts",
                "type": "file",
              },
              Object {
                "contents": "export * from \\"./PlaylistCrudService\\";
",
                "name": "index.ts",
                "type": "file",
              },
            ],
            "name": "PlaylistCrudService",
            "type": "directory",
          },
          Object {
            "contents": Array [
              Object {
                "contents": "import { Fetcher, defaultFetcher, Service, isResponseOk, Token } from \\"@fern-typescript/service-utils\\";
import path from \\"path\\";
import * as model from \\"../../model\\";

export interface Client {
    createProblem(request: model.CreateProblemRequest): Promise<model.CreateProblemResponse>;
    updateProblem(request: model.UpdateProblemRequest): Promise<model.UpdateProblemResponse>;
    deleteProblem(request: model.DeleteProblemRequest): Promise<model.DeleteProblemResponse>;
    getDefaultStarterFiles(request: model.GetDefaultStarterFilesRequest): Promise<model.GetDefaultStarterFilesResponse>;
}

export class Client implements Client {
    private baseUrl: string;
    private fetcher: Fetcher;
    private token: Token | undefined;

    constructor(args: Service.Init) {
        this.fetcher = args.fetcher ?? defaultFetcher;
        this.baseUrl = path.join(args.origin, \\"/problem-crud\\");
        this.token = args.token;
    }

    public async createProblem(request: model.CreateProblemRequest): Promise<model.CreateProblemResponse> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \\"/create\\"),
            method: \\"POST\\",
            headers: {},
            token: this.token
        });

        if (isResponseOk(encodedResponse)) {
            const response = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: true,
                statusCode: encodedResponse.statusCode,
                body: response as model.CreateProblemResponse
            };
        }
        else {
            return {
                ok: false,
                statusCode: encodedResponse.statusCode
            };
        }
    }

    public async updateProblem(request: model.UpdateProblemRequest): Promise<model.UpdateProblemResponse> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \`/update/\${request.problemId}\`),
            method: \\"POST\\",
            headers: {},
            token: this.token
        });

        if (isResponseOk(encodedResponse)) {
            const response = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: true,
                statusCode: encodedResponse.statusCode,
                body: response as model.UpdateProblemResponse
            };
        }
        else {
            return {
                ok: false,
                statusCode: encodedResponse.statusCode
            };
        }
    }

    public async deleteProblem(request: model.DeleteProblemRequest): Promise<model.DeleteProblemResponse> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \`/delete/\${request.problemId}\`),
            method: \\"DELETE\\",
            headers: {},
            token: this.token
        });

        if (isResponseOk(encodedResponse)) {
            return {
                ok: true,
                statusCode: encodedResponse.statusCode
            };
        }
        else {
            return {
                ok: false,
                statusCode: encodedResponse.statusCode
            };
        }
    }

    public async getDefaultStarterFiles(request: model.GetDefaultStarterFilesRequest): Promise<model.GetDefaultStarterFilesResponse> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \\"/default-starter-files\\"),
            method: \\"POST\\",
            headers: {},
            token: this.token
        });

        if (isResponseOk(encodedResponse)) {
            const response = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: true,
                statusCode: encodedResponse.statusCode,
                body: response as model.GetDefaultStarterFilesResponse
            };
        }
        else {
            return {
                ok: false,
                statusCode: encodedResponse.statusCode
            };
        }
    }
}
",
                "name": "ProblemCrudService.ts",
                "type": "file",
              },
              Object {
                "contents": "export * from \\"./ProblemCrudService\\";
",
                "name": "index.ts",
                "type": "file",
              },
            ],
            "name": "ProblemCrudService",
            "type": "directory",
          },
          Object {
            "contents": Array [
              Object {
                "contents": "import { Fetcher, defaultFetcher, Service, isResponseOk, Token } from \\"@fern-typescript/service-utils\\";
import path from \\"path\\";
import * as model from \\"../../model\\";

export interface Client {
    createProblem(request: model.CreateProblemRequest): Promise<model.CreateProblemResponse>;
    updateProblem(request: model.UpdateProblemRequest): Promise<model.UpdateProblemResponse>;
    deleteProblem(request: model.DeleteProblemRequest): Promise<model.DeleteProblemResponse>;
    getFunctionSignature(request: model.GetFunctionSignatureRequest): Promise<model.GetFunctionSignatureResponse>;
    getBasicSolutionFile(request: model.GetBasicSolutionFileRequest): Promise<model.GetBasicSolutionFileResponse>;
    getDefaultDirectoryForProblemFiles(): Promise<model.GetDefaultDirectoryForProblemFilesResponse>;
    getGeneratedTestCaseFile(request: model.GetGeneratedTestCaseFileRequest): Promise<model.GetGeneratedTestCaseFileResponse>;
    getGeneratedTestCaseTemplateFile(request: model.GetGeneratedTestCaseTemplateFileRequest): Promise<model.GetGeneratedTestCaseTemplateFileResponse>;
}

export class Client implements Client {
    private baseUrl: string;
    private fetcher: Fetcher;
    private token: Token | undefined;

    constructor(args: Service.Init) {
        this.fetcher = args.fetcher ?? defaultFetcher;
        this.baseUrl = path.join(args.origin, \\"/problem-crud-v2\\");
        this.token = args.token;
    }

    public async createProblem(request: model.CreateProblemRequest): Promise<model.CreateProblemResponse> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \\"/create\\"),
            method: \\"POST\\",
            headers: {},
            token: this.token
        });

        if (isResponseOk(encodedResponse)) {
            const response = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: true,
                statusCode: encodedResponse.statusCode,
                body: response as model.CreateProblemResponse
            };
        }
        else {
            return {
                ok: false,
                statusCode: encodedResponse.statusCode
            };
        }
    }

    public async updateProblem(request: model.UpdateProblemRequest): Promise<model.UpdateProblemResponse> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \`/update/\${request.problemId}\`),
            method: \\"POST\\",
            headers: {},
            token: this.token
        });

        if (isResponseOk(encodedResponse)) {
            const response = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: true,
                statusCode: encodedResponse.statusCode,
                body: response as model.UpdateProblemResponse
            };
        }
        else {
            return {
                ok: false,
                statusCode: encodedResponse.statusCode
            };
        }
    }

    public async deleteProblem(request: model.DeleteProblemRequest): Promise<model.DeleteProblemResponse> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \`/delete/\${request.problemId}\`),
            method: \\"DELETE\\",
            headers: {},
            token: this.token
        });

        if (isResponseOk(encodedResponse)) {
            return {
                ok: true,
                statusCode: encodedResponse.statusCode
            };
        }
        else {
            return {
                ok: false,
                statusCode: encodedResponse.statusCode
            };
        }
    }

    public async getFunctionSignature(request: model.GetFunctionSignatureRequest): Promise<model.GetFunctionSignatureResponse> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \\"/function-signature\\"),
            method: \\"POST\\",
            headers: {},
            token: this.token
        });

        if (isResponseOk(encodedResponse)) {
            const response = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: true,
                statusCode: encodedResponse.statusCode,
                body: response as model.GetFunctionSignatureResponse
            };
        }
        else {
            return {
                ok: false,
                statusCode: encodedResponse.statusCode
            };
        }
    }

    public async getBasicSolutionFile(request: model.GetBasicSolutionFileRequest): Promise<model.GetBasicSolutionFileResponse> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \\"/basic-solution-file\\"),
            method: \\"POST\\",
            headers: {},
            token: this.token
        });

        if (isResponseOk(encodedResponse)) {
            const response = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: true,
                statusCode: encodedResponse.statusCode,
                body: response as model.GetBasicSolutionFileResponse
            };
        }
        else {
            return {
                ok: false,
                statusCode: encodedResponse.statusCode
            };
        }
    }

    public async getDefaultDirectoryForProblemFiles(): Promise<model.GetDefaultDirectoryForProblemFilesResponse> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \\"/default-problem-files-directory\\"),
            method: \\"GET\\",
            headers: {},
            token: this.token
        });

        if (isResponseOk(encodedResponse)) {
            const response = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: true,
                statusCode: encodedResponse.statusCode,
                body: response as Record<model.Language, string>
            };
        }
        else {
            return {
                ok: false,
                statusCode: encodedResponse.statusCode
            };
        }
    }

    public async getGeneratedTestCaseFile(request: model.GetGeneratedTestCaseFileRequest): Promise<model.GetGeneratedTestCaseFileResponse> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \\"/generated-test-case-file\\"),
            method: \\"POST\\",
            headers: {},
            token: this.token
        });

        if (isResponseOk(encodedResponse)) {
            const response = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: true,
                statusCode: encodedResponse.statusCode,
                body: response as Record<model.Language, model.FileInfoV2>
            };
        }
        else {
            return {
                ok: false,
                statusCode: encodedResponse.statusCode
            };
        }
    }

    public async getGeneratedTestCaseTemplateFile(request: model.GetGeneratedTestCaseTemplateFileRequest): Promise<model.GetGeneratedTestCaseTemplateFileResponse> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \\"/generated-test-case-template-file\\"),
            method: \\"POST\\",
            headers: {},
            token: this.token
        });

        if (isResponseOk(encodedResponse)) {
            const response = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: true,
                statusCode: encodedResponse.statusCode,
                body: response as Record<model.Language, model.FileInfoV2>
            };
        }
        else {
            return {
                ok: false,
                statusCode: encodedResponse.statusCode
            };
        }
    }
}
",
                "name": "ProblemCrudServiceV2.ts",
                "type": "file",
              },
              Object {
                "contents": "export * from \\"./ProblemCrudServiceV2\\";
",
                "name": "index.ts",
                "type": "file",
              },
            ],
            "name": "ProblemCrudServiceV2",
            "type": "directory",
          },
          Object {
            "contents": Array [
              Object {
                "contents": "import { Fetcher, defaultFetcher, Service, isResponseOk, Token } from \\"@fern-typescript/service-utils\\";
import path from \\"path\\";
import * as model from \\"../../model\\";

export interface Client {
    getLightweightProblems(): Promise<model.GetLightweightProblemsResponse>;
    getProblems(): Promise<model.GetProblemsResponse>;
    getLatestProblem(request: model.GetLatestProblemRequest): Promise<model.GetLatestProblemResponse>;
    getProblemVersion(request: model.GetProblemVersionRequest): Promise<model.GetProblemVersionResponse>;
}

export class Client implements Client {
    private baseUrl: string;
    private fetcher: Fetcher;
    private token: Token | undefined;

    constructor(args: Service.Init) {
        this.fetcher = args.fetcher ?? defaultFetcher;
        this.baseUrl = path.join(args.origin, \\"/problems-v2\\");
        this.token = args.token;
    }

    public async getLightweightProblems(): Promise<model.GetLightweightProblemsResponse> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \\"/lightweight-problem-info\\"),
            method: \\"GET\\",
            headers: {},
            token: this.token
        });

        if (isResponseOk(encodedResponse)) {
            const response = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: true,
                statusCode: encodedResponse.statusCode,
                body: response as model.LightweightProblemInfoV2[]
            };
        }
        else {
            return {
                ok: false,
                statusCode: encodedResponse.statusCode
            };
        }
    }

    public async getProblems(): Promise<model.GetProblemsResponse> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \\"/problem-info\\"),
            method: \\"GET\\",
            headers: {},
            token: this.token
        });

        if (isResponseOk(encodedResponse)) {
            const response = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: true,
                statusCode: encodedResponse.statusCode,
                body: response as model.ProblemInfoV2[]
            };
        }
        else {
            return {
                ok: false,
                statusCode: encodedResponse.statusCode
            };
        }
    }

    public async getLatestProblem(request: model.GetLatestProblemRequest): Promise<model.GetLatestProblemResponse> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \`/problem-info/\${request.problemId}\`),
            method: \\"GET\\",
            headers: {},
            token: this.token
        });

        if (isResponseOk(encodedResponse)) {
            const response = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: true,
                statusCode: encodedResponse.statusCode,
                body: response as model.ProblemInfoV2
            };
        }
        else {
            return {
                ok: false,
                statusCode: encodedResponse.statusCode
            };
        }
    }

    public async getProblemVersion(request: model.GetProblemVersionRequest): Promise<model.GetProblemVersionResponse> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \`/problem-info/\${request.problemId}/version/\${request.problemVersion}\`),
            method: \\"GET\\",
            headers: {},
            token: this.token
        });

        if (isResponseOk(encodedResponse)) {
            const response = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: true,
                statusCode: encodedResponse.statusCode,
                body: response as model.ProblemInfoV2
            };
        }
        else {
            return {
                ok: false,
                statusCode: encodedResponse.statusCode
            };
        }
    }
}
",
                "name": "ProblemInfoServicV2.ts",
                "type": "file",
              },
              Object {
                "contents": "export * from \\"./ProblemInfoServicV2\\";
",
                "name": "index.ts",
                "type": "file",
              },
            ],
            "name": "ProblemInfoServicV2",
            "type": "directory",
          },
          Object {
            "contents": Array [
              Object {
                "contents": "import { Fetcher, defaultFetcher, Service, isResponseOk, Token } from \\"@fern-typescript/service-utils\\";
import path from \\"path\\";
import * as model from \\"../../model\\";

export interface Client {
    getProblems(): Promise<model.GetProblemsResponse>;
    getLatestProblem(request: model.GetLatestProblemRequest): Promise<model.GetLatestProblemResponse>;
    getProblemVersion(request: model.GetProblemVersionRequest): Promise<model.GetProblemVersionResponse>;
    getExpectedResult(request: model.GetExpectedResultRequest): Promise<model.GetExpectedResultResponse>;
}

/**
 * Information about different problems
 */
export class Client implements Client {
    private baseUrl: string;
    private fetcher: Fetcher;
    private token: Token | undefined;

    constructor(args: Service.Init) {
        this.fetcher = args.fetcher ?? defaultFetcher;
        this.baseUrl = path.join(args.origin, \\"/problems\\");
        this.token = args.token;
    }

    public async getProblems(): Promise<model.GetProblemsResponse> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \\"/problem-info\\"),
            method: \\"GET\\",
            headers: {},
            token: this.token
        });

        if (isResponseOk(encodedResponse)) {
            const response = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: true,
                statusCode: encodedResponse.statusCode,
                body: response as model.ProblemInfo[]
            };
        }
        else {
            return {
                ok: false,
                statusCode: encodedResponse.statusCode
            };
        }
    }

    public async getLatestProblem(request: model.GetLatestProblemRequest): Promise<model.GetLatestProblemResponse> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \`/problem-info/\${request.problemId}\`),
            method: \\"GET\\",
            headers: {},
            token: this.token
        });

        if (isResponseOk(encodedResponse)) {
            const response = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: true,
                statusCode: encodedResponse.statusCode,
                body: response as model.ProblemInfo
            };
        }
        else {
            return {
                ok: false,
                statusCode: encodedResponse.statusCode
            };
        }
    }

    public async getProblemVersion(request: model.GetProblemVersionRequest): Promise<model.GetProblemVersionResponse> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \`/problem-info/\${request.problemId}/version/\${request.problemVersion}\`),
            method: \\"GET\\",
            headers: {},
            token: this.token
        });

        if (isResponseOk(encodedResponse)) {
            const response = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: true,
                statusCode: encodedResponse.statusCode,
                body: response as model.ProblemInfo
            };
        }
        else {
            return {
                ok: false,
                statusCode: encodedResponse.statusCode
            };
        }
    }

    public async getExpectedResult(request: model.GetExpectedResultRequest): Promise<model.GetExpectedResultResponse> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \`/expected-result/\${request.problemId}\`),
            method: \\"POST\\",
            headers: {},
            token: this.token
        });

        if (isResponseOk(encodedResponse)) {
            const response = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: true,
                statusCode: encodedResponse.statusCode,
                body: response as model.TestCaseWithExpectedResult
            };
        }
        else {
            return {
                ok: false,
                statusCode: encodedResponse.statusCode
            };
        }
    }
}
",
                "name": "ProblemInfoService.ts",
                "type": "file",
              },
              Object {
                "contents": "export * from \\"./ProblemInfoService\\";
",
                "name": "index.ts",
                "type": "file",
              },
            ],
            "name": "ProblemInfoService",
            "type": "directory",
          },
          Object {
            "contents": Array [
              Object {
                "contents": "import { Fetcher, defaultFetcher, Service, isResponseOk, Token } from \\"@fern-typescript/service-utils\\";
import path from \\"path\\";
import * as model from \\"../../model\\";

export interface Client {
    getSubmissionState(request: model.GetSubmissionStateRequest): Promise<model.GetSubmissionStateResponse>;
    getSubmissionStateV2(request: model.GetSubmissionStateV2Request): Promise<model.GetSubmissionStateV2Response>;
    getTraceResponsesPage(request: model.GetTraceResponsesPageRequest): Promise<model.GetTraceResponsesPageResponse>;
    getTraceResponsesV2Page(request: model.GetTraceResponsesV2PageRequest): Promise<model.GetTraceResponsesV2PageResponse>;
    getTraceResponsesPageForWorkspace(request: model.GetTraceResponsesPageForWorkspaceRequest): Promise<model.GetTraceResponsesPageForWorkspaceResponse>;
    getTraceResponsesV2PageForWorkspace(request: model.GetTraceResponsesV2PageForWorkspaceRequest): Promise<model.GetTraceResponsesV2PageForWorkspaceResponse>;
}

/**
 * Responsible for serving information about submissions
 */
export class Client implements Client {
    private baseUrl: string;
    private fetcher: Fetcher;
    private token: Token | undefined;

    constructor(args: Service.Init) {
        this.fetcher = args.fetcher ?? defaultFetcher;
        this.baseUrl = path.join(args.origin, \\"/submissions\\");
        this.token = args.token;
    }

    public async getSubmissionState(request: model.GetSubmissionStateRequest): Promise<model.GetSubmissionStateResponse> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \`/\${request.submissionId}\`),
            method: \\"GET\\",
            headers: {},
            token: this.token
        });

        if (isResponseOk(encodedResponse)) {
            const response = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: true,
                statusCode: encodedResponse.statusCode,
                body: response as model.SubmissionState
            };
        }
        else {
            return {
                ok: false,
                statusCode: encodedResponse.statusCode
            };
        }
    }

    public async getSubmissionStateV2(request: model.GetSubmissionStateV2Request): Promise<model.GetSubmissionStateV2Response> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \`/v2/\${request.submissionId}\`),
            method: \\"GET\\",
            headers: {},
            token: this.token
        });

        if (isResponseOk(encodedResponse)) {
            const response = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: true,
                statusCode: encodedResponse.statusCode,
                body: response as model.SubmissionStateV2
            };
        }
        else {
            return {
                ok: false,
                statusCode: encodedResponse.statusCode
            };
        }
    }

    public async getTraceResponsesPage(request: model.GetTraceResponsesPageRequest): Promise<model.GetTraceResponsesPageResponse> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \`/trace-respose/\${request.submissionId}/testCase/\${request.testCaseId}\`),
            method: \\"POST\\",
            headers: {},
            token: this.token
        });

        if (isResponseOk(encodedResponse)) {
            const response = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: true,
                statusCode: encodedResponse.statusCode,
                body: response as model.TraceResponsesPage
            };
        }
        else {
            return {
                ok: false,
                statusCode: encodedResponse.statusCode
            };
        }
    }

    public async getTraceResponsesV2Page(request: model.GetTraceResponsesV2PageRequest): Promise<model.GetTraceResponsesV2PageResponse> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \`/trace-response-v2/\${request.submissionId}/testCase/\${request.testCaseId}\`),
            method: \\"POST\\",
            headers: {},
            token: this.token
        });

        if (isResponseOk(encodedResponse)) {
            const response = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: true,
                statusCode: encodedResponse.statusCode,
                body: response as model.TraceResponsesPageV2
            };
        }
        else {
            return {
                ok: false,
                statusCode: encodedResponse.statusCode
            };
        }
    }

    public async getTraceResponsesPageForWorkspace(request: model.GetTraceResponsesPageForWorkspaceRequest): Promise<model.GetTraceResponsesPageForWorkspaceResponse> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \`/workspace-trace-response/\${request.submissionId}\`),
            method: \\"POST\\",
            headers: {},
            token: this.token
        });

        if (isResponseOk(encodedResponse)) {
            const response = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: true,
                statusCode: encodedResponse.statusCode,
                body: response as model.TraceResponsesPage
            };
        }
        else {
            return {
                ok: false,
                statusCode: encodedResponse.statusCode
            };
        }
    }

    public async getTraceResponsesV2PageForWorkspace(request: model.GetTraceResponsesV2PageForWorkspaceRequest): Promise<model.GetTraceResponsesV2PageForWorkspaceResponse> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \`/workspace-trace-response-v2/\${request.submissionId}\`),
            method: \\"POST\\",
            headers: {},
            token: this.token
        });

        if (isResponseOk(encodedResponse)) {
            const response = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: true,
                statusCode: encodedResponse.statusCode,
                body: response as model.TraceResponsesPageV2
            };
        }
        else {
            return {
                ok: false,
                statusCode: encodedResponse.statusCode
            };
        }
    }
}
",
                "name": "SubmissionInfoService.ts",
                "type": "file",
              },
              Object {
                "contents": "export * from \\"./SubmissionInfoService\\";
",
                "name": "index.ts",
                "type": "file",
              },
            ],
            "name": "SubmissionInfoService",
            "type": "directory",
          },
          Object {
            "contents": Array [
              Object {
                "contents": "import { Fetcher, defaultFetcher, Service, isResponseOk, Token } from \\"@fern-typescript/service-utils\\";
import path from \\"path\\";
import * as model from \\"../../model\\";

export interface Client {
    setNumWarmInstances(request: model.SetNumWarmInstancesRequest): Promise<model.SetNumWarmInstancesResponse>;
    getNumWarmInstances(): Promise<model.GetNumWarmInstancesResponse>;
}

export class Client implements Client {
    private baseUrl: string;
    private fetcher: Fetcher;
    private token: Token | undefined;

    constructor(args: Service.Init) {
        this.fetcher = args.fetcher ?? defaultFetcher;
        this.baseUrl = path.join(args.origin, \\"/sysprop\\");
        this.token = args.token;
    }

    public async setNumWarmInstances(request: model.SetNumWarmInstancesRequest): Promise<model.SetNumWarmInstancesResponse> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \`/num-warm-instances/\${request.language}/\${request.numWarmInstances}\`),
            method: \\"PUT\\",
            headers: {},
            token: this.token
        });

        if (isResponseOk(encodedResponse)) {
            return {
                ok: true,
                statusCode: encodedResponse.statusCode
            };
        }
        else {
            return {
                ok: false,
                statusCode: encodedResponse.statusCode
            };
        }
    }

    public async getNumWarmInstances(): Promise<model.GetNumWarmInstancesResponse> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \\"/num-warm-instances\\"),
            method: \\"GET\\",
            headers: {},
            token: this.token
        });

        if (isResponseOk(encodedResponse)) {
            const response = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: true,
                statusCode: encodedResponse.statusCode,
                body: response as Record<model.Language, number>
            };
        }
        else {
            return {
                ok: false,
                statusCode: encodedResponse.statusCode
            };
        }
    }
}
",
                "name": "SysPropCrudService.ts",
                "type": "file",
              },
              Object {
                "contents": "export * from \\"./SysPropCrudService\\";
",
                "name": "index.ts",
                "type": "file",
              },
            ],
            "name": "SysPropCrudService",
            "type": "directory",
          },
          Object {
            "contents": Array [
              Object {
                "contents": "import { Fetcher, defaultFetcher, Service, isResponseOk, Token } from \\"@fern-typescript/service-utils\\";
import path from \\"path\\";
import * as model from \\"../../model\\";

export interface Client {
    getWorkspaceStarterFiles(): Promise<model.GetWorkspaceStarterFilesResponse>;
    getWorkspaceStarterFilesV2(): Promise<model.GetWorkspaceStarterFilesV2Response>;
}

export class Client implements Client {
    private baseUrl: string;
    private fetcher: Fetcher;
    private token: Token | undefined;

    constructor(args: Service.Init) {
        this.fetcher = args.fetcher ?? defaultFetcher;
        this.baseUrl = path.join(args.origin, \\"/workspace\\");
        this.token = args.token;
    }

    public async getWorkspaceStarterFiles(): Promise<model.GetWorkspaceStarterFilesResponse> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \\"/get-workspace-starter-files\\"),
            method: \\"GET\\",
            headers: {},
            token: this.token
        });

        if (isResponseOk(encodedResponse)) {
            const response = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: true,
                statusCode: encodedResponse.statusCode,
                body: response as model.WorkspaceStarterFilesResponse
            };
        }
        else {
            return {
                ok: false,
                statusCode: encodedResponse.statusCode
            };
        }
    }

    public async getWorkspaceStarterFilesV2(): Promise<model.GetWorkspaceStarterFilesV2Response> {
        const encodedResponse = await this.fetcher({
            url: path.join(this.baseUrl, \\"/get-workspace-starter-files-v2\\"),
            method: \\"GET\\",
            headers: {},
            token: this.token
        });

        if (isResponseOk(encodedResponse)) {
            const response = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: true,
                statusCode: encodedResponse.statusCode,
                body: response as model.WorkspaceStarterFilesResponseV2
            };
        }
        else {
            return {
                ok: false,
                statusCode: encodedResponse.statusCode
            };
        }
    }
}
",
                "name": "WorkspaceInfoService.ts",
                "type": "file",
              },
              Object {
                "contents": "export * from \\"./WorkspaceInfoService\\";
",
                "name": "index.ts",
                "type": "file",
              },
            ],
            "name": "WorkspaceInfoService",
            "type": "directory",
          },
          Object {
            "contents": "export * as AdminService from \\"./AdminService\\";
export * as HomepageProblemService from \\"./HomepageProblemService\\";
export * as MigrationInfoService from \\"./MigrationInfoService\\";
export * as PlaylistCrudService from \\"./PlaylistCrudService\\";
export * as ProblemInfoService from \\"./ProblemInfoService\\";
export * as ProblemCrudService from \\"./ProblemCrudService\\";
export * as ProblemInfoServicV2 from \\"./ProblemInfoServicV2\\";
export * as ProblemCrudServiceV2 from \\"./ProblemCrudServiceV2\\";
export * as ExecutionSesssionManagementService from \\"./ExecutionSesssionManagementService\\";
export * as SubmissionInfoService from \\"./SubmissionInfoService\\";
export * as WorkspaceInfoService from \\"./WorkspaceInfoService\\";
export * as SysPropCrudService from \\"./SysPropCrudService\\";
",
            "name": "index.ts",
            "type": "file",
          },
        ],
        "name": "services",
        "type": "directory",
      },
    ],
    "name": "src",
    "type": "directory",
  },
  Object {
    "contents": "{
    \\"compilerOptions\\": {
        \\"composite\\": true,
        \\"module\\": \\"esnext\\",
        \\"target\\": \\"esnext\\",
        \\"outDir\\": \\"lib/esm\\",
        \\"rootDir\\": \\"src\\",
        \\"moduleResolution\\": \\"node\\",
        \\"esModuleInterop\\": true,
        \\"strict\\": true,
        \\"declaration\\": true,
        \\"noFallthroughCasesInSwitch\\": true,
        \\"forceConsistentCasingInFileNames\\": true,
        \\"noUncheckedIndexedAccess\\": true,
        \\"noUnusedLocals\\": true,
        \\"noUnusedParameters\\": true
    },
    \\"include\\": [
        \\"src\\"
    ]
}",
    "name": "tsconfig.esm.json",
    "type": "file",
  },
  Object {
    "contents": "{
    \\"compilerOptions\\": {
        \\"composite\\": true,
        \\"module\\": \\"commonjs\\",
        \\"target\\": \\"esnext\\",
        \\"outDir\\": \\"lib/cjs\\",
        \\"rootDir\\": \\"src\\",
        \\"moduleResolution\\": \\"node\\",
        \\"esModuleInterop\\": true,
        \\"strict\\": true,
        \\"declaration\\": true,
        \\"noFallthroughCasesInSwitch\\": true,
        \\"forceConsistentCasingInFileNames\\": true,
        \\"noUncheckedIndexedAccess\\": true,
        \\"noUnusedLocals\\": true,
        \\"noUnusedParameters\\": true
    },
    \\"include\\": [
        \\"src\\"
    ]
}",
    "name": "tsconfig.json",
    "type": "file",
  },
]
`;
