// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`generateModelProject fern IR 1`] = `
Object {
  "/.npmignore": "tsconfig.json",
  "/commons/index.ts": "export * from \\"./types\\";
",
  "/commons/types/WithDocs.ts": "export interface WithDocs {
    docs: string | null | undefined;
}
",
  "/commons/types/index.ts": "export * from \\"./WithDocs\\";
",
  "/errors/index.ts": "export * from \\"./types\\";
",
  "/errors/types/ErrorDefinition.ts": "import * as model from \\"../..\\";

export interface ErrorDefinition extends model.commons.WithDocs {
    name: model.types.NamedType;
    properties: model.errors.ErrorProperty[];
    http: model.errors.HttpErrorConfiguration | null | undefined;
}
",
  "/errors/types/ErrorProperty.ts": "import * as model from \\"../..\\";

export interface ErrorProperty extends model.commons.WithDocs {
    name: string;
    type: model.types.TypeReference;
}
",
  "/errors/types/HttpErrorConfiguration.ts": "export interface HttpErrorConfiguration {
    statusCode: number;
}
",
  "/errors/types/index.ts": "export * from \\"./ErrorDefinition\\";
export * from \\"./ErrorProperty\\";
export * from \\"./HttpErrorConfiguration\\";
",
  "/fern/index.ts": "export * from \\"./types\\";
",
  "/fern/types/IntermediateRepresentation.ts": "import * as model from \\"../..\\";

/**
 * Complete representation of the API schema
 */
export interface IntermediateRepresentation {
    /** The types described by this API */
    types: model.types.TypeDefinition[];
    /** The services exposed by this API */
    services: model.fern.Services;
    errors: model.errors.ErrorDefinition[];
}
",
  "/fern/types/Services.ts": "import * as model from \\"../..\\";

export interface Services {
    http: model.services.http.HttpService[];
    websocket: model.services.websocket.WebSocketService[];
}
",
  "/fern/types/index.ts": "export * from \\"./IntermediateRepresentation\\";
export * from \\"./Services\\";
",
  "/index.ts": "export * as commons from \\"./commons\\";
export * as errors from \\"./errors\\";
export * as fern from \\"./fern\\";
export * as services from \\"./services\\";
export * as types from \\"./types\\";
",
  "/package.json": "{
    \\"name\\": \\"posts\\",
    \\"version\\": \\"0.0.0\\",
    \\"main\\": \\"./index.js\\",
    \\"types\\": \\"./index.d.ts\\",
    \\"scripts\\": {
        \\"build\\": \\"esbuild $(find . -name '*.ts') --format=cjs --sourcemap --outdir=. && tsc\\"
    },
    \\"devDependencies\\": {
        \\"@types/node\\": \\"17.0.33\\",
        \\"esbuild\\": \\"0.14.47\\",
        \\"typescript\\": \\"4.6.4\\"
    }
}",
  "/services/commons/index.ts": "export * from \\"./types\\";
",
  "/services/commons/types/BaseService.ts": "import * as model from \\"../../..\\";

export interface BaseService extends model.commons.WithDocs {
    basePath: string;
    name: model.types.NamedType;
}
",
  "/services/commons/types/ResponseError.ts": "import * as model from \\"../../..\\";

export interface ResponseError extends model.commons.WithDocs {
    discriminantValue: string;
    error: model.types.NamedType;
}
",
  "/services/commons/types/ResponseErrors.ts": "import * as model from \\"../../..\\";

export interface ResponseErrors extends model.commons.WithDocs {
    discriminant: string;
    possibleErrors: model.services.commons.ResponseError[];
}
",
  "/services/commons/types/WireMessage.ts": "import * as model from \\"../../..\\";

export interface WireMessage extends model.commons.WithDocs {
    type: model.types.Type;
}
",
  "/services/commons/types/index.ts": "export * from \\"./BaseService\\";
export * from \\"./WireMessage\\";
export * from \\"./ResponseErrors\\";
export * from \\"./ResponseError\\";
",
  "/services/http/index.ts": "export * from \\"./types\\";
",
  "/services/http/types/HttpEndpoint.ts": "import * as model from \\"../../..\\";

export interface HttpEndpoint extends model.commons.WithDocs {
    endpointId: string;
    path: string;
    method: model.services.http.HttpMethod;
    headers: model.services.http.HttpHeader[];
    parameters: model.services.http.PathParameter[];
    queryParameters: model.services.http.QueryParameter[];
    request: model.services.commons.WireMessage | null | undefined;
    response: model.services.commons.WireMessage | null | undefined;
    errors: model.services.commons.ResponseErrors;
}
",
  "/services/http/types/HttpHeader.ts": "import * as model from \\"../../..\\";

export interface HttpHeader extends model.commons.WithDocs {
    header: string;
    valueType: model.types.TypeReference;
}
",
  "/services/http/types/HttpMethod.ts": "export type HttpMethod =
    | \\"GET\\"
    | \\"POST\\"
    | \\"PUT\\"
    | \\"PATCH\\"
    | \\"DELETE\\";

export const HttpMethod = {
    Get: \\"GET\\",
    Post: \\"POST\\",
    Put: \\"PUT\\",
    Patch: \\"PATCH\\",
    Delete: \\"DELETE\\",

    _visit: <Result>(value: HttpMethod, visitor: HttpMethod._Visitor<Result>): Result => {
        switch (value) {
            case HttpMethod.Get: return visitor.get();
            case HttpMethod.Post: return visitor.post();
            case HttpMethod.Put: return visitor.put();
            case HttpMethod.Patch: return visitor.patch();
            case HttpMethod.Delete: return visitor.delete();
            default: return visitor._unknown();
        }
    },

    _values: (): HttpMethod[] => [HttpMethod.Get, HttpMethod.Post, HttpMethod.Put, HttpMethod.Patch, HttpMethod.Delete],
} as const;

export declare namespace HttpMethod {
    type Get = \\"GET\\";
    type Post = \\"POST\\";
    type Put = \\"PUT\\";
    type Patch = \\"PATCH\\";
    type Delete = \\"DELETE\\";

    export interface _Visitor<Result> {
        get: () => Result;
        post: () => Result;
        put: () => Result;
        patch: () => Result;
        delete: () => Result;
        _unknown: () => Result;
    }
}
",
  "/services/http/types/HttpService.ts": "import * as model from \\"../../..\\";

export interface HttpService extends model.services.commons.BaseService {
    endpoints: model.services.http.HttpEndpoint[];
    headers: model.services.http.HttpHeader[];
}
",
  "/services/http/types/PathParameter.ts": "import * as model from \\"../../..\\";

export interface PathParameter extends model.commons.WithDocs {
    key: string;
    valueType: model.types.TypeReference;
}
",
  "/services/http/types/QueryParameter.ts": "import * as model from \\"../../..\\";

export interface QueryParameter extends model.commons.WithDocs {
    key: string;
    valueType: model.types.TypeReference;
}
",
  "/services/http/types/index.ts": "export * from \\"./HttpService\\";
export * from \\"./HttpEndpoint\\";
export * from \\"./HttpMethod\\";
export * from \\"./HttpHeader\\";
export * from \\"./PathParameter\\";
export * from \\"./QueryParameter\\";
",
  "/services/index.ts": "export * as commons from \\"./commons\\";
export * as http from \\"./http\\";
export * as websocket from \\"./websocket\\";
",
  "/services/websocket/index.ts": "export * from \\"./types\\";
",
  "/services/websocket/types/WebSocketMessage.ts": "import * as model from \\"../../..\\";

export interface WebSocketMessage extends model.commons.WithDocs {
    origin: model.services.websocket.WebSocketMessageOrigin;
    body: model.services.commons.WireMessage | null | undefined;
    response: model.services.websocket.WebSocketMessageResponse | null | undefined;
    errors: model.services.commons.ResponseErrors;
}
",
  "/services/websocket/types/WebSocketMessageOrigin.ts": "export type WebSocketMessageOrigin =
    | \\"CLIENT\\"
    | \\"SERVER\\";

export const WebSocketMessageOrigin = {
    Client: \\"CLIENT\\",
    Server: \\"SERVER\\",

    _visit: <Result>(value: WebSocketMessageOrigin, visitor: WebSocketMessageOrigin._Visitor<Result>): Result => {
        switch (value) {
            case WebSocketMessageOrigin.Client: return visitor.client();
            case WebSocketMessageOrigin.Server: return visitor.server();
            default: return visitor._unknown();
        }
    },

    _values: (): WebSocketMessageOrigin[] => [WebSocketMessageOrigin.Client, WebSocketMessageOrigin.Server],
} as const;

export declare namespace WebSocketMessageOrigin {
    type Client = \\"CLIENT\\";
    type Server = \\"SERVER\\";

    export interface _Visitor<Result> {
        client: () => Result;
        server: () => Result;
        _unknown: () => Result;
    }
}
",
  "/services/websocket/types/WebSocketMessageResponse.ts": "import * as model from \\"../../..\\";

export interface WebSocketMessageResponse extends model.services.commons.WireMessage {
    /** Defaults to WebSocketMessageResponseBehavior.ONGOING */
    behavior: model.services.websocket.WebSocketMessageResponseBehavior;
    type: model.types.Type;
}
",
  "/services/websocket/types/WebSocketMessageResponseBehavior.ts": "export type WebSocketMessageResponseBehavior =
    | \\"ONGOING\\"
    | \\"REQUEST_RESPONSE\\";

export const WebSocketMessageResponseBehavior = {
    Ongoing: \\"ONGOING\\",
    RequestResponse: \\"REQUEST_RESPONSE\\",

    _visit: <Result>(value: WebSocketMessageResponseBehavior, visitor: WebSocketMessageResponseBehavior._Visitor<Result>): Result => {
        switch (value) {
            case WebSocketMessageResponseBehavior.Ongoing: return visitor.ongoing();
            case WebSocketMessageResponseBehavior.RequestResponse: return visitor.requestResponse();
            default: return visitor._unknown();
        }
    },

    _values: (): WebSocketMessageResponseBehavior[] => [WebSocketMessageResponseBehavior.Ongoing, WebSocketMessageResponseBehavior.RequestResponse],
} as const;

export declare namespace WebSocketMessageResponseBehavior {
    type Ongoing = \\"ONGOING\\";
    type RequestResponse = \\"REQUEST_RESPONSE\\";

    export interface _Visitor<Result> {
        ongoing: () => Result;
        requestResponse: () => Result;
        _unknown: () => Result;
    }
}
",
  "/services/websocket/types/WebSocketService.ts": "import * as model from \\"../../..\\";

export interface WebSocketService extends model.services.commons.BaseService {
    messages: model.services.websocket.WebSocketMessage[];
}
",
  "/services/websocket/types/index.ts": "export * from \\"./WebSocketService\\";
export * from \\"./WebSocketMessage\\";
export * from \\"./WebSocketMessageOrigin\\";
export * from \\"./WebSocketMessageResponse\\";
export * from \\"./WebSocketMessageResponseBehavior\\";
",
  "/tsconfig.json": "{
    \\"compilerOptions\\": {
        \\"strict\\": true,
        \\"skipLibCheck\\": true,
        \\"declaration\\": true,
        \\"sourceMap\\": true,
        \\"emitDeclarationOnly\\": true,
        \\"esModuleInterop\\": true
    }
}",
  "/types/index.ts": "export * from \\"./types\\";
",
  "/types/types/AliasTypeDefinition.ts": "import * as model from \\"../..\\";

export interface AliasTypeDefinition {
    aliasOf: model.types.TypeReference;
}
",
  "/types/types/ContainerType.ts": "import { types } from \\"../..\\";

export type ContainerType =
    | ContainerType.List
    | ContainerType.Map
    | ContainerType.Optional
    | ContainerType.Set;

export declare namespace ContainerType {
    interface List {
        _type: \\"list\\";
        list: types.TypeReference;
    }

    interface Map extends types.MapType {
        _type: \\"map\\";
    }

    interface Optional {
        _type: \\"optional\\";
        optional: types.TypeReference;
    }

    interface Set {
        _type: \\"set\\";
        set: types.TypeReference;
    }

    export interface _Visitor<Result> {
        list: (value: types.TypeReference) => Result;
        map: (value: types.MapType) => Result;
        optional: (value: types.TypeReference) => Result;
        set: (value: types.TypeReference) => Result;
        _unknown: () => Result;
    }
}

export const ContainerType = {
    list: (value: types.TypeReference): ContainerType.List => ({
        list: value,
        _type: \\"list\\"
    }),

    map: (value: types.MapType): ContainerType.Map => ({
        ...value,
        _type: \\"map\\"
    }),

    optional: (value: types.TypeReference): ContainerType.Optional => ({
        optional: value,
        _type: \\"optional\\"
    }),

    set: (value: types.TypeReference): ContainerType.Set => ({
        set: value,
        _type: \\"set\\"
    }),

    _visit: <Result>(value: ContainerType, visitor: ContainerType._Visitor<Result>): Result => {
        switch (value._type) {
            case \\"list\\": return visitor.list(value.list);
            case \\"map\\": return visitor.map(value);
            case \\"optional\\": return visitor.optional(value.optional);
            case \\"set\\": return visitor.set(value.set);
            default: return visitor._unknown();
        }
    },

    _types: (): ContainerType[\\"_type\\"][] => [\\"list\\", \\"map\\", \\"optional\\", \\"set\\"],
} as const;
",
  "/types/types/EnumTypeDefinition.ts": "import * as model from \\"../..\\";

export interface EnumTypeDefinition {
    values: model.types.EnumValue[];
}
",
  "/types/types/EnumValue.ts": "import * as model from \\"../..\\";

export interface EnumValue extends model.commons.WithDocs {
    value: string;
}
",
  "/types/types/FernFilepath.ts": "/**
 * A filepath to a Fern spec file, excluding the file extension
 */
export type FernFilepath = string & {
    __FernFilepath: void;
};

export const FernFilepath = {
    of: (value: string): FernFilepath => value as FernFilepath
};
",
  "/types/types/MapType.ts": "import * as model from \\"../..\\";

export interface MapType {
    keyType: model.types.TypeReference;
    valueType: model.types.TypeReference;
}
",
  "/types/types/NamedType.ts": "import * as model from \\"../..\\";

export interface NamedType {
    fernFilepath: model.types.FernFilepath;
    name: string;
}
",
  "/types/types/ObjectProperty.ts": "import * as model from \\"../..\\";

export interface ObjectProperty extends model.commons.WithDocs {
    key: string;
    valueType: model.types.TypeReference;
}
",
  "/types/types/ObjectTypeDefinition.ts": "import * as model from \\"../..\\";

export interface ObjectTypeDefinition {
    /** A list of other types to inherit from */
    extends: model.types.NamedType[];
    properties: model.types.ObjectProperty[];
}
",
  "/types/types/PrimitiveType.ts": "export type PrimitiveType =
    | \\"INTEGER\\"
    | \\"DOUBLE\\"
    | \\"STRING\\"
    | \\"BOOLEAN\\"
    /**
     * Within the range -2^53 to 2^53 */
    | \\"LONG\\";

export const PrimitiveType = {
    Integer: \\"INTEGER\\",
    Double: \\"DOUBLE\\",
    String: \\"STRING\\",
    Boolean: \\"BOOLEAN\\",
    Long: \\"LONG\\",

    _visit: <Result>(value: PrimitiveType, visitor: PrimitiveType._Visitor<Result>): Result => {
        switch (value) {
            case PrimitiveType.Integer: return visitor.integer();
            case PrimitiveType.Double: return visitor.double();
            case PrimitiveType.String: return visitor.string();
            case PrimitiveType.Boolean: return visitor.boolean();
            case PrimitiveType.Long: return visitor.long();
            default: return visitor._unknown();
        }
    },

    _values: (): PrimitiveType[] => [PrimitiveType.Integer, PrimitiveType.Double, PrimitiveType.String, PrimitiveType.Boolean, PrimitiveType.Long],
} as const;

export declare namespace PrimitiveType {
    type Integer = \\"INTEGER\\";
    type Double = \\"DOUBLE\\";
    type String = \\"STRING\\";
    type Boolean = \\"BOOLEAN\\";
    type Long = \\"LONG\\";

    export interface _Visitor<Result> {
        integer: () => Result;
        double: () => Result;
        string: () => Result;
        boolean: () => Result;
        long: () => Result;
        _unknown: () => Result;
    }
}
",
  "/types/types/SingleUnionType.ts": "import * as model from \\"../..\\";

export interface SingleUnionType extends model.commons.WithDocs {
    discriminantValue: string;
    valueType: model.types.TypeReference;
}
",
  "/types/types/Type.ts": "import { types } from \\"../..\\";

export type Type =
    | Type.Alias
    | Type.Enum
    | Type.Object
    | Type.Union;

export declare namespace Type {
    interface Alias extends types.AliasTypeDefinition {
        _type: \\"alias\\";
    }

    interface Enum extends types.EnumTypeDefinition {
        _type: \\"enum\\";
    }

    interface Object extends types.ObjectTypeDefinition {
        _type: \\"object\\";
    }

    interface Union extends types.UnionTypeDefinition {
        _type: \\"union\\";
    }

    export interface _Visitor<Result> {
        alias: (value: types.AliasTypeDefinition) => Result;
        enum: (value: types.EnumTypeDefinition) => Result;
        object: (value: types.ObjectTypeDefinition) => Result;
        union: (value: types.UnionTypeDefinition) => Result;
        _unknown: () => Result;
    }
}

export const Type = {
    alias: (value: types.AliasTypeDefinition): Type.Alias => ({
        ...value,
        _type: \\"alias\\"
    }),

    enum: (value: types.EnumTypeDefinition): Type.Enum => ({
        ...value,
        _type: \\"enum\\"
    }),

    object: (value: types.ObjectTypeDefinition): Type.Object => ({
        ...value,
        _type: \\"object\\"
    }),

    union: (value: types.UnionTypeDefinition): Type.Union => ({
        ...value,
        _type: \\"union\\"
    }),

    _visit: <Result>(value: Type, visitor: Type._Visitor<Result>): Result => {
        switch (value._type) {
            case \\"alias\\": return visitor.alias(value);
            case \\"enum\\": return visitor.enum(value);
            case \\"object\\": return visitor.object(value);
            case \\"union\\": return visitor.union(value);
            default: return visitor._unknown();
        }
    },

    _types: (): Type[\\"_type\\"][] => [\\"alias\\", \\"enum\\", \\"object\\", \\"union\\"],
} as const;
",
  "/types/types/TypeDefinition.ts": "import * as model from \\"../..\\";

/**
 * A type, which is a name and a shape
 */
export interface TypeDefinition extends model.commons.WithDocs {
    name: model.types.NamedType;
    shape: model.types.Type;
}
",
  "/types/types/TypeReference.ts": "import { types } from \\"../..\\";

export type TypeReference =
    | TypeReference.Container
    | TypeReference.Named
    | TypeReference.Primitive
    | TypeReference.Void;

export declare namespace TypeReference {
    interface Container {
        _type: \\"container\\";
        container: types.ContainerType;
    }

    interface Named extends types.NamedType {
        _type: \\"named\\";
    }

    interface Primitive {
        _type: \\"primitive\\";
        primitive: types.PrimitiveType;
    }

    interface Void {
        _type: \\"void\\";
    }

    export interface _Visitor<Result> {
        container: (value: types.ContainerType) => Result;
        named: (value: types.NamedType) => Result;
        primitive: (value: types.PrimitiveType) => Result;
        void: () => Result;
        _unknown: () => Result;
    }
}

export const TypeReference = {
    container: (value: types.ContainerType): TypeReference.Container => ({
        container: value,
        _type: \\"container\\"
    }),

    named: (value: types.NamedType): TypeReference.Named => ({
        ...value,
        _type: \\"named\\"
    }),

    primitive: (value: types.PrimitiveType): TypeReference.Primitive => ({
        primitive: value,
        _type: \\"primitive\\"
    }),

    void: (): TypeReference.Void => ({
        _type: \\"void\\"
    }),

    _visit: <Result>(value: TypeReference, visitor: TypeReference._Visitor<Result>): Result => {
        switch (value._type) {
            case \\"container\\": return visitor.container(value.container);
            case \\"named\\": return visitor.named(value);
            case \\"primitive\\": return visitor.primitive(value.primitive);
            case \\"void\\": return visitor.void();
            default: return visitor._unknown();
        }
    },

    _types: (): TypeReference[\\"_type\\"][] => [\\"container\\", \\"named\\", \\"primitive\\", \\"void\\"],
} as const;
",
  "/types/types/UnionTypeDefinition.ts": "import * as model from \\"../..\\";

export interface UnionTypeDefinition {
    discriminant: string;
    types: model.types.SingleUnionType[];
}
",
  "/types/types/index.ts": "export * from \\"./FernFilepath\\";
export * from \\"./TypeDefinition\\";
export * from \\"./NamedType\\";
export * from \\"./Type\\";
export * from \\"./AliasTypeDefinition\\";
export * from \\"./EnumTypeDefinition\\";
export * from \\"./EnumValue\\";
export * from \\"./ObjectTypeDefinition\\";
export * from \\"./ObjectProperty\\";
export * from \\"./UnionTypeDefinition\\";
export * from \\"./SingleUnionType\\";
export * from \\"./TypeReference\\";
export * from \\"./ContainerType\\";
export * from \\"./MapType\\";
export * from \\"./PrimitiveType\\";
",
}
`;

exports[`generateModelProject posts 1`] = `
Object {
  "/.npmignore": "tsconfig.json",
  "/commons/index.ts": "export * from \\"./types\\";
",
  "/commons/types/PostId.ts": "/**
 * An ID of a blog post
 */
export type PostId = string & {
    __PostId: void;
};

export const PostId = {
    of: (value: string): PostId => value as PostId
};
",
  "/commons/types/index.ts": "export * from \\"./PostId\\";
",
  "/index.ts": "export * as commons from \\"./commons\\";
export * as posts from \\"./posts\\";
",
  "/package.json": "{
    \\"name\\": \\"posts\\",
    \\"version\\": \\"0.0.0\\",
    \\"main\\": \\"./index.js\\",
    \\"types\\": \\"./index.d.ts\\",
    \\"scripts\\": {
        \\"build\\": \\"esbuild $(find . -name '*.ts') --format=cjs --sourcemap --outdir=. && tsc\\"
    },
    \\"dependencies\\": {
        \\"uuid\\": \\"8.3.2\\",
        \\"@types/uuid\\": \\"8.3.4\\"
    },
    \\"devDependencies\\": {
        \\"@types/node\\": \\"17.0.33\\",
        \\"esbuild\\": \\"0.14.47\\",
        \\"typescript\\": \\"4.6.4\\"
    }
}",
  "/posts/errors/PostNotFoundError.ts": "export type PostNotFoundError = string & {
    __PostNotFoundError: void;
};

export const PostNotFoundError = {
    of: (value: string): PostNotFoundError => value as PostNotFoundError
};
",
  "/posts/errors/index.ts": "export * from \\"./PostNotFoundError\\";
",
  "/posts/index.ts": "export * from \\"./types\\";
export * from \\"./errors\\";
export * from \\"./service-types\\";
",
  "/posts/service-types/PostsService/GetPostErrorBody.ts": "import { posts } from \\"../../..\\";
import * as uuid from \\"uuid\\";

export type GetPostErrorBody =
    | GetPostErrorBody.PostNotFoundError;

export declare namespace GetPostErrorBody {
    interface PostNotFoundError {
        _error: \\"PostNotFoundError\\";
        _errorInstanceId: string;
        PostNotFoundError: posts.PostNotFoundError;
    }

    export interface _Visitor<Result> {
        PostNotFoundError: (value: posts.PostNotFoundError) => Result;
        _unknown: () => Result;
    }
}

export const GetPostErrorBody = {
    PostNotFoundError: (value: posts.PostNotFoundError): GetPostErrorBody.PostNotFoundError => ({
        PostNotFoundError: value,
        _error: \\"PostNotFoundError\\",
        _errorInstanceId: uuid.v4()
    }),

    _visit: <Result>(value: GetPostErrorBody, visitor: GetPostErrorBody._Visitor<Result>): Result => {
        switch (value._error) {
            case \\"PostNotFoundError\\": return visitor.PostNotFoundError(value.PostNotFoundError);
            default: return visitor._unknown();
        }
    },

    _types: (): GetPostErrorBody[\\"_error\\"][] => [\\"PostNotFoundError\\"],
} as const;
",
  "/posts/service-types/PostsService/GetPostRequest.ts": "import * as model from \\"../../..\\";

export interface GetPostRequest {
    postId: string;
    body: model.posts.CreatePostRequest;
}
",
  "/posts/service-types/PostsService/GetPostResponse.ts": "import * as model from \\"../../..\\";

export type GetPostResponse = GetPostResponse.SuccessResponse | GetPostResponse.ErrorResponse;

namespace GetPostResponse {
    export interface SuccessResponse {
        ok: true;
        body: model.posts.GetPostResponseBody;
    }

    export interface ErrorResponse {
        ok: false;
        error: model.posts.GetPostErrorBody;
    }
}
",
  "/posts/service-types/PostsService/GetPostResponseBody.ts": "export interface GetPostResponseBody {
    a: number;
}
",
  "/posts/service-types/PostsService/index.ts": "export * from \\"./GetPostRequest\\";
export * from \\"./GetPostResponseBody\\";
export * from \\"./GetPostErrorBody\\";
export * from \\"./GetPostResponse\\";
",
  "/posts/service-types/index.ts": "export * from \\"./PostsService\\";
",
  "/posts/types/Author.ts": "export type Author =
    | Author.Anonymous
    | Author.Named;

export declare namespace Author {
    interface Anonymous {
        _type: \\"anonymous\\";
    }

    interface Named {
        _type: \\"named\\";
        named: string;
    }

    export interface _Visitor<Result> {
        anonymous: () => Result;
        named: (value: string) => Result;
        _unknown: () => Result;
    }
}

export const Author = {
    anonymous: (): Author.Anonymous => ({
        _type: \\"anonymous\\"
    }),

    named: (value: string): Author.Named => ({
        named: value,
        _type: \\"named\\"
    }),

    _visit: <Result>(value: Author, visitor: Author._Visitor<Result>): Result => {
        switch (value._type) {
            case \\"anonymous\\": return visitor.anonymous();
            case \\"named\\": return visitor.named(value.named);
            default: return visitor._unknown();
        }
    },

    _types: (): Author[\\"_type\\"][] => [\\"anonymous\\", \\"named\\"],
} as const;
",
  "/posts/types/BlogPostReference.ts": "import { posts } from \\"../..\\";

export type BlogPostReference =
    | BlogPostReference.Post;

export declare namespace BlogPostReference {
    interface Post extends posts.Post {
        _type: \\"post\\";
    }

    export interface _Visitor<Result> {
        post: (value: posts.Post) => Result;
        _unknown: () => Result;
    }
}

export const BlogPostReference = {
    post: (value: posts.Post): BlogPostReference.Post => ({
        ...value,
        _type: \\"post\\"
    }),

    _visit: <Result>(value: BlogPostReference, visitor: BlogPostReference._Visitor<Result>): Result => {
        switch (value._type) {
            case \\"post\\": return visitor.post(value);
            default: return visitor._unknown();
        }
    },

    _types: (): BlogPostReference[\\"_type\\"][] => [\\"post\\"],
} as const;
",
  "/posts/types/CreatePostRequest.ts": "import * as model from \\"../..\\";

export interface CreatePostRequest {
    title: string;
    author: model.posts.Author;
    content: string;
}
",
  "/posts/types/Post.ts": "import * as model from \\"../..\\";

/**
 * A blog post
 */
export interface Post {
    id: model.commons.PostId;
    type: model.posts.PostType;
    title: string;
    author: model.posts.Author;
    content: string;
    customConfig: unknown;
}
",
  "/posts/types/PostType.ts": "export type PostType =
    | \\"LONG\\"
    | \\"SHORT\\";

export const PostType = {
    Long: \\"LONG\\",
    Short: \\"SHORT\\",

    _visit: <Result>(value: PostType, visitor: PostType._Visitor<Result>): Result => {
        switch (value) {
            case PostType.Long: return visitor.long();
            case PostType.Short: return visitor.short();
            default: return visitor._unknown();
        }
    },

    _values: (): PostType[] => [PostType.Long, PostType.Short],
} as const;

export declare namespace PostType {
    type Long = \\"LONG\\";
    type Short = \\"SHORT\\";

    export interface _Visitor<Result> {
        long: () => Result;
        short: () => Result;
        _unknown: () => Result;
    }
}
",
  "/posts/types/index.ts": "export * from \\"./Post\\";
export * from \\"./BlogPostReference\\";
export * from \\"./PostType\\";
export * from \\"./Author\\";
export * from \\"./CreatePostRequest\\";
",
  "/tsconfig.json": "{
    \\"compilerOptions\\": {
        \\"strict\\": true,
        \\"skipLibCheck\\": true,
        \\"declaration\\": true,
        \\"sourceMap\\": true,
        \\"emitDeclarationOnly\\": true,
        \\"esModuleInterop\\": true
    }
}",
}
`;
