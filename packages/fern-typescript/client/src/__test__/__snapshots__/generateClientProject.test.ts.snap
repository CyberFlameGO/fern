// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`generateClientProject chat app 1`] = `
Object {
  "/.npmignore": "tsconfig.json",
  "/index.ts": "export * as model from \\"./model\\";
export * as services from \\"./services\\";
",
  "/model/chat/errors/GenericMessage.ts": "export type GenericMessage = string & {
    __GenericMessage: void;
};

export const GenericMessage = {
    of: (value: string): GenericMessage => value as GenericMessage
};
",
  "/model/chat/errors/index.ts": "export * from \\"./GenericMessage\\";
",
  "/model/chat/index.ts": "export * from \\"./types\\";
export * from \\"./errors\\";
export * from \\"./service-types\\";
",
  "/model/chat/service-types/ChatService/SendChatErrorBody.ts": "import { chat } from \\"../../..\\";
import * as uuid from \\"uuid\\";

export type SendChatErrorBody =
    | SendChatErrorBody.GenericMessage;

export declare namespace SendChatErrorBody {
    interface GenericMessage {
        _error: \\"GenericMessage\\";
        _errorInstanceId: string;
        GenericMessage: chat.GenericMessage;
    }

    export interface _Visitor<Result> {
        GenericMessage: (value: chat.GenericMessage) => Result;
        _unknown: () => Result;
    }
}

export const SendChatErrorBody = {
    GenericMessage: (value: chat.GenericMessage): SendChatErrorBody.GenericMessage => ({
        GenericMessage: value,
        _error: \\"GenericMessage\\",
        _errorInstanceId: uuid.v4()
    }),

    _visit: <Result>(value: SendChatErrorBody, visitor: SendChatErrorBody._Visitor<Result>): Result => {
        switch (value._error) {
            case \\"GenericMessage\\": return visitor.GenericMessage(value.GenericMessage);
            default: return visitor._unknown();
        }
    },

    _types: (): SendChatErrorBody[\\"_error\\"][] => [\\"GenericMessage\\"],
} as const;
",
  "/model/chat/service-types/ChatService/SendChatRequest.ts": "import * as model from \\"../../..\\";

export interface SendChatRequest {
    id: string;
    operation: \\"sendChat\\";
    body: model.chat.SendChatRequestBody;
}
",
  "/model/chat/service-types/ChatService/SendChatRequestBody.ts": "export interface SendChatRequestBody {
    title: string;
    content: string;
}
",
  "/model/chat/service-types/ChatService/SendChatResponse.ts": "import * as model from \\"../../..\\";

export type SendChatResponse = SendChatResponse.SuccessResponse | SendChatResponse.ErrorResponse;

namespace SendChatResponse {
    export interface SuccessResponse {
        ok: true;
        id: string;
        replyTo: string;
        body: model.chat.ChatMessage;
    }

    export interface ErrorResponse {
        ok: false;
        id: string;
        replyTo: string;
        error: model.chat.SendChatErrorBody;
    }
}
",
  "/model/chat/service-types/ChatService/index.ts": "export * from \\"./SendChatRequestBody\\";
export * from \\"./SendChatRequest\\";
export * from \\"./SendChatErrorBody\\";
export * from \\"./SendChatResponse\\";
",
  "/model/chat/service-types/index.ts": "export * from \\"./ChatService\\";
",
  "/model/chat/types/ChatMessage.ts": "import * as model from \\"../..\\";

export interface ChatMessage {
    id: model.chat.ChatMessageId;
    title: string;
    content: string;
}
",
  "/model/chat/types/ChatMessageId.ts": "export type ChatMessageId = string & {
    __ChatMessageId: void;
};

export const ChatMessageId = {
    of: (value: string): ChatMessageId => value as ChatMessageId
};
",
  "/model/chat/types/index.ts": "export * from \\"./ChatMessageId\\";
export * from \\"./ChatMessage\\";
",
  "/model/index.ts": "export * as chat from \\"./chat\\";
",
  "/package.json": "{
    \\"name\\": \\"chat\\",
    \\"version\\": \\"0.0.0\\",
    \\"main\\": \\"./index.js\\",
    \\"types\\": \\"./index.d.ts\\",
    \\"scripts\\": {
        \\"build\\": \\"esbuild $(find . -name '*.ts') --format=cjs --outdir=. && tsc\\"
    },
    \\"dependencies\\": {
        \\"uuid\\": \\"8.3.2\\",
        \\"@types/uuid\\": \\"8.3.4\\"
    },
    \\"devDependencies\\": {
        \\"@types/node\\": \\"17.0.33\\",
        \\"esbuild\\": \\"0.14.47\\",
        \\"typescript\\": \\"4.6.4\\"
    }
}",
  "/services/chat/ChatService.ts": "import * as model from \\"../../model\\";
import * as uuid from \\"uuid\\";

export declare namespace ChatService {
    interface Args {
        origin: string;
    }

    type ServerMessage = model.chat.SendChatResponse;
}

export interface ChatService {
    sendChat(request: model.chat.SendChatRequestBody): Promise<model.chat.SendChatResponse>;
}

export class ChatService implements ChatService {
    private socket: Promise<WebSocket>;
    private callbacks: Record<string, (response: any) => void> = {};

    constructor(args: ChatService.Args) {
        this.socket = new Promise(resolve => {
            const socket = new WebSocket(args.origin + \\"/chat\\");
            socket.onopen = () => {
                resolve(socket);
            };
            socket.onmessage = this._onMessage;
        });
    }

    public async sendChat(request: model.chat.SendChatRequestBody): Promise<model.chat.SendChatResponse> {
        const socket = await this.socket;

        return new Promise(resolve => {
            const message: model.chat.SendChatRequest = {
                id: uuid.v4(),
                operation: \\"sendChat\\",
                body: request
            };
            this.callbacks[message.id] = resolve;
            socket.send(JSON.stringify(message));
        });
    }

    public async _disconnect(): Promise<void> {
        const socket = await this.socket;
        return new Promise(resolve => {
            socket.onclose = () => {
                resolve();
            };
            socket.close();
        });
    }

    private _onMessage(event: MessageEvent): void {
        const message = JSON.parse(event.data) as ChatService.ServerMessage;
        if (\\"operation\\" in message) {
            console.log(\\"Received server message\\");
        }
        else {
            const callback = this.callbacks[message.replyTo];
            if (callback != null) {
                callback(message);
            }
            else {
                console.error(\\"Received reply to unknown request\\");
            }
        }
    }
}
",
  "/services/chat/index.ts": "export * from \\"./ChatService\\";
",
  "/services/index.ts": "export * as chat from \\"./chat\\";
",
  "/tsconfig.json": "{
    \\"compilerOptions\\": {
        \\"strict\\": true,
        \\"skipLibCheck\\": true,
        \\"declaration\\": true,
        \\"sourceMap\\": true,
        \\"emitDeclarationOnly\\": true,
        \\"esModuleInterop\\": true
    }
}",
}
`;

exports[`generateClientProject no errors 1`] = `
Object {
  "/.npmignore": "tsconfig.json",
  "/index.ts": "export * as model from \\"./model\\";
export * as services from \\"./services\\";
",
  "/model/api/index.ts": "export * from \\"./service-types\\";
",
  "/model/api/service-types/NoErrorsService/GetErrorBody.ts": "export type GetErrorBody = never;

export declare namespace GetErrorBody {
    export interface _Visitor<Result> {
        _unknown: () => Result;
    }
}

export const GetErrorBody = {
    _visit: <Result>(_value: GetErrorBody, visitor: GetErrorBody._Visitor<Result>): Result => {
        return visitor._unknown();
    },

    _types: (): GetErrorBody[\\"_error\\"][] => [],
} as const;
",
  "/model/api/service-types/NoErrorsService/GetResponse.ts": "import * as model from \\"../../..\\";

export type GetResponse = GetResponse.SuccessResponse | GetResponse.ErrorResponse;

namespace GetResponse {
    export interface SuccessResponse {
        ok: true;
    }

    export interface ErrorResponse {
        ok: false;
        error: model.api.GetErrorBody;
    }
}
",
  "/model/api/service-types/NoErrorsService/index.ts": "export * from \\"./GetErrorBody\\";
export * from \\"./GetResponse\\";
",
  "/model/api/service-types/index.ts": "export * from \\"./NoErrorsService\\";
",
  "/model/index.ts": "export * as api from \\"./api\\";
",
  "/package.json": "{
    \\"name\\": \\"no-errors\\",
    \\"version\\": \\"0.0.0\\",
    \\"main\\": \\"./index.js\\",
    \\"types\\": \\"./index.d.ts\\",
    \\"scripts\\": {
        \\"build\\": \\"esbuild $(find . -name '*.ts') --format=cjs --outdir=. && tsc\\"
    },
    \\"dependencies\\": {
        \\"@fern-typescript/service-utils\\": \\"0.0.100\\"
    },
    \\"devDependencies\\": {
        \\"@types/node\\": \\"17.0.33\\",
        \\"esbuild\\": \\"0.14.47\\",
        \\"typescript\\": \\"4.6.4\\"
    }
}",
  "/services/api/NoErrorsService.ts": "import { isResponseOk, defaultFetcher, Service, Token, Fetcher } from \\"@fern-typescript/service-utils\\";
import * as model from \\"../../model\\";

export interface NoErrorsService {
    get(): Promise<model.api.GetResponse>;
}

export class NoErrorsService implements NoErrorsService {
    private baseUrl: string;
    private fetcher: Fetcher;
    private token: Token | undefined;

    constructor(args: Service.Init) {
        this.fetcher = args.fetcher ?? defaultFetcher;
        this.baseUrl = args.origin;
        this.token = args.token;
    }

    public async get(): Promise<model.api.GetResponse> {
        const encodedResponse = await this.fetcher({
            url: this.baseUrl + \\"/\\",
            method: \\"GET\\",
            headers: {},
            token: this.token
        });

        if (isResponseOk(encodedResponse)) {
            return {
                ok: true
            };
        }
        else {
            const error = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: false,
                error: error as model.api.GetErrorBody
            };
        }
    }
}
",
  "/services/api/index.ts": "export * from \\"./NoErrorsService\\";
",
  "/services/index.ts": "export * as api from \\"./api\\";
",
  "/tsconfig.json": "{
    \\"compilerOptions\\": {
        \\"strict\\": true,
        \\"skipLibCheck\\": true,
        \\"declaration\\": true,
        \\"sourceMap\\": true,
        \\"emitDeclarationOnly\\": true,
        \\"esModuleInterop\\": true
    }
}",
}
`;

exports[`generateClientProject posts 1`] = `
Object {
  "/.npmignore": "tsconfig.json",
  "/index.ts": "export * as model from \\"./model\\";
export * as services from \\"./services\\";
",
  "/model/commons/index.ts": "export * from \\"./types\\";
",
  "/model/commons/types/PostId.ts": "/**
 * An ID of a blog post
 */
export type PostId = string & {
    __PostId: void;
};

export const PostId = {
    of: (value: string): PostId => value as PostId
};
",
  "/model/commons/types/index.ts": "export * from \\"./PostId\\";
",
  "/model/index.ts": "export * as commons from \\"./commons\\";
export * as posts from \\"./posts\\";
",
  "/model/posts/errors/PostNotFoundError.ts": "import * as model from \\"../..\\";

export interface PostNotFoundError {
    id: model.commons.PostId;
}
",
  "/model/posts/errors/index.ts": "export * from \\"./PostNotFoundError\\";
",
  "/model/posts/index.ts": "export * from \\"./types\\";
export * from \\"./errors\\";
export * from \\"./service-types\\";
",
  "/model/posts/service-types/PostsService/CreatePostErrorBody.ts": "export type CreatePostErrorBody = never;

export declare namespace CreatePostErrorBody {
    export interface _Visitor<Result> {
        _unknown: () => Result;
    }
}

export const CreatePostErrorBody = {
    _visit: <Result>(_value: CreatePostErrorBody, visitor: CreatePostErrorBody._Visitor<Result>): Result => {
        return visitor._unknown();
    },

    _types: (): CreatePostErrorBody[\\"_error\\"][] => [],
} as const;
",
  "/model/posts/service-types/PostsService/CreatePostRequest.ts": "import * as model from \\"../../..\\";

export interface CreatePostRequest {
    type: model.posts.PostType;
    title: string;
    author: model.posts.Author;
    content: string;
}
",
  "/model/posts/service-types/PostsService/CreatePostResponse.ts": "import * as model from \\"../../..\\";

export type CreatePostResponse = CreatePostResponse.SuccessResponse | CreatePostResponse.ErrorResponse;

namespace CreatePostResponse {
    export interface SuccessResponse {
        ok: true;
        body: model.commons.PostId;
    }

    export interface ErrorResponse {
        ok: false;
        error: model.posts.CreatePostErrorBody;
    }
}
",
  "/model/posts/service-types/PostsService/GetPostErrorBody.ts": "import { posts } from \\"../../..\\";
import * as uuid from \\"uuid\\";

export type GetPostErrorBody =
    | GetPostErrorBody.PostNotFoundError;

export declare namespace GetPostErrorBody {
    interface PostNotFoundError extends posts.PostNotFoundError {
        _error: \\"PostNotFoundError\\";
        _errorInstanceId: string;
    }

    export interface _Visitor<Result> {
        PostNotFoundError: (value: posts.PostNotFoundError) => Result;
        _unknown: () => Result;
    }
}

export const GetPostErrorBody = {
    PostNotFoundError: (value: posts.PostNotFoundError): GetPostErrorBody.PostNotFoundError => ({
        ...value,
        _error: \\"PostNotFoundError\\",
        _errorInstanceId: uuid.v4()
    }),

    _visit: <Result>(value: GetPostErrorBody, visitor: GetPostErrorBody._Visitor<Result>): Result => {
        switch (value._error) {
            case \\"PostNotFoundError\\": return visitor.PostNotFoundError(value);
            default: return visitor._unknown();
        }
    },

    _types: (): GetPostErrorBody[\\"_error\\"][] => [\\"PostNotFoundError\\"],
} as const;
",
  "/model/posts/service-types/PostsService/GetPostRequest.ts": "import * as model from \\"../../..\\";

export interface GetPostRequest {
    postId: model.commons.PostId;
    page: number | null | undefined;
    otherParam: number | null | undefined;
}
",
  "/model/posts/service-types/PostsService/GetPostResponse.ts": "import * as model from \\"../../..\\";

export type GetPostResponse = GetPostResponse.SuccessResponse | GetPostResponse.ErrorResponse;

namespace GetPostResponse {
    export interface SuccessResponse {
        ok: true;
        body: model.posts.Post;
    }

    export interface ErrorResponse {
        ok: false;
        error: model.posts.GetPostErrorBody;
    }
}
",
  "/model/posts/service-types/PostsService/GetPostV2ErrorBody.ts": "import { posts } from \\"../../..\\";
import * as uuid from \\"uuid\\";

export type GetPostV2ErrorBody =
    | GetPostV2ErrorBody.PostNotFoundError;

export declare namespace GetPostV2ErrorBody {
    interface PostNotFoundError extends posts.PostNotFoundError {
        _error: \\"PostNotFoundError\\";
        _errorInstanceId: string;
    }

    export interface _Visitor<Result> {
        PostNotFoundError: (value: posts.PostNotFoundError) => Result;
        _unknown: () => Result;
    }
}

export const GetPostV2ErrorBody = {
    PostNotFoundError: (value: posts.PostNotFoundError): GetPostV2ErrorBody.PostNotFoundError => ({
        ...value,
        _error: \\"PostNotFoundError\\",
        _errorInstanceId: uuid.v4()
    }),

    _visit: <Result>(value: GetPostV2ErrorBody, visitor: GetPostV2ErrorBody._Visitor<Result>): Result => {
        switch (value._error) {
            case \\"PostNotFoundError\\": return visitor.PostNotFoundError(value);
            default: return visitor._unknown();
        }
    },

    _types: (): GetPostV2ErrorBody[\\"_error\\"][] => [\\"PostNotFoundError\\"],
} as const;
",
  "/model/posts/service-types/PostsService/GetPostV2Response.ts": "import * as model from \\"../../..\\";

export type GetPostV2Response = GetPostV2Response.SuccessResponse | GetPostV2Response.ErrorResponse;

namespace GetPostV2Response {
    export interface SuccessResponse {
        ok: true;
        body: model.posts.Post;
    }

    export interface ErrorResponse {
        ok: false;
        error: model.posts.GetPostV2ErrorBody;
    }
}
",
  "/model/posts/service-types/PostsService/index.ts": "export * from \\"./CreatePostRequest\\";
export * from \\"./CreatePostErrorBody\\";
export * from \\"./CreatePostResponse\\";
export * from \\"./GetPostRequest\\";
export * from \\"./GetPostErrorBody\\";
export * from \\"./GetPostResponse\\";
export * from \\"./GetPostV2ErrorBody\\";
export * from \\"./GetPostV2Response\\";
",
  "/model/posts/service-types/index.ts": "export * from \\"./PostsService\\";
",
  "/model/posts/types/Author.ts": "export type Author =
    | Author.Anonymous
    | Author.Named;

export declare namespace Author {
    interface Anonymous {
        _type: \\"anonymous\\";
    }

    interface Named {
        _type: \\"named\\";
        named: string;
    }

    export interface _Visitor<Result> {
        anonymous: () => Result;
        named: (value: string) => Result;
        _unknown: () => Result;
    }
}

export const Author = {
    anonymous: (): Author.Anonymous => ({
        _type: \\"anonymous\\"
    }),

    named: (value: string): Author.Named => ({
        named: value,
        _type: \\"named\\"
    }),

    _visit: <Result>(value: Author, visitor: Author._Visitor<Result>): Result => {
        switch (value._type) {
            case \\"anonymous\\": return visitor.anonymous();
            case \\"named\\": return visitor.named(value.named);
            default: return visitor._unknown();
        }
    },

    _types: (): Author[\\"_type\\"][] => [\\"anonymous\\", \\"named\\"],
} as const;
",
  "/model/posts/types/Post.ts": "import * as model from \\"../..\\";

/**
 * A blog post
 */
export interface Post {
    id: model.commons.PostId;
    type: model.posts.PostType;
    title: string;
    author: model.posts.Author;
    content: string;
    relatedPosts: model.posts.Post[];
}
",
  "/model/posts/types/PostType.ts": "export type PostType =
    | \\"LONG\\"
    | \\"SHORT\\";

export const PostType = {
    Long: \\"LONG\\",
    Short: \\"SHORT\\",

    _visit: <Result>(value: PostType, visitor: PostType._Visitor<Result>): Result => {
        switch (value) {
            case PostType.Long: return visitor.long();
            case PostType.Short: return visitor.short();
            default: return visitor._unknown();
        }
    },

    _values: (): PostType[] => [PostType.Long, PostType.Short],
} as const;

export declare namespace PostType {
    type Long = \\"LONG\\";
    type Short = \\"SHORT\\";

    export interface _Visitor<Result> {
        long: () => Result;
        short: () => Result;
        _unknown: () => Result;
    }
}
",
  "/model/posts/types/index.ts": "export * from \\"./Post\\";
export * from \\"./PostType\\";
export * from \\"./Author\\";
",
  "/package.json": "{
    \\"name\\": \\"posts\\",
    \\"version\\": \\"0.0.0\\",
    \\"main\\": \\"./index.js\\",
    \\"types\\": \\"./index.d.ts\\",
    \\"scripts\\": {
        \\"build\\": \\"esbuild $(find . -name '*.ts') --format=cjs --outdir=. && tsc\\"
    },
    \\"dependencies\\": {
        \\"uuid\\": \\"8.3.2\\",
        \\"@types/uuid\\": \\"8.3.4\\",
        \\"@fern-typescript/service-utils\\": \\"0.0.100\\"
    },
    \\"devDependencies\\": {
        \\"@types/node\\": \\"17.0.33\\",
        \\"esbuild\\": \\"0.14.47\\",
        \\"typescript\\": \\"4.6.4\\"
    }
}",
  "/services/index.ts": "export * as posts from \\"./posts\\";
",
  "/services/posts/PostsService.ts": "import { isResponseOk, defaultFetcher, Service, Token, Fetcher } from \\"@fern-typescript/service-utils\\";
import * as model from \\"../../model\\";

export interface PostsService {
    createPost(request: model.posts.CreatePostRequest): Promise<model.posts.CreatePostResponse>;
    getPost(request: model.posts.GetPostRequest): Promise<model.posts.GetPostResponse>;
    getPostV2(request: model.commons.PostId): Promise<model.posts.GetPostV2Response>;
}

export class PostsService implements PostsService {
    private baseUrl: string;
    private fetcher: Fetcher;
    private token: Token | undefined;

    constructor(args: Service.Init) {
        this.fetcher = args.fetcher ?? defaultFetcher;
        this.baseUrl = args.origin + \\"/posts\\";
        this.token = args.token;
    }

    public async createPost(request: model.posts.CreatePostRequest): Promise<model.posts.CreatePostResponse> {
        const encodedResponse = await this.fetcher({
            url: this.baseUrl + \\"/\\",
            method: \\"POST\\",
            headers: {},
            token: this.token,
            body: {
                content: JSON.stringify(request),
                contentType: \\"application/json\\"
            }
        });

        if (isResponseOk(encodedResponse)) {
            const response = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: true,
                body: response as model.commons.PostId
            };
        }
        else {
            const error = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: false,
                error: error as model.posts.CreatePostErrorBody
            };
        }
    }

    public async getPost(request: model.posts.GetPostRequest): Promise<model.posts.GetPostResponse> {
        const queryParameters = new URLSearchParams();
        if (request.page != null) {
            queryParameters.append(\\"page\\", request.page.toString());
        }
        if (request.otherParam != null) {
            queryParameters.append(\\"otherParam\\", request.otherParam.toString());
        }

        const encodedResponse = await this.fetcher({
            url: this.baseUrl + \`/\${request.postId}\`,
            method: \\"GET\\",
            headers: {},
            token: this.token,
            queryParameters
        });

        if (isResponseOk(encodedResponse)) {
            const response = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: true,
                body: response as model.posts.Post
            };
        }
        else {
            const error = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: false,
                error: error as model.posts.GetPostErrorBody
            };
        }
    }

    public async getPostV2(request: model.commons.PostId): Promise<model.posts.GetPostV2Response> {
        const encodedResponse = await this.fetcher({
            url: this.baseUrl + \\"/get\\",
            method: \\"GET\\",
            headers: {},
            token: this.token,
            body: {
                content: JSON.stringify(request),
                contentType: \\"application/json\\"
            }
        });

        if (isResponseOk(encodedResponse)) {
            const response = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: true,
                body: response as model.posts.Post
            };
        }
        else {
            const error = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: false,
                error: error as model.posts.GetPostV2ErrorBody
            };
        }
    }
}
",
  "/services/posts/index.ts": "export * from \\"./PostsService\\";
",
  "/tsconfig.json": "{
    \\"compilerOptions\\": {
        \\"strict\\": true,
        \\"skipLibCheck\\": true,
        \\"declaration\\": true,
        \\"sourceMap\\": true,
        \\"emitDeclarationOnly\\": true,
        \\"esModuleInterop\\": true
    }
}",
}
`;
