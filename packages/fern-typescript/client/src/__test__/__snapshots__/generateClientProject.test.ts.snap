// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`generateClientProject auth 1`] = `
Object {
  "/.npmignore": "tsconfig.json
.pnp.*
.yarn
yarn.lock
*.ts
!*.d.ts",
  "/index.ts": "export * as model from \\"./model\\";
export * as services from \\"./services\\";
",
  "/model/auth/_service-types/ServiceWithBasicAuth/EndpointBErrorBody.ts": "export type EndpointBErrorBody = never;

export declare namespace EndpointBErrorBody {
    export interface _Visitor<Result> {
        _unknown: () => Result;
    }
}

export const EndpointBErrorBody = {
    _visit: <Result>(_value: EndpointBErrorBody, visitor: EndpointBErrorBody._Visitor<Result>): Result => {
        return visitor._unknown();
    },

    _types: (): EndpointBErrorBody[\\"_error\\"][] => [],
} as const;
",
  "/model/auth/_service-types/ServiceWithBasicAuth/EndpointBResponse.ts": "import * as model from \\"../../..\\";

export type EndpointBResponse = EndpointBResponse.SuccessResponse | EndpointBResponse.ErrorResponse;

export declare namespace EndpointBResponse {
    export interface SuccessResponse {
        ok: true;
    }

    export interface ErrorResponse {
        ok: false;
        error: model.auth.EndpointBErrorBody;
    }
}
",
  "/model/auth/_service-types/ServiceWithBasicAuth/index.ts": "export * from \\"./EndpointBErrorBody\\";
export * from \\"./EndpointBResponse\\";
",
  "/model/auth/_service-types/ServiceWithBasicAuthWithOverride/EndpointGErrorBody.ts": "export type EndpointGErrorBody = never;

export declare namespace EndpointGErrorBody {
    export interface _Visitor<Result> {
        _unknown: () => Result;
    }
}

export const EndpointGErrorBody = {
    _visit: <Result>(_value: EndpointGErrorBody, visitor: EndpointGErrorBody._Visitor<Result>): Result => {
        return visitor._unknown();
    },

    _types: (): EndpointGErrorBody[\\"_error\\"][] => [],
} as const;
",
  "/model/auth/_service-types/ServiceWithBasicAuthWithOverride/EndpointGResponse.ts": "import * as model from \\"../../..\\";

export type EndpointGResponse = EndpointGResponse.SuccessResponse | EndpointGResponse.ErrorResponse;

export declare namespace EndpointGResponse {
    export interface SuccessResponse {
        ok: true;
    }

    export interface ErrorResponse {
        ok: false;
        error: model.auth.EndpointGErrorBody;
    }
}
",
  "/model/auth/_service-types/ServiceWithBasicAuthWithOverride/OverrideEndpointGErrorBody.ts": "export type OverrideEndpointGErrorBody = never;

export declare namespace OverrideEndpointGErrorBody {
    export interface _Visitor<Result> {
        _unknown: () => Result;
    }
}

export const OverrideEndpointGErrorBody = {
    _visit: <Result>(_value: OverrideEndpointGErrorBody, visitor: OverrideEndpointGErrorBody._Visitor<Result>): Result => {
        return visitor._unknown();
    },

    _types: (): OverrideEndpointGErrorBody[\\"_error\\"][] => [],
} as const;
",
  "/model/auth/_service-types/ServiceWithBasicAuthWithOverride/OverrideEndpointGResponse.ts": "import * as model from \\"../../..\\";

export type OverrideEndpointGResponse = OverrideEndpointGResponse.SuccessResponse | OverrideEndpointGResponse.ErrorResponse;

export declare namespace OverrideEndpointGResponse {
    export interface SuccessResponse {
        ok: true;
    }

    export interface ErrorResponse {
        ok: false;
        error: model.auth.OverrideEndpointGErrorBody;
    }
}
",
  "/model/auth/_service-types/ServiceWithBasicAuthWithOverride/index.ts": "export * from \\"./EndpointGErrorBody\\";
export * from \\"./EndpointGResponse\\";
export * from \\"./OverrideEndpointGErrorBody\\";
export * from \\"./OverrideEndpointGResponse\\";
",
  "/model/auth/_service-types/ServiceWithBearerAuth/EndpointCErrorBody.ts": "export type EndpointCErrorBody = never;

export declare namespace EndpointCErrorBody {
    export interface _Visitor<Result> {
        _unknown: () => Result;
    }
}

export const EndpointCErrorBody = {
    _visit: <Result>(_value: EndpointCErrorBody, visitor: EndpointCErrorBody._Visitor<Result>): Result => {
        return visitor._unknown();
    },

    _types: (): EndpointCErrorBody[\\"_error\\"][] => [],
} as const;
",
  "/model/auth/_service-types/ServiceWithBearerAuth/EndpointCResponse.ts": "import * as model from \\"../../..\\";

export type EndpointCResponse = EndpointCResponse.SuccessResponse | EndpointCResponse.ErrorResponse;

export declare namespace EndpointCResponse {
    export interface SuccessResponse {
        ok: true;
    }

    export interface ErrorResponse {
        ok: false;
        error: model.auth.EndpointCErrorBody;
    }
}
",
  "/model/auth/_service-types/ServiceWithBearerAuth/index.ts": "export * from \\"./EndpointCErrorBody\\";
export * from \\"./EndpointCResponse\\";
",
  "/model/auth/_service-types/ServiceWithBearerAuthWithOverride/EndpointFErrorBody.ts": "export type EndpointFErrorBody = never;

export declare namespace EndpointFErrorBody {
    export interface _Visitor<Result> {
        _unknown: () => Result;
    }
}

export const EndpointFErrorBody = {
    _visit: <Result>(_value: EndpointFErrorBody, visitor: EndpointFErrorBody._Visitor<Result>): Result => {
        return visitor._unknown();
    },

    _types: (): EndpointFErrorBody[\\"_error\\"][] => [],
} as const;
",
  "/model/auth/_service-types/ServiceWithBearerAuthWithOverride/EndpointFResponse.ts": "import * as model from \\"../../..\\";

export type EndpointFResponse = EndpointFResponse.SuccessResponse | EndpointFResponse.ErrorResponse;

export declare namespace EndpointFResponse {
    export interface SuccessResponse {
        ok: true;
    }

    export interface ErrorResponse {
        ok: false;
        error: model.auth.EndpointFErrorBody;
    }
}
",
  "/model/auth/_service-types/ServiceWithBearerAuthWithOverride/OverrideEndpointFErrorBody.ts": "export type OverrideEndpointFErrorBody = never;

export declare namespace OverrideEndpointFErrorBody {
    export interface _Visitor<Result> {
        _unknown: () => Result;
    }
}

export const OverrideEndpointFErrorBody = {
    _visit: <Result>(_value: OverrideEndpointFErrorBody, visitor: OverrideEndpointFErrorBody._Visitor<Result>): Result => {
        return visitor._unknown();
    },

    _types: (): OverrideEndpointFErrorBody[\\"_error\\"][] => [],
} as const;
",
  "/model/auth/_service-types/ServiceWithBearerAuthWithOverride/OverrideEndpointFResponse.ts": "import * as model from \\"../../..\\";

export type OverrideEndpointFResponse = OverrideEndpointFResponse.SuccessResponse | OverrideEndpointFResponse.ErrorResponse;

export declare namespace OverrideEndpointFResponse {
    export interface SuccessResponse {
        ok: true;
    }

    export interface ErrorResponse {
        ok: false;
        error: model.auth.OverrideEndpointFErrorBody;
    }
}
",
  "/model/auth/_service-types/ServiceWithBearerAuthWithOverride/index.ts": "export * from \\"./EndpointFErrorBody\\";
export * from \\"./EndpointFResponse\\";
export * from \\"./OverrideEndpointFErrorBody\\";
export * from \\"./OverrideEndpointFResponse\\";
",
  "/model/auth/_service-types/ServiceWithNoAuth/EndpointAErrorBody.ts": "export type EndpointAErrorBody = never;

export declare namespace EndpointAErrorBody {
    export interface _Visitor<Result> {
        _unknown: () => Result;
    }
}

export const EndpointAErrorBody = {
    _visit: <Result>(_value: EndpointAErrorBody, visitor: EndpointAErrorBody._Visitor<Result>): Result => {
        return visitor._unknown();
    },

    _types: (): EndpointAErrorBody[\\"_error\\"][] => [],
} as const;
",
  "/model/auth/_service-types/ServiceWithNoAuth/EndpointAResponse.ts": "import * as model from \\"../../..\\";

export type EndpointAResponse = EndpointAResponse.SuccessResponse | EndpointAResponse.ErrorResponse;

export declare namespace EndpointAResponse {
    export interface SuccessResponse {
        ok: true;
    }

    export interface ErrorResponse {
        ok: false;
        error: model.auth.EndpointAErrorBody;
    }
}
",
  "/model/auth/_service-types/ServiceWithNoAuth/index.ts": "export * from \\"./EndpointAErrorBody\\";
export * from \\"./EndpointAResponse\\";
",
  "/model/auth/_service-types/ServiceWithNoAuthWithBasicOverride/EndpointEErrorBody.ts": "export type EndpointEErrorBody = never;

export declare namespace EndpointEErrorBody {
    export interface _Visitor<Result> {
        _unknown: () => Result;
    }
}

export const EndpointEErrorBody = {
    _visit: <Result>(_value: EndpointEErrorBody, visitor: EndpointEErrorBody._Visitor<Result>): Result => {
        return visitor._unknown();
    },

    _types: (): EndpointEErrorBody[\\"_error\\"][] => [],
} as const;
",
  "/model/auth/_service-types/ServiceWithNoAuthWithBasicOverride/EndpointEResponse.ts": "import * as model from \\"../../..\\";

export type EndpointEResponse = EndpointEResponse.SuccessResponse | EndpointEResponse.ErrorResponse;

export declare namespace EndpointEResponse {
    export interface SuccessResponse {
        ok: true;
    }

    export interface ErrorResponse {
        ok: false;
        error: model.auth.EndpointEErrorBody;
    }
}
",
  "/model/auth/_service-types/ServiceWithNoAuthWithBasicOverride/OverrideEndpointEErrorBody.ts": "export type OverrideEndpointEErrorBody = never;

export declare namespace OverrideEndpointEErrorBody {
    export interface _Visitor<Result> {
        _unknown: () => Result;
    }
}

export const OverrideEndpointEErrorBody = {
    _visit: <Result>(_value: OverrideEndpointEErrorBody, visitor: OverrideEndpointEErrorBody._Visitor<Result>): Result => {
        return visitor._unknown();
    },

    _types: (): OverrideEndpointEErrorBody[\\"_error\\"][] => [],
} as const;
",
  "/model/auth/_service-types/ServiceWithNoAuthWithBasicOverride/OverrideEndpointEResponse.ts": "import * as model from \\"../../..\\";

export type OverrideEndpointEResponse = OverrideEndpointEResponse.SuccessResponse | OverrideEndpointEResponse.ErrorResponse;

export declare namespace OverrideEndpointEResponse {
    export interface SuccessResponse {
        ok: true;
    }

    export interface ErrorResponse {
        ok: false;
        error: model.auth.OverrideEndpointEErrorBody;
    }
}
",
  "/model/auth/_service-types/ServiceWithNoAuthWithBasicOverride/index.ts": "export * from \\"./EndpointEErrorBody\\";
export * from \\"./EndpointEResponse\\";
export * from \\"./OverrideEndpointEErrorBody\\";
export * from \\"./OverrideEndpointEResponse\\";
",
  "/model/auth/_service-types/ServiceWithNoAuthWithBearerOverride/EndpointDErrorBody.ts": "export type EndpointDErrorBody = never;

export declare namespace EndpointDErrorBody {
    export interface _Visitor<Result> {
        _unknown: () => Result;
    }
}

export const EndpointDErrorBody = {
    _visit: <Result>(_value: EndpointDErrorBody, visitor: EndpointDErrorBody._Visitor<Result>): Result => {
        return visitor._unknown();
    },

    _types: (): EndpointDErrorBody[\\"_error\\"][] => [],
} as const;
",
  "/model/auth/_service-types/ServiceWithNoAuthWithBearerOverride/EndpointDResponse.ts": "import * as model from \\"../../..\\";

export type EndpointDResponse = EndpointDResponse.SuccessResponse | EndpointDResponse.ErrorResponse;

export declare namespace EndpointDResponse {
    export interface SuccessResponse {
        ok: true;
    }

    export interface ErrorResponse {
        ok: false;
        error: model.auth.EndpointDErrorBody;
    }
}
",
  "/model/auth/_service-types/ServiceWithNoAuthWithBearerOverride/OverrideEndpointDErrorBody.ts": "export type OverrideEndpointDErrorBody = never;

export declare namespace OverrideEndpointDErrorBody {
    export interface _Visitor<Result> {
        _unknown: () => Result;
    }
}

export const OverrideEndpointDErrorBody = {
    _visit: <Result>(_value: OverrideEndpointDErrorBody, visitor: OverrideEndpointDErrorBody._Visitor<Result>): Result => {
        return visitor._unknown();
    },

    _types: (): OverrideEndpointDErrorBody[\\"_error\\"][] => [],
} as const;
",
  "/model/auth/_service-types/ServiceWithNoAuthWithBearerOverride/OverrideEndpointDResponse.ts": "import * as model from \\"../../..\\";

export type OverrideEndpointDResponse = OverrideEndpointDResponse.SuccessResponse | OverrideEndpointDResponse.ErrorResponse;

export declare namespace OverrideEndpointDResponse {
    export interface SuccessResponse {
        ok: true;
    }

    export interface ErrorResponse {
        ok: false;
        error: model.auth.OverrideEndpointDErrorBody;
    }
}
",
  "/model/auth/_service-types/ServiceWithNoAuthWithBearerOverride/index.ts": "export * from \\"./EndpointDErrorBody\\";
export * from \\"./EndpointDResponse\\";
export * from \\"./OverrideEndpointDErrorBody\\";
export * from \\"./OverrideEndpointDResponse\\";
",
  "/model/auth/_service-types/index.ts": "export * from \\"./ServiceWithNoAuth\\";
export * from \\"./ServiceWithBasicAuth\\";
export * from \\"./ServiceWithBearerAuth\\";
export * from \\"./ServiceWithNoAuthWithBearerOverride\\";
export * from \\"./ServiceWithNoAuthWithBasicOverride\\";
export * from \\"./ServiceWithBearerAuthWithOverride\\";
export * from \\"./ServiceWithBasicAuthWithOverride\\";
",
  "/model/auth/_types/SomeType.ts": "export type SomeType = string;
",
  "/model/auth/_types/index.ts": "export * from \\"./SomeType\\";
",
  "/model/auth/index.ts": "export * from \\"./_types\\";
export * from \\"./_service-types\\";
",
  "/model/index.ts": "export * as auth from \\"./auth\\";
",
  "/package.json": "{
    \\"name\\": \\"auth\\",
    \\"version\\": \\"0.0.0\\",
    \\"main\\": \\"./index.js\\",
    \\"types\\": \\"./index.d.ts\\",
    \\"scripts\\": {
        \\"build\\": \\"esbuild $(find . -name '*.ts' -not -path './node_modules/*') --format=cjs --sourcemap --outdir=. && tsc\\"
    },
    \\"dependencies\\": {
        \\"@fern-typescript/service-utils\\": \\"0.0.155\\",
        \\"url-join\\": \\"4.0.1\\",
        \\"@types/url-join\\": \\"4.0.1\\"
    },
    \\"devDependencies\\": {
        \\"@types/node\\": \\"17.0.33\\",
        \\"esbuild\\": \\"0.14.47\\",
        \\"typescript\\": \\"4.6.4\\"
    }
}",
  "/services/auth/ServiceWithBasicAuth.ts": "import { isResponseOk, BasicAuth, Supplier, defaultFetcher, Fetcher } from \\"@fern-typescript/service-utils\\";
import urlJoin from \\"url-join\\";
import * as model from \\"../../model\\";

export interface ServiceWithBasicAuth {
    endpointB(): Promise<model.auth.EndpointBResponse>;
}

export declare namespace ServiceWithBasicAuth {
    interface Init {
        origin: string;
        fetcher?: Fetcher;
        credentials: Supplier<BasicAuth>;
    }
}

export class ServiceWithBasicAuth implements ServiceWithBasicAuth {
    private baseUrl: string;
    private fetcher: Fetcher;
    private credentials: Supplier<BasicAuth>;

    constructor(args: ServiceWithBasicAuth.Init) {
        this.fetcher = args.fetcher ?? defaultFetcher;
        this.baseUrl = urlJoin(args.origin, \\"service-with-basic-auth\\");
        this.credentials = args.credentials;
    }

    public async endpointB(): Promise<model.auth.EndpointBResponse> {
        const credentials = await Supplier.get(this.credentials);
        const encodedResponse = await this.fetcher({
            url: urlJoin(this.baseUrl, \\"endpoint-b\\"),
            method: \\"POST\\",
            headers: {},
            authHeader: BasicAuth.toAuthorizationHeader(credentials)
        });

        if (isResponseOk(encodedResponse)) {
            return {
                ok: true
            };
        }
        else {
            const error = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: false,
                error: error as model.auth.EndpointBErrorBody
            };
        }
    }
}
",
  "/services/auth/ServiceWithBasicAuthWithOverride.ts": "import { isResponseOk, BasicAuth, Supplier, defaultFetcher, Fetcher } from \\"@fern-typescript/service-utils\\";
import urlJoin from \\"url-join\\";
import * as model from \\"../../model\\";

export interface ServiceWithBasicAuthWithOverride {
    endpointG(): Promise<model.auth.EndpointGResponse>;
    overrideEndpointG(): Promise<model.auth.OverrideEndpointGResponse>;
}

export declare namespace ServiceWithBasicAuthWithOverride {
    interface Init {
        origin: string;
        fetcher?: Fetcher;
        credentials?: Supplier<BasicAuth | undefined>;
    }
}

export class ServiceWithBasicAuthWithOverride implements ServiceWithBasicAuthWithOverride {
    private baseUrl: string;
    private fetcher: Fetcher;
    private credentials: Supplier<BasicAuth | undefined>;

    constructor(args: ServiceWithBasicAuthWithOverride.Init) {
        this.fetcher = args.fetcher ?? defaultFetcher;
        this.baseUrl = urlJoin(args.origin, \\"service-with-basic-auth-with-override\\");
        this.credentials = args.credentials;
    }

    public async endpointG(): Promise<model.auth.EndpointGResponse> {
        const credentials = await Supplier.get(this.credentials);
        if (credentials == null) {
            throw new Error(\\"credentials is not defined.\\");
        }

        const encodedResponse = await this.fetcher({
            url: urlJoin(this.baseUrl, \\"endpoint-g\\"),
            method: \\"POST\\",
            headers: {},
            authHeader: BasicAuth.toAuthorizationHeader(credentials)
        });

        if (isResponseOk(encodedResponse)) {
            return {
                ok: true
            };
        }
        else {
            const error = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: false,
                error: error as model.auth.EndpointGErrorBody
            };
        }
    }

    public async overrideEndpointG(): Promise<model.auth.OverrideEndpointGResponse> {
        const encodedResponse = await this.fetcher({
            url: urlJoin(this.baseUrl, \\"override-endpoint-g\\"),
            method: \\"POST\\",
            headers: {}
        });

        if (isResponseOk(encodedResponse)) {
            return {
                ok: true
            };
        }
        else {
            const error = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: false,
                error: error as model.auth.OverrideEndpointGErrorBody
            };
        }
    }
}
",
  "/services/auth/ServiceWithBearerAuth.ts": "import { isResponseOk, BearerToken, Supplier, defaultFetcher, Fetcher } from \\"@fern-typescript/service-utils\\";
import urlJoin from \\"url-join\\";
import * as model from \\"../../model\\";

export interface ServiceWithBearerAuth {
    endpointC(): Promise<model.auth.EndpointCResponse>;
}

export declare namespace ServiceWithBearerAuth {
    interface Init {
        origin: string;
        fetcher?: Fetcher;
        token: Supplier<BearerToken>;
    }
}

export class ServiceWithBearerAuth implements ServiceWithBearerAuth {
    private baseUrl: string;
    private fetcher: Fetcher;
    private token: Supplier<BearerToken>;

    constructor(args: ServiceWithBearerAuth.Init) {
        this.fetcher = args.fetcher ?? defaultFetcher;
        this.baseUrl = urlJoin(args.origin, \\"service-with-bearer-auth\\");
        this.token = args.token;
    }

    public async endpointC(): Promise<model.auth.EndpointCResponse> {
        const token = await Supplier.get(this.token);
        const encodedResponse = await this.fetcher({
            url: urlJoin(this.baseUrl, \\"endpoint-c\\"),
            method: \\"POST\\",
            headers: {},
            authHeader: BearerToken.toAuthorizationHeader(token)
        });

        if (isResponseOk(encodedResponse)) {
            return {
                ok: true
            };
        }
        else {
            const error = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: false,
                error: error as model.auth.EndpointCErrorBody
            };
        }
    }
}
",
  "/services/auth/ServiceWithBearerAuthWithOverride.ts": "import { isResponseOk, BearerToken, Supplier, defaultFetcher, Fetcher } from \\"@fern-typescript/service-utils\\";
import urlJoin from \\"url-join\\";
import * as model from \\"../../model\\";

export interface ServiceWithBearerAuthWithOverride {
    endpointF(): Promise<model.auth.EndpointFResponse>;
    overrideEndpointF(): Promise<model.auth.OverrideEndpointFResponse>;
}

export declare namespace ServiceWithBearerAuthWithOverride {
    interface Init {
        origin: string;
        fetcher?: Fetcher;
        token?: Supplier<BearerToken | undefined>;
    }
}

export class ServiceWithBearerAuthWithOverride implements ServiceWithBearerAuthWithOverride {
    private baseUrl: string;
    private fetcher: Fetcher;
    private token: Supplier<BearerToken | undefined>;

    constructor(args: ServiceWithBearerAuthWithOverride.Init) {
        this.fetcher = args.fetcher ?? defaultFetcher;
        this.baseUrl = urlJoin(args.origin, \\"service-with-bearer-auth-with-override\\");
        this.token = args.token;
    }

    public async endpointF(): Promise<model.auth.EndpointFResponse> {
        const token = await Supplier.get(this.token);
        if (token == null) {
            throw new Error(\\"token is not defined.\\");
        }

        const encodedResponse = await this.fetcher({
            url: urlJoin(this.baseUrl, \\"endpoint-f\\"),
            method: \\"POST\\",
            headers: {},
            authHeader: BearerToken.toAuthorizationHeader(token)
        });

        if (isResponseOk(encodedResponse)) {
            return {
                ok: true
            };
        }
        else {
            const error = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: false,
                error: error as model.auth.EndpointFErrorBody
            };
        }
    }

    public async overrideEndpointF(): Promise<model.auth.OverrideEndpointFResponse> {
        const encodedResponse = await this.fetcher({
            url: urlJoin(this.baseUrl, \\"override-endpoint-f\\"),
            method: \\"POST\\",
            headers: {}
        });

        if (isResponseOk(encodedResponse)) {
            return {
                ok: true
            };
        }
        else {
            const error = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: false,
                error: error as model.auth.OverrideEndpointFErrorBody
            };
        }
    }
}
",
  "/services/auth/ServiceWithNoAuth.ts": "import { isResponseOk, defaultFetcher, Fetcher } from \\"@fern-typescript/service-utils\\";
import urlJoin from \\"url-join\\";
import * as model from \\"../../model\\";

export interface ServiceWithNoAuth {
    endpointA(): Promise<model.auth.EndpointAResponse>;
}

export declare namespace ServiceWithNoAuth {
    interface Init {
        origin: string;
        fetcher?: Fetcher;
    }
}

export class ServiceWithNoAuth implements ServiceWithNoAuth {
    private baseUrl: string;
    private fetcher: Fetcher;

    constructor(args: ServiceWithNoAuth.Init) {
        this.fetcher = args.fetcher ?? defaultFetcher;
        this.baseUrl = urlJoin(args.origin, \\"service-with-no-auth\\");
    }

    public async endpointA(): Promise<model.auth.EndpointAResponse> {
        const encodedResponse = await this.fetcher({
            url: urlJoin(this.baseUrl, \\"endpoint-a\\"),
            method: \\"POST\\",
            headers: {}
        });

        if (isResponseOk(encodedResponse)) {
            return {
                ok: true
            };
        }
        else {
            const error = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: false,
                error: error as model.auth.EndpointAErrorBody
            };
        }
    }
}
",
  "/services/auth/ServiceWithNoAuthWithBasicOverride.ts": "import { isResponseOk, BasicAuth, Supplier, defaultFetcher, Fetcher } from \\"@fern-typescript/service-utils\\";
import urlJoin from \\"url-join\\";
import * as model from \\"../../model\\";

export interface ServiceWithNoAuthWithBasicOverride {
    endpointE(): Promise<model.auth.EndpointEResponse>;
    overrideEndpointE(): Promise<model.auth.OverrideEndpointEResponse>;
}

export declare namespace ServiceWithNoAuthWithBasicOverride {
    interface Init {
        origin: string;
        fetcher?: Fetcher;
        credentials?: Supplier<BasicAuth | undefined>;
    }
}

export class ServiceWithNoAuthWithBasicOverride implements ServiceWithNoAuthWithBasicOverride {
    private baseUrl: string;
    private fetcher: Fetcher;
    private credentials: Supplier<BasicAuth | undefined>;

    constructor(args: ServiceWithNoAuthWithBasicOverride.Init) {
        this.fetcher = args.fetcher ?? defaultFetcher;
        this.baseUrl = urlJoin(args.origin, \\"service-with-no-auth-with-basic-override\\");
        this.credentials = args.credentials;
    }

    public async endpointE(): Promise<model.auth.EndpointEResponse> {
        const encodedResponse = await this.fetcher({
            url: urlJoin(this.baseUrl, \\"endpoint-e\\"),
            method: \\"POST\\",
            headers: {}
        });

        if (isResponseOk(encodedResponse)) {
            return {
                ok: true
            };
        }
        else {
            const error = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: false,
                error: error as model.auth.EndpointEErrorBody
            };
        }
    }

    public async overrideEndpointE(): Promise<model.auth.OverrideEndpointEResponse> {
        const credentials = await Supplier.get(this.credentials);
        if (credentials == null) {
            throw new Error(\\"credentials is not defined.\\");
        }

        const encodedResponse = await this.fetcher({
            url: urlJoin(this.baseUrl, \\"override-endpoint-e\\"),
            method: \\"POST\\",
            headers: {},
            authHeader: BasicAuth.toAuthorizationHeader(credentials)
        });

        if (isResponseOk(encodedResponse)) {
            return {
                ok: true
            };
        }
        else {
            const error = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: false,
                error: error as model.auth.OverrideEndpointEErrorBody
            };
        }
    }
}
",
  "/services/auth/ServiceWithNoAuthWithBearerOverride.ts": "import { isResponseOk, BearerToken, Supplier, defaultFetcher, Fetcher } from \\"@fern-typescript/service-utils\\";
import urlJoin from \\"url-join\\";
import * as model from \\"../../model\\";

export interface ServiceWithNoAuthWithBearerOverride {
    endpointD(): Promise<model.auth.EndpointDResponse>;
    overrideEndpointD(): Promise<model.auth.OverrideEndpointDResponse>;
}

export declare namespace ServiceWithNoAuthWithBearerOverride {
    interface Init {
        origin: string;
        fetcher?: Fetcher;
        token?: Supplier<BearerToken | undefined>;
    }
}

export class ServiceWithNoAuthWithBearerOverride implements ServiceWithNoAuthWithBearerOverride {
    private baseUrl: string;
    private fetcher: Fetcher;
    private token: Supplier<BearerToken | undefined>;

    constructor(args: ServiceWithNoAuthWithBearerOverride.Init) {
        this.fetcher = args.fetcher ?? defaultFetcher;
        this.baseUrl = urlJoin(args.origin, \\"service-with-no-auth-with-bearer-override\\");
        this.token = args.token;
    }

    public async endpointD(): Promise<model.auth.EndpointDResponse> {
        const encodedResponse = await this.fetcher({
            url: urlJoin(this.baseUrl, \\"endpoint-d\\"),
            method: \\"POST\\",
            headers: {}
        });

        if (isResponseOk(encodedResponse)) {
            return {
                ok: true
            };
        }
        else {
            const error = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: false,
                error: error as model.auth.EndpointDErrorBody
            };
        }
    }

    public async overrideEndpointD(): Promise<model.auth.OverrideEndpointDResponse> {
        const token = await Supplier.get(this.token);
        if (token == null) {
            throw new Error(\\"token is not defined.\\");
        }

        const encodedResponse = await this.fetcher({
            url: urlJoin(this.baseUrl, \\"override-endpoint-d\\"),
            method: \\"POST\\",
            headers: {},
            authHeader: BearerToken.toAuthorizationHeader(token)
        });

        if (isResponseOk(encodedResponse)) {
            return {
                ok: true
            };
        }
        else {
            const error = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: false,
                error: error as model.auth.OverrideEndpointDErrorBody
            };
        }
    }
}
",
  "/services/auth/index.ts": "export * from \\"./ServiceWithNoAuth\\";
export * from \\"./ServiceWithBasicAuth\\";
export * from \\"./ServiceWithBearerAuth\\";
export * from \\"./ServiceWithNoAuthWithBearerOverride\\";
export * from \\"./ServiceWithNoAuthWithBasicOverride\\";
export * from \\"./ServiceWithBearerAuthWithOverride\\";
export * from \\"./ServiceWithBasicAuthWithOverride\\";
",
  "/services/index.ts": "export * as auth from \\"./auth\\";
",
  "/tsconfig.json": "{
    \\"compilerOptions\\": {
        \\"strict\\": true,
        \\"skipLibCheck\\": true,
        \\"declaration\\": true,
        \\"sourceMap\\": true,
        \\"emitDeclarationOnly\\": true,
        \\"esModuleInterop\\": true,
        \\"noUncheckedIndexedAccess\\": true,
        \\"noUnusedLocals\\": true,
        \\"noUnusedParameters\\": true
    }
}",
}
`;

exports[`generateClientProject chat 1`] = `
Object {
  "/.npmignore": "tsconfig.json
.pnp.*
.yarn
yarn.lock
*.ts
!*.d.ts",
  "/index.ts": "export * as model from \\"./model\\";
export * as services from \\"./services\\";
",
  "/model/chat/_errors/GenericMessage.ts": "export type GenericMessage = string;
",
  "/model/chat/_errors/index.ts": "export * from \\"./GenericMessage\\";
",
  "/model/chat/_service-types/ChatService/SendChatErrorBody.ts": "import { chat } from \\"../../..\\";
import * as uuid from \\"uuid\\";

export type SendChatErrorBody =
    | SendChatErrorBody.GenericMessage;

export declare namespace SendChatErrorBody {
    interface GenericMessage {
        _error: \\"GenericMessage\\";
        _errorInstanceId: string;
        GenericMessage: chat.GenericMessage;
    }

    export interface _Visitor<Result> {
        GenericMessage: (value: chat.GenericMessage) => Result;
        _unknown: () => Result;
    }
}

export const SendChatErrorBody = {
    GenericMessage: (value: chat.GenericMessage): SendChatErrorBody.GenericMessage => ({
        GenericMessage: value,
        _error: \\"GenericMessage\\",
        _errorInstanceId: uuid.v4()
    }),

    _visit: <Result>(value: SendChatErrorBody, visitor: SendChatErrorBody._Visitor<Result>): Result => {
        switch (value._error) {
            case \\"GenericMessage\\": return visitor.GenericMessage(value.GenericMessage);
            default: return visitor._unknown();
        }
    },

    _types: (): SendChatErrorBody[\\"_error\\"][] => [\\"GenericMessage\\"],
} as const;
",
  "/model/chat/_service-types/ChatService/SendChatResponse.ts": "import * as model from \\"../../..\\";

export type SendChatResponse = SendChatResponse.SuccessResponse | SendChatResponse.ErrorResponse;

export declare namespace SendChatResponse {
    export interface SuccessResponse {
        ok: true;
        id: string;
        replyTo: string;
        body: model.chat.ChatMessage;
    }

    export interface ErrorResponse {
        ok: false;
        id: string;
        replyTo: string;
        error: model.chat.SendChatErrorBody;
    }
}
",
  "/model/chat/_service-types/ChatService/_SendChatRequest.ts": "import * as model from \\"../../..\\";

export interface _SendChatRequest {
    id: string;
    operation: \\"sendChat\\";
    body: model.chat.SendChatRequest;
}
",
  "/model/chat/_service-types/ChatService/index.ts": "export * from \\"./_SendChatRequest\\";
export * from \\"./SendChatErrorBody\\";
export * from \\"./SendChatResponse\\";
",
  "/model/chat/_service-types/index.ts": "export * from \\"./ChatService\\";
",
  "/model/chat/_types/ChatMessage.ts": "import * as model from \\"../..\\";

export interface ChatMessage {
    id: model.chat.ChatMessageId;
    title: string;
    content: string;
}
",
  "/model/chat/_types/ChatMessageId.ts": "export type ChatMessageId = string;
",
  "/model/chat/_types/SendChatRequest.ts": "export interface SendChatRequest {
    title: string;
    content: string;
}
",
  "/model/chat/_types/index.ts": "export * from \\"./ChatMessageId\\";
export * from \\"./ChatMessage\\";
export * from \\"./SendChatRequest\\";
",
  "/model/chat/index.ts": "export * from \\"./_types\\";
export * from \\"./_errors\\";
export * from \\"./_service-types\\";
",
  "/model/index.ts": "export * as chat from \\"./chat\\";
",
  "/package.json": "{
    \\"name\\": \\"chat\\",
    \\"version\\": \\"0.0.0\\",
    \\"main\\": \\"./index.js\\",
    \\"types\\": \\"./index.d.ts\\",
    \\"scripts\\": {
        \\"build\\": \\"esbuild $(find . -name '*.ts' -not -path './node_modules/*') --format=cjs --sourcemap --outdir=. && tsc\\"
    },
    \\"dependencies\\": {
        \\"uuid\\": \\"8.3.2\\",
        \\"@types/uuid\\": \\"8.3.4\\",
        \\"url-join\\": \\"4.0.1\\",
        \\"@types/url-join\\": \\"4.0.1\\"
    },
    \\"devDependencies\\": {
        \\"@types/node\\": \\"17.0.33\\",
        \\"esbuild\\": \\"0.14.47\\",
        \\"typescript\\": \\"4.6.4\\"
    }
}",
  "/services/chat/ChatService.ts": "import urlJoin from \\"url-join\\";
import * as model from \\"../../model\\";
import * as uuid from \\"uuid\\";

export declare namespace ChatService {
    interface Args {
        origin: string;
    }

    type ServerMessage = model.chat.SendChatResponse;
}

export interface ChatService {
    sendChat(request: model.chat.SendChatRequest): Promise<model.chat.SendChatResponse>;
}

export class ChatService implements ChatService {
    private socket: Promise<WebSocket>;
    private callbacks: Record<string, (response: any) => void> = {};

    constructor(args: ChatService.Args) {
        this.socket = new Promise(resolve => {
            const socket = new WebSocket(urlJoin(args.origin, \\"/chat\\"));
            socket.onopen = () => {
                resolve(socket);
            };
            socket.onmessage = this._onMessage;
        });
    }

    public async sendChat(request: model.chat.SendChatRequest): Promise<model.chat.SendChatResponse> {
        const socket = await this.socket;

        return new Promise(resolve => {
            const message: model.chat._SendChatRequest = {
                id: uuid.v4(),
                operation: \\"sendChat\\",
                body: request
            };
            this.callbacks[message.id] = resolve;
            socket.send(JSON.stringify(message));
        });
    }

    public async _disconnect(): Promise<void> {
        const socket = await this.socket;
        return new Promise(resolve => {
            socket.onclose = () => {
                resolve();
            };
            socket.close();
        });
    }

    private _onMessage(event: MessageEvent): void {
        const message = JSON.parse(event.data) as ChatService.ServerMessage;
        if (\\"operation\\" in message) {
            console.log(\\"Received server message\\");
        }
        else {
            const callback = this.callbacks[message.replyTo];
            if (callback != null) {
                callback(message);
            }
            else {
                console.error(\\"Received reply to unknown request\\");
            }
        }
    }
}
",
  "/services/chat/index.ts": "export * from \\"./ChatService\\";
",
  "/services/index.ts": "export * as chat from \\"./chat\\";
",
  "/tsconfig.json": "{
    \\"compilerOptions\\": {
        \\"strict\\": true,
        \\"skipLibCheck\\": true,
        \\"declaration\\": true,
        \\"sourceMap\\": true,
        \\"emitDeclarationOnly\\": true,
        \\"esModuleInterop\\": true,
        \\"noUncheckedIndexedAccess\\": true,
        \\"noUnusedLocals\\": true,
        \\"noUnusedParameters\\": true
    }
}",
}
`;

exports[`generateClientProject no-errors 1`] = `
Object {
  "/.npmignore": "tsconfig.json
.pnp.*
.yarn
yarn.lock
*.ts
!*.d.ts",
  "/index.ts": "export * as model from \\"./model\\";
export * as services from \\"./services\\";
",
  "/model/api/_service-types/NoErrorsService/GetErrorBody.ts": "export type GetErrorBody = never;

export declare namespace GetErrorBody {
    export interface _Visitor<Result> {
        _unknown: () => Result;
    }
}

export const GetErrorBody = {
    _visit: <Result>(_value: GetErrorBody, visitor: GetErrorBody._Visitor<Result>): Result => {
        return visitor._unknown();
    },

    _types: (): GetErrorBody[\\"_error\\"][] => [],
} as const;
",
  "/model/api/_service-types/NoErrorsService/GetResponse.ts": "import * as model from \\"../../..\\";

export type GetResponse = GetResponse.SuccessResponse | GetResponse.ErrorResponse;

export declare namespace GetResponse {
    export interface SuccessResponse {
        ok: true;
    }

    export interface ErrorResponse {
        ok: false;
        error: model.api.GetErrorBody;
    }
}
",
  "/model/api/_service-types/NoErrorsService/index.ts": "export * from \\"./GetErrorBody\\";
export * from \\"./GetResponse\\";
",
  "/model/api/_service-types/index.ts": "export * from \\"./NoErrorsService\\";
",
  "/model/api/index.ts": "export * from \\"./_service-types\\";
",
  "/model/index.ts": "export * as api from \\"./api\\";
",
  "/package.json": "{
    \\"name\\": \\"no-errors\\",
    \\"version\\": \\"0.0.0\\",
    \\"main\\": \\"./index.js\\",
    \\"types\\": \\"./index.d.ts\\",
    \\"scripts\\": {
        \\"build\\": \\"esbuild $(find . -name '*.ts' -not -path './node_modules/*') --format=cjs --sourcemap --outdir=. && tsc\\"
    },
    \\"dependencies\\": {
        \\"@fern-typescript/service-utils\\": \\"0.0.155\\",
        \\"url-join\\": \\"4.0.1\\",
        \\"@types/url-join\\": \\"4.0.1\\"
    },
    \\"devDependencies\\": {
        \\"@types/node\\": \\"17.0.33\\",
        \\"esbuild\\": \\"0.14.47\\",
        \\"typescript\\": \\"4.6.4\\"
    }
}",
  "/services/api/NoErrorsService.ts": "import { isResponseOk, defaultFetcher, Fetcher } from \\"@fern-typescript/service-utils\\";
import urlJoin from \\"url-join\\";
import * as model from \\"../../model\\";

export interface NoErrorsService {
    get(): Promise<model.api.GetResponse>;
}

export declare namespace NoErrorsService {
    interface Init {
        origin: string;
        fetcher?: Fetcher;
    }
}

export class NoErrorsService implements NoErrorsService {
    private baseUrl: string;
    private fetcher: Fetcher;

    constructor(args: NoErrorsService.Init) {
        this.fetcher = args.fetcher ?? defaultFetcher;
        this.baseUrl = urlJoin(args.origin, \\"no-errors-service\\");
    }

    public async get(): Promise<model.api.GetResponse> {
        const encodedResponse = await this.fetcher({
            url: urlJoin(this.baseUrl, \\"/\\"),
            method: \\"GET\\",
            headers: {}
        });

        if (isResponseOk(encodedResponse)) {
            return {
                ok: true
            };
        }
        else {
            const error = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: false,
                error: error as model.api.GetErrorBody
            };
        }
    }
}
",
  "/services/api/index.ts": "export * from \\"./NoErrorsService\\";
",
  "/services/index.ts": "export * as api from \\"./api\\";
",
  "/tsconfig.json": "{
    \\"compilerOptions\\": {
        \\"strict\\": true,
        \\"skipLibCheck\\": true,
        \\"declaration\\": true,
        \\"sourceMap\\": true,
        \\"emitDeclarationOnly\\": true,
        \\"esModuleInterop\\": true,
        \\"noUncheckedIndexedAccess\\": true,
        \\"noUnusedLocals\\": true,
        \\"noUnusedParameters\\": true
    }
}",
}
`;

exports[`generateClientProject posts 1`] = `
Object {
  "/.npmignore": "tsconfig.json
.pnp.*
.yarn
yarn.lock
*.ts
!*.d.ts",
  "/index.ts": "export * as model from \\"./model\\";
export * as services from \\"./services\\";
",
  "/model/commons/_types/PostId.ts": "/**
 * An ID of a blog post
 */
export type PostId = string;
",
  "/model/commons/_types/index.ts": "export * from \\"./PostId\\";
",
  "/model/commons/index.ts": "export * from \\"./_types\\";
",
  "/model/index.ts": "export * as commons from \\"./commons\\";
export * as posts from \\"./posts\\";
",
  "/model/posts/_errors/PostNotFoundError.ts": "import * as model from \\"../..\\";

export interface PostNotFoundError {
    id: model.commons.PostId;
}
",
  "/model/posts/_errors/index.ts": "export * from \\"./PostNotFoundError\\";
",
  "/model/posts/_service-types/PostsService/CreatePostErrorBody.ts": "export type CreatePostErrorBody = never;

export declare namespace CreatePostErrorBody {
    export interface _Visitor<Result> {
        _unknown: () => Result;
    }
}

export const CreatePostErrorBody = {
    _visit: <Result>(_value: CreatePostErrorBody, visitor: CreatePostErrorBody._Visitor<Result>): Result => {
        return visitor._unknown();
    },

    _types: (): CreatePostErrorBody[\\"_error\\"][] => [],
} as const;
",
  "/model/posts/_service-types/PostsService/CreatePostResponse.ts": "import * as model from \\"../../..\\";

export type CreatePostResponse = CreatePostResponse.SuccessResponse | CreatePostResponse.ErrorResponse;

export declare namespace CreatePostResponse {
    export interface SuccessResponse {
        ok: true;
        body: model.commons.PostId;
    }

    export interface ErrorResponse {
        ok: false;
        error: model.posts.CreatePostErrorBody;
    }
}
",
  "/model/posts/_service-types/PostsService/GetAllPostsErrorBody.ts": "export type GetAllPostsErrorBody = never;

export declare namespace GetAllPostsErrorBody {
    export interface _Visitor<Result> {
        _unknown: () => Result;
    }
}

export const GetAllPostsErrorBody = {
    _visit: <Result>(_value: GetAllPostsErrorBody, visitor: GetAllPostsErrorBody._Visitor<Result>): Result => {
        return visitor._unknown();
    },

    _types: (): GetAllPostsErrorBody[\\"_error\\"][] => [],
} as const;
",
  "/model/posts/_service-types/PostsService/GetAllPostsResponse.ts": "import * as model from \\"../../..\\";

export type GetAllPostsResponse = GetAllPostsResponse.SuccessResponse | GetAllPostsResponse.ErrorResponse;

export declare namespace GetAllPostsResponse {
    export interface SuccessResponse {
        ok: true;
        body: model.posts.Post[];
    }

    export interface ErrorResponse {
        ok: false;
        error: model.posts.GetAllPostsErrorBody;
    }
}
",
  "/model/posts/_service-types/PostsService/GetPostErrorBody.ts": "import { posts } from \\"../../..\\";
import * as uuid from \\"uuid\\";

export type GetPostErrorBody =
    | GetPostErrorBody.PostNotFoundError;

export declare namespace GetPostErrorBody {
    interface PostNotFoundError extends posts.PostNotFoundError {
        _error: \\"PostNotFoundError\\";
        _errorInstanceId: string;
    }

    export interface _Visitor<Result> {
        PostNotFoundError: (value: posts.PostNotFoundError) => Result;
        _unknown: () => Result;
    }
}

export const GetPostErrorBody = {
    PostNotFoundError: (value: posts.PostNotFoundError): GetPostErrorBody.PostNotFoundError => ({
        ...value,
        _error: \\"PostNotFoundError\\",
        _errorInstanceId: uuid.v4()
    }),

    _visit: <Result>(value: GetPostErrorBody, visitor: GetPostErrorBody._Visitor<Result>): Result => {
        switch (value._error) {
            case \\"PostNotFoundError\\": return visitor.PostNotFoundError(value);
            default: return visitor._unknown();
        }
    },

    _types: (): GetPostErrorBody[\\"_error\\"][] => [\\"PostNotFoundError\\"],
} as const;
",
  "/model/posts/_service-types/PostsService/GetPostRequest.ts": "import * as model from \\"../../..\\";

export interface GetPostRequest {
    postId: model.commons.PostId;
    page: number | null | undefined;
    otherParam: number;
}
",
  "/model/posts/_service-types/PostsService/GetPostResponse.ts": "import * as model from \\"../../..\\";

export type GetPostResponse = GetPostResponse.SuccessResponse | GetPostResponse.ErrorResponse;

export declare namespace GetPostResponse {
    export interface SuccessResponse {
        ok: true;
        body: model.posts.Post;
    }

    export interface ErrorResponse {
        ok: false;
        error: model.posts.GetPostErrorBody;
    }
}
",
  "/model/posts/_service-types/PostsService/GetPostV2ErrorBody.ts": "import { posts } from \\"../../..\\";
import * as uuid from \\"uuid\\";

export type GetPostV2ErrorBody =
    | GetPostV2ErrorBody.PostNotFoundError;

export declare namespace GetPostV2ErrorBody {
    interface PostNotFoundError extends posts.PostNotFoundError {
        _error: \\"PostNotFoundError\\";
        _errorInstanceId: string;
    }

    export interface _Visitor<Result> {
        PostNotFoundError: (value: posts.PostNotFoundError) => Result;
        _unknown: () => Result;
    }
}

export const GetPostV2ErrorBody = {
    PostNotFoundError: (value: posts.PostNotFoundError): GetPostV2ErrorBody.PostNotFoundError => ({
        ...value,
        _error: \\"PostNotFoundError\\",
        _errorInstanceId: uuid.v4()
    }),

    _visit: <Result>(value: GetPostV2ErrorBody, visitor: GetPostV2ErrorBody._Visitor<Result>): Result => {
        switch (value._error) {
            case \\"PostNotFoundError\\": return visitor.PostNotFoundError(value);
            default: return visitor._unknown();
        }
    },

    _types: (): GetPostV2ErrorBody[\\"_error\\"][] => [\\"PostNotFoundError\\"],
} as const;
",
  "/model/posts/_service-types/PostsService/GetPostV2Response.ts": "import * as model from \\"../../..\\";

export type GetPostV2Response = GetPostV2Response.SuccessResponse | GetPostV2Response.ErrorResponse;

export declare namespace GetPostV2Response {
    export interface SuccessResponse {
        ok: true;
        body: model.posts.Post;
    }

    export interface ErrorResponse {
        ok: false;
        error: model.posts.GetPostV2ErrorBody;
    }
}
",
  "/model/posts/_service-types/PostsService/_CreatePostRequest.ts": "import * as model from \\"../../..\\";

export interface _CreatePostRequest {
    \\"X-Endpoint-Header\\": string;
    body: model.posts.CreatePostRequest;
}
",
  "/model/posts/_service-types/PostsService/index.ts": "export * from \\"./_CreatePostRequest\\";
export * from \\"./CreatePostErrorBody\\";
export * from \\"./CreatePostResponse\\";
export * from \\"./GetPostRequest\\";
export * from \\"./GetPostErrorBody\\";
export * from \\"./GetPostResponse\\";
export * from \\"./GetPostV2ErrorBody\\";
export * from \\"./GetPostV2Response\\";
export * from \\"./GetAllPostsErrorBody\\";
export * from \\"./GetAllPostsResponse\\";
",
  "/model/posts/_service-types/index.ts": "export * from \\"./PostsService\\";
",
  "/model/posts/_types/Author.ts": "export type Author =
    | Author.Anonymous
    | Author.Named;

export declare namespace Author {
    interface Anonymous {
        _type: \\"anonymous\\";
    }

    interface Named {
        _type: \\"named\\";
        named: string;
    }

    export interface _Visitor<Result> {
        anonymous: () => Result;
        named: (value: string) => Result;
        _unknown: () => Result;
    }
}

export const Author = {
    anonymous: (): Author.Anonymous => ({
        _type: \\"anonymous\\"
    }),

    named: (value: string): Author.Named => ({
        named: value,
        _type: \\"named\\"
    }),

    _visit: <Result>(value: Author, visitor: Author._Visitor<Result>): Result => {
        switch (value._type) {
            case \\"anonymous\\": return visitor.anonymous();
            case \\"named\\": return visitor.named(value.named);
            default: return visitor._unknown();
        }
    },

    _types: (): Author[\\"_type\\"][] => [\\"anonymous\\", \\"named\\"],
} as const;
",
  "/model/posts/_types/CreatePostRequest.ts": "import * as model from \\"../..\\";

export interface CreatePostRequest {
    type: model.posts.PostType;
    title: string;
    author: model.posts.Author;
    content: string;
}
",
  "/model/posts/_types/Post.ts": "import * as model from \\"../..\\";

/**
 * A blog post
 */
export interface Post {
    id: model.commons.PostId;
    type: model.posts.PostType;
    title: string;
    author: model.posts.Author;
    content: string;
    relatedPosts: model.posts.Post[];
}
",
  "/model/posts/_types/PostType.ts": "export type PostType =
    | \\"LONG\\"
    | \\"SHORT\\";

export const PostType = {
    Long: \\"LONG\\",
    Short: \\"SHORT\\",

    _visit: <Result>(value: PostType, visitor: PostType._Visitor<Result>): Result => {
        switch (value) {
            case PostType.Long: return visitor.long();
            case PostType.Short: return visitor.short();
            default: return visitor._unknown();
        }
    },

    _values: (): PostType[] => [PostType.Long, PostType.Short],
} as const;

export declare namespace PostType {
    type Long = \\"LONG\\";
    type Short = \\"SHORT\\";

    export interface _Visitor<Result> {
        long: () => Result;
        short: () => Result;
        _unknown: () => Result;
    }
}
",
  "/model/posts/_types/index.ts": "export * from \\"./Post\\";
export * from \\"./PostType\\";
export * from \\"./Author\\";
export * from \\"./CreatePostRequest\\";
",
  "/model/posts/index.ts": "export * from \\"./_types\\";
export * from \\"./_errors\\";
export * from \\"./_service-types\\";
",
  "/package.json": "{
    \\"name\\": \\"posts\\",
    \\"version\\": \\"0.0.0\\",
    \\"main\\": \\"./index.js\\",
    \\"types\\": \\"./index.d.ts\\",
    \\"scripts\\": {
        \\"build\\": \\"esbuild $(find . -name '*.ts' -not -path './node_modules/*') --format=cjs --sourcemap --outdir=. && tsc\\"
    },
    \\"dependencies\\": {
        \\"uuid\\": \\"8.3.2\\",
        \\"@types/uuid\\": \\"8.3.4\\",
        \\"@fern-typescript/service-utils\\": \\"0.0.155\\",
        \\"url-join\\": \\"4.0.1\\",
        \\"@types/url-join\\": \\"4.0.1\\"
    },
    \\"devDependencies\\": {
        \\"@types/node\\": \\"17.0.33\\",
        \\"esbuild\\": \\"0.14.47\\",
        \\"typescript\\": \\"4.6.4\\"
    }
}",
  "/services/index.ts": "export * as posts from \\"./posts\\";
",
  "/services/posts/PostsService.ts": "import { isResponseOk, Supplier, BearerToken, defaultFetcher, Fetcher } from \\"@fern-typescript/service-utils\\";
import urlJoin from \\"url-join\\";
import * as model from \\"../../model\\";

export interface PostsService {
    createPost(request: model.posts._CreatePostRequest): Promise<model.posts.CreatePostResponse>;
    getPost(request: model.posts.GetPostRequest): Promise<model.posts.GetPostResponse>;
    getPostV2(request: model.commons.PostId): Promise<model.posts.GetPostV2Response>;
    getAllPosts(): Promise<model.posts.GetAllPostsResponse>;
}

export declare namespace PostsService {
    interface Init {
        origin: string;
        fetcher?: Fetcher;
        token: Supplier<BearerToken>;
        headers: Headers;
    }

    interface Headers {
        \\"X-Service-Header\\": Supplier<string>;
    }
}

export class PostsService implements PostsService {
    private baseUrl: string;
    private fetcher: Fetcher;
    private token: Supplier<BearerToken>;
    private headers: PostsService.Headers;

    constructor(args: PostsService.Init) {
        this.fetcher = args.fetcher ?? defaultFetcher;
        this.baseUrl = urlJoin(args.origin, \\"/posts\\");
        this.token = args.token;
        this.headers = args.headers;
    }

    public async createPost(request: model.posts._CreatePostRequest): Promise<model.posts.CreatePostResponse> {
        const token = await Supplier.get(this.token);
        const encodedResponse = await this.fetcher({
            url: urlJoin(this.baseUrl, \\"/\\"),
            method: \\"POST\\",
            headers: {
                \\"X-Service-Header\\": await Supplier.get(this.headers[\\"X-Service-Header\\"]),
                \\"X-Endpoint-Header\\": request[\\"X-Endpoint-Header\\"]
            },
            body: {
                content: JSON.stringify(request.body),
                contentType: \\"application/json\\"
            },
            authHeader: BearerToken.toAuthorizationHeader(token)
        });

        if (isResponseOk(encodedResponse)) {
            const response = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: true,
                body: response as model.commons.PostId
            };
        }
        else {
            const error = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: false,
                error: error as model.posts.CreatePostErrorBody
            };
        }
    }

    public async getPost(request: model.posts.GetPostRequest): Promise<model.posts.GetPostResponse> {
        const token = await Supplier.get(this.token);
        const queryParameters = new URLSearchParams();
        if (request.page != null) {
            queryParameters.append(\\"page\\", request.page.toString());
        }
        queryParameters.append(\\"otherParam\\", request.otherParam.toString());

        const encodedResponse = await this.fetcher({
            url: urlJoin(this.baseUrl, \`/\${request.postId}\`),
            method: \\"GET\\",
            headers: {
                \\"X-Service-Header\\": await Supplier.get(this.headers[\\"X-Service-Header\\"])
            },
            queryParameters,
            authHeader: BearerToken.toAuthorizationHeader(token)
        });

        if (isResponseOk(encodedResponse)) {
            const response = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: true,
                body: response as model.posts.Post
            };
        }
        else {
            const error = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: false,
                error: error as model.posts.GetPostErrorBody
            };
        }
    }

    public async getPostV2(request: model.commons.PostId): Promise<model.posts.GetPostV2Response> {
        const token = await Supplier.get(this.token);
        const encodedResponse = await this.fetcher({
            url: urlJoin(this.baseUrl, \\"/get\\"),
            method: \\"GET\\",
            headers: {
                \\"X-Service-Header\\": await Supplier.get(this.headers[\\"X-Service-Header\\"])
            },
            body: {
                content: JSON.stringify(request),
                contentType: \\"application/json\\"
            },
            authHeader: BearerToken.toAuthorizationHeader(token)
        });

        if (isResponseOk(encodedResponse)) {
            const response = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: true,
                body: response as model.posts.Post
            };
        }
        else {
            const error = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: false,
                error: error as model.posts.GetPostV2ErrorBody
            };
        }
    }

    public async getAllPosts(): Promise<model.posts.GetAllPostsResponse> {
        const token = await Supplier.get(this.token);
        const encodedResponse = await this.fetcher({
            url: urlJoin(this.baseUrl, \\"/get-all\\"),
            method: \\"GET\\",
            headers: {
                \\"X-Service-Header\\": await Supplier.get(this.headers[\\"X-Service-Header\\"])
            },
            authHeader: BearerToken.toAuthorizationHeader(token)
        });

        if (isResponseOk(encodedResponse)) {
            const response = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: true,
                body: response as model.posts.Post[]
            };
        }
        else {
            const error = JSON.parse(new TextDecoder().decode(encodedResponse.body));
            return {
                ok: false,
                error: error as model.posts.GetAllPostsErrorBody
            };
        }
    }
}
",
  "/services/posts/index.ts": "export * from \\"./PostsService\\";
",
  "/tsconfig.json": "{
    \\"compilerOptions\\": {
        \\"strict\\": true,
        \\"skipLibCheck\\": true,
        \\"declaration\\": true,
        \\"sourceMap\\": true,
        \\"emitDeclarationOnly\\": true,
        \\"esModuleInterop\\": true,
        \\"noUncheckedIndexedAccess\\": true,
        \\"noUnusedLocals\\": true,
        \\"noUnusedParameters\\": true
    }
}",
}
`;
