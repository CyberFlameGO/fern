// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`generateClientFiles posts 1`] = `
Object {
  "/src/errors/index.ts": "export * from \\"./posts\\";
",
  "/src/errors/posts/PostNotFoundError.ts": "import * as model from \\"../../model\\";

export interface PostNotFoundError {
    _type: \\"PostNotFoundError\\";
    id: model.PostId;
}
",
  "/src/errors/posts/index.ts": "export * from \\"./PostNotFoundError\\";
",
  "/src/index.ts": "export * from \\"./model\\";
export * from \\"./errors\\";
export * from \\"./services\\";
",
  "/src/model/commons/PostId.ts": "/**
 * An ID of a blog post
 */
export type PostId = string & {
    __PostId: void,
};

export const PostId = {
    of: (value: string): PostId => value as PostId
};
",
  "/src/model/commons/index.ts": "export * from \\"./PostId\\";
",
  "/src/model/index.ts": "export * from \\"./commons\\";
export * from \\"./posts\\";
",
  "/src/model/posts/Author.ts": "export type Author =
    | Author.Anonymous
    | Author.Named;

export declare namespace Author {
    interface Anonymous {
        _type: \\"anonymous\\";
    }

    interface Named {
        _type: \\"named\\";
        named: string;
    }

    export interface _Visitor<Result> {
        anonymous: () => Result;
        named: (value: string) => Result;
        unknown: () => Result;
    }
}

export const Author = {
    anonymous: (): Author.Anonymous => ({
        _type: \\"anonymous\\",
        _type: \\"anonymous\\"
    }),

    named: (value: string): Author.Named => ({
        _type: \\"named\\",
        named: value,
        _type: \\"named\\"
    }),

    _visit: <Result>(value: Author, visitor: Author._Visitor<Result>): Result => {
        switch (value._type) {
            case \\"anonymous\\": return visitor.anonymous();
            case \\"named\\": return visitor.named(value.named);
            default: return visitor.unknown();
        }
    },
};
",
  "/src/model/posts/Post.ts": "import { PostId } from \\"../commons/PostId\\";
import { Author } from \\"./Author\\";
import { PostType } from \\"./PostType\\";

/**
 * A blog post
 */
export interface Post {
    id: PostId;
    type: PostType;
    title: string;
    author: Author;
    content: string;
}
",
  "/src/model/posts/PostType.ts": "export type PostType =
    | PostType.Long
    | PostType.Short;

export const PostType = {
    Long: \\"LONG\\" as PostType.Long,
    Short: \\"SHORT\\" as PostType.Short,

    visit: <Result>(value: PostType, visitor: PostType._Visitor<Result>): Result => {
        switch (value) {
            case PostType.Long: return visitor.Long();
            case PostType.Short: return visitor.Short();
            default: return visitor.unknown(value);
        }
    },
};

export declare namespace PostType {
    export type Long = \\"LONG\\" & {
        __Long: void,
    };
    export type Short = \\"SHORT\\" & {
        __Short: void,
    };

    export interface _Visitor<R> {
        Long: () => R;
        Short: () => R;
        unknown: (value: string) => R;
    }
}
",
  "/src/model/posts/index.ts": "export * from \\"./Author\\";
export * from \\"./Post\\";
export * from \\"./PostType\\";
",
  "/src/services/PostsService/PostsService.ts": "import * as model from \\"../../model\\";
import * as endpoints from \\"./endpoints\\";

export interface Client {
    createPost: (request: endpoints.createPost.Request) => Promise<model.PostId>;
    getPost: (postId: model.PostId) => Promise<endpoints.getPost.Response>;
}

export class Client implements Client {
    public createPost = (request: endpoints.createPost.Request): Promise<model.PostId> => {
        return Promise.reject();
    };
    public getPost = (postId: model.PostId): Promise<endpoints.getPost.Response> => {
        return Promise.reject();
    };
}
",
  "/src/services/PostsService/endpoints/createPost/Request.ts": "import * as model from \\"../../../../model\\";

export interface Request {
    type: model.PostType;
    title: string;
    author: model.Author;
    content: string;
}
",
  "/src/services/PostsService/endpoints/createPost/index.ts": "export * from \\"./Request\\";
",
  "/src/services/PostsService/endpoints/getPost/Response.ts": "import * as model from \\"../../../../model\\";

export type Response =
    | Response.A
    | Response.B
    | Response.C;

export declare namespace Response {
    interface A extends model.Post {
        _type: \\"a\\";
    }

    interface B extends model.Post {
        _type: \\"b\\";
    }

    interface C extends model.Post {
        _type: \\"c\\";
    }

    export interface _Visitor<Result> {
        a: (value: model.Post) => Result;
        b: (value: model.Post) => Result;
        c: (value: model.Post) => Result;
        unknown: () => Result;
    }
}

export const Response = {
    a: (value: model.Post): Response.A => ({
        ...value,
        _type: \\"a\\"
    }),

    b: (value: model.Post): Response.B => ({
        ...value,
        _type: \\"b\\"
    }),

    c: (value: model.Post): Response.C => ({
        ...value,
        _type: \\"c\\"
    }),

    _visit: <Result>(value: Response, visitor: Response._Visitor<Result>): Result => {
        switch (value._type) {
            case \\"a\\": return visitor.a(value);
            case \\"b\\": return visitor.b(value);
            case \\"c\\": return visitor.c(value);
            default: return visitor.unknown();
        }
    },
};
",
  "/src/services/PostsService/endpoints/getPost/index.ts": "export * from \\"./Response\\";
",
  "/src/services/PostsService/endpoints/index.ts": "export * as createPost from \\"./createPost\\";
export * as getPost from \\"./getPost\\";
",
  "/src/services/PostsService/index.ts": "export * as Endpoints from \\"./endpoints\\";
export * from \\"./PostsService\\";
",
  "/src/services/index.ts": "export * as PostsService from \\"./PostsService\\";
",
}
`;
