// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`generateClientFiles posts 1`] = `
Object {
  "/src/errors/index.ts": "export * from \\"./posts\\";
",
  "/src/errors/posts/PostNotFoundError.ts": "import * as model from \\"../../model\\";

export interface PostNotFoundError {
    _type: \\"PostNotFoundError\\";
    id: model.PostId;
}
",
  "/src/errors/posts/index.ts": "export * from \\"./PostNotFoundError\\";
",
  "/src/index.ts": "export * from \\"./errors\\";
export * from \\"./model\\";
export * from \\"./services\\";
",
  "/src/model/commons/PostId.ts": "/**
 * An ID of a blog post
 */
export type PostId = string & {
    __PostId: void,
};

export const PostId = {
    of: (value: string): PostId => value as PostId
};
",
  "/src/model/commons/index.ts": "export * from \\"./PostId\\";
",
  "/src/model/index.ts": "export * from \\"./commons\\";
export * from \\"./posts\\";
",
  "/src/model/posts/Author.ts": "export type Author =
    | Author.Anonymous
    | Author.Named;

export declare namespace Author {
    interface Anonymous {
        _type: \\"anonymous\\";
    }

    interface Named {
        _type: \\"named\\";
        named: string;
    }

    export interface _Visitor<Result> {
        anonymous: () => Result;
        named: (value: string) => Result;
        _unknown: () => Result;
    }
}

export const Author = {
    anonymous: (): Author.Anonymous => ({
        _type: \\"anonymous\\"
    }),

    named: (value: string): Author.Named => ({
        named: value,
        _type: \\"named\\"
    }),

    _visit: <Result>(value: Author, visitor: Author._Visitor<Result>): Result => {
        switch (value._type) {
            case \\"anonymous\\": return visitor.anonymous();
            case \\"named\\": return visitor.named(value.named);
            default: return visitor._unknown();
        }
    },
};
",
  "/src/model/posts/Post.ts": "import { PostId } from \\"../commons/PostId\\";
import { Author } from \\"./Author\\";
import { PostType } from \\"./PostType\\";

/**
 * A blog post
 */
export interface Post {
    id: PostId;
    type: PostType;
    title: string;
    author: Author;
    content: string;
}
",
  "/src/model/posts/PostType.ts": "export type PostType =
    | PostType.Long
    | PostType.Short;

export const PostType = {
    Long: \\"LONG\\" as PostType.Long,
    Short: \\"SHORT\\" as PostType.Short,

    _visit: <Result>(value: PostType, visitor: PostType._Visitor<Result>): Result => {
        switch (value) {
            case PostType.Long: return visitor.Long();
            case PostType.Short: return visitor.Short();
            default: return visitor._unknown();
        }
    },
};

export declare namespace PostType {
    export type Long = \\"LONG\\" & {
        __Long: void,
    };
    export type Short = \\"SHORT\\" & {
        __Short: void,
    };

    export interface _Visitor<Result> {
        Long: () => Result;
        Short: () => Result;
        _unknown: () => Result;
    }
}
",
  "/src/model/posts/index.ts": "export * from \\"./Author\\";
export * from \\"./Post\\";
export * from \\"./PostType\\";
",
  "/src/services/PostsService/PostsService.ts": "import { defaultFetcher, Fetcher, joinPaths, Service } from \\"@fern-typescript/service-utils\\";
import * as endpoints from \\"./endpoints\\";
import { Request } from \\"./endpoints/getPost/Request\\";

export interface Client {
    createPost: (request: endpoints.createPost.RequestBody) => Promise<endpoints.createPost.Response>;
    getPost: (request: Request) => Promise<endpoints.getPost.Response>;
}

export class Client implements Client {
    private baseUrl: string;
    private fetcher: Fetcher;

    constructor(args: Service.Init) {
        this.fetcher = args.fetcher ?? defaultFetcher;
        this.baseUrl = joinPaths(args.serverUrl, args.serviceBaseUrl);
    }

    public createPost = async (request: endpoints.createPost.RequestBody): Promise<endpoints.createPost.Response> => {
        const response = await this.fetcher({
            url: joinPaths(this.baseUrl, \\"/\\"),
            method: \\"POST\\",
            headers: {},
            request
        });
        if (response.statusCode >= 200 && response.statusCode < 300) {
            return {
                _ok: true,
                statusCode: response.statusCode,
                body: response.body
            };
        }
        else {
            return {
                _ok: false,
                statusCode: response.statusCode
            };
        }
    };
    public getPost = async (request: Request): Promise<endpoints.getPost.Response> => {
        const response = await this.fetcher({
            url: joinPaths(this.baseUrl, \\"/{postId}\\"),
            method: \\"GET\\",
            headers: {}
        });
        if (response.statusCode >= 200 && response.statusCode < 300) {
            return {
                _ok: true,
                statusCode: response.statusCode,
                body: response.body
            };
        }
        else {
            return {
                _ok: false,
                statusCode: response.statusCode,
                error: response.body
            };
        }
    };
}
",
  "/src/services/PostsService/endpoints/createPost/RequestBody.ts": "import * as model from \\"../../../../model\\";

export interface RequestBody {
    type: model.PostType;
    title: string;
    author: model.Author;
    content: string;
}
",
  "/src/services/PostsService/endpoints/createPost/Response.ts": "import * as model from \\"../../../../model\\";

export type Response = SuccessResponse | ErrorResponse;

export interface SuccessResponse {
    _ok: true;
    statusCode: number;
    body: model.PostId;
}

export interface ErrorResponse {
    _ok: false;
    statusCode: number;
}
",
  "/src/services/PostsService/endpoints/createPost/index.ts": "export * from \\"./RequestBody\\";
export * from \\"./Response\\";
",
  "/src/services/PostsService/endpoints/getPost/ErrorBody.ts": "import * as model from \\"../../../../errors\\";

export type ErrorBody =
    | model.PostNotFoundError;

export const _visit = <Result>(value: ErrorBody, visitor: ErrorBody._Visitor<Result>): Result => {
    switch (value._type) {
        case \\"PostNotFoundError\\": return visitor.notFound(value);
        default: return visitor._unknown();
    }
};

export declare namespace ErrorBody {
    export interface _Visitor<Result> {
        notFound: (value: model.PostNotFoundError) => Result;
        _unknown: () => Result;
    }
}
",
  "/src/services/PostsService/endpoints/getPost/Request.ts": "import * as model from \\"../../../../model\\";

export interface Request {
    postId: model.PostId;
}
",
  "/src/services/PostsService/endpoints/getPost/Response.ts": "import { ErrorBody } from \\"./ErrorBody\\";

export type Response = SuccessResponse | ErrorResponse;

export interface SuccessResponse {
    _ok: true;
    statusCode: number;
    body: string;
}

export interface ErrorResponse {
    _ok: false;
    statusCode: number;
    error: ErrorBody;
}
",
  "/src/services/PostsService/endpoints/getPost/index.ts": "export * from \\"./ErrorBody\\";
export * from \\"./Request\\";
export * from \\"./Response\\";
",
  "/src/services/PostsService/endpoints/index.ts": "export * as createPost from \\"./createPost\\";
export * as getPost from \\"./getPost\\";
",
  "/src/services/PostsService/index.ts": "export * as Endpoints from \\"./endpoints\\";
export * from \\"./PostsService\\";
",
  "/src/services/index.ts": "export * as PostsService from \\"./PostsService\\";
",
}
`;
