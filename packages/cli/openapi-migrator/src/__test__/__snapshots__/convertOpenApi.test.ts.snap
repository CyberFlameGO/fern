// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`open api converter novu simple 1`] = `
{
  "rootApiFile": {
    "auth": undefined,
    "auth-schemes": undefined,
    "display-name": "Novu API",
    "headers": {},
    "name": "api",
  },
  "serviceFiles": {
    "__package__.yml": {},
    "activity.yml": {
      "imports": {
        "commons": "commons.yml",
      },
      "service": {
        "auth": false,
        "base-path": "/v1/activity",
        "endpoints": {
          "activityControllerGetActivityFeed": {
            "display-name": "Get activity feed",
            "docs": undefined,
            "method": "GET",
            "path": "",
            "request": {
              "name": "ActivityController_getActivityFeedRequest",
              "query-parameters": {
                "page": "optional<double>",
                "search": "string",
                "transactionId": "optional<string>",
              },
            },
            "response": "commons.ActivitiesResponseDto",
          },
          "activityControllerGetActivityGraphStats": {
            "display-name": "Get activity graph statistics",
            "docs": undefined,
            "method": "GET",
            "path": "/graph/stats",
            "request": {
              "name": "ActivityController_getActivityGraphStatsRequest",
              "query-parameters": {
                "days": "optional<double>",
              },
            },
            "response": "list<commons.ActivityGraphStatesResponse>",
          },
          "activityControllerGetActivityStats": {
            "display-name": "Get activity statistics",
            "docs": undefined,
            "method": "GET",
            "path": "/stats",
            "request": {
              "name": "ActivityController_getActivityStatsRequest",
            },
            "response": "commons.ActivityStatsResponseDto",
          },
        },
        "path-parameters": undefined,
      },
    },
    "changes.yml": {
      "imports": {
        "commons": "commons.yml",
      },
      "service": {
        "auth": false,
        "base-path": "/v1/changes",
        "endpoints": {
          "changesControllerApplyDiff": {
            "display-name": "Apply change",
            "docs": undefined,
            "method": "POST",
            "path": "/{changeId}/apply",
            "path-parameters": {
              "changeId": "string",
            },
            "request": {
              "name": "ChangesController_applyDiffRequest",
            },
          },
          "changesControllerBulkApplyDiff": {
            "display-name": "Apply changes",
            "docs": undefined,
            "method": "POST",
            "path": "/bulk/apply",
            "request": {
              "name": "ChangesController_bulkApplyDiffRequest",
            },
          },
          "changesControllerGetChanges": {
            "display-name": "Get changes",
            "docs": undefined,
            "method": "GET",
            "path": "",
            "request": {
              "name": "ChangesController_getChangesRequest",
              "query-parameters": {
                "limit": "optional<double>",
                "page": "optional<double>",
                "promoted": "string",
              },
            },
            "response": "ChangesResponseDto",
          },
          "changesControllerGetChangesCount": {
            "display-name": "Get changes count",
            "docs": undefined,
            "method": "GET",
            "path": "/count",
            "request": {
              "name": "ChangesController_getChangesCountRequest",
            },
            "response": "double",
          },
        },
        "path-parameters": undefined,
      },
      "types": {
        "ChangesResponseDto": {
          "extends": undefined,
          "properties": {
            "data": "list<commons.ChangeResponseDto>",
            "page": "double",
            "pageSize": "double",
            "totalCount": "double",
          },
        },
      },
    },
    "commons.yml": {
      "types": {
        "ActivitiesResponseDto": {
          "extends": undefined,
          "properties": {
            "data": "list<ActivityNotificationResponseDto>",
            "page": "double",
            "pageSize": "double",
            "totalCount": "double",
          },
        },
        "ActivityGraphStatesResponse": {
          "extends": undefined,
          "properties": {
            "_id": "string",
            "channels": "list<_InlinedType8>",
            "count": "double",
            "templates": "list<string>",
          },
        },
        "ActivityNotificationExecutionDetailResponseDto": {
          "extends": undefined,
          "properties": {
            "_id": "string",
            "_jobId": "string",
            "detail": "string",
            "isRetry": "boolean",
            "isTest": "boolean",
            "providerId": "map<string, unknown>",
            "raw": "optional<string>",
            "source": "ActivityNotificationExecutionDetailResponseDtoSource",
            "status": "ActivityNotificationExecutionDetailResponseDtoStatus",
          },
        },
        "ActivityNotificationExecutionDetailResponseDtoSource": {
          "enum": [
            "Credentials",
            "Internal",
            "Payload",
            "Webhook",
          ],
        },
        "ActivityNotificationExecutionDetailResponseDtoStatus": {
          "enum": [
            "Success",
            "Warning",
            "Failed",
            "Pending",
            "Queued",
            "ReadConfirmation",
          ],
        },
        "ActivityNotificationJobResponseDto": {
          "extends": undefined,
          "properties": {
            "_id": "string",
            "digest": "optional<map<string, unknown>>",
            "executionDetails": "list<ActivityNotificationExecutionDetailResponseDto>",
            "payload": "optional<map<string, unknown>>",
            "providerId": "map<string, unknown>",
            "status": "string",
            "step": "ActivityNotificationStepResponseDto",
            "type": "string",
          },
        },
        "ActivityNotificationResponseDto": {
          "extends": undefined,
          "properties": {
            "_environmentId": "string",
            "_id": "optional<string>",
            "_organizationId": "string",
            "channels": "optional<ActivityNotificationResponseDtoChannels>",
            "createdAt": "optional<string>",
            "jobs": "optional<list<ActivityNotificationJobResponseDto>>",
            "subscriber": "optional<ActivityNotificationSubscriberResponseDto>",
            "template": "optional<ActivityNotificationTemplateResponseDto>",
            "transactionId": "string",
          },
        },
        "ActivityNotificationResponseDtoChannels": {
          "enum": [
            "in_app",
            "email",
            "sms",
            "chat",
            "push",
            "digest",
            "trigger",
            "delay",
          ],
        },
        "ActivityNotificationStepResponseDto": {
          "extends": undefined,
          "properties": {
            "_id": "string",
            "active": "boolean",
            "filters": "StepFilter",
            "template": "optional<MessageTemplateDto>",
          },
        },
        "ActivityNotificationSubscriberResponseDto": {
          "extends": undefined,
          "properties": {
            "_id": "string",
            "email": "optional<string>",
            "firstName": "optional<string>",
            "lastName": "optional<string>",
            "phone": "optional<string>",
          },
        },
        "ActivityNotificationTemplateResponseDto": {
          "extends": undefined,
          "properties": {
            "_id": "optional<string>",
            "name": "string",
            "triggers": "list<NotificationTrigger>",
          },
        },
        "ActivityStatsResponseDto": {
          "extends": undefined,
          "properties": {
            "monthlySent": "double",
            "weeklySent": "double",
            "yearlySent": "double",
          },
        },
        "ApiKey": {
          "extends": undefined,
          "properties": {
            "_userId": "string",
            "key": "string",
          },
        },
        "ChangeResponseDto": {
          "extends": undefined,
          "properties": {
            "_creatorId": "string",
            "_entityId": "string",
            "_environmentId": "string",
            "_id": "optional<string>",
            "_organizationId": "string",
            "_parentId": "optional<string>",
            "change": "map<string, unknown>",
            "createdAt": "string",
            "enabled": "boolean",
            "type": "ChangeResponseDtoProperties",
          },
        },
        "ChangeResponseDtoProperties": {
          "enum": [
            "Feed",
            "MessageTemplate",
            "Layout",
            "DefaultLayout",
            "NotificationTemplate",
            "NotificationGroup",
          ],
        },
        "ChannelCredentials": {
          "extends": undefined,
          "properties": {
            "deviceTokens": {
              "docs": "Contains an array of the subscriber device tokens for a given provider. Used on Push integrations",
              "type": "optional<list<string>>",
            },
            "webhookUrl": {
              "docs": "Webhook url used by chat app integrations. The webhook should be obtained from the chat app provider.",
              "type": "string",
            },
          },
        },
        "ChannelPreference": {
          "extends": undefined,
          "properties": {
            "enabled": {
              "docs": "If channel is enabled or not",
              "type": "boolean",
            },
            "type": "ChannelPreferenceType",
          },
        },
        "ChannelPreferenceType": {
          "docs": "The type of channel that is enabled or not",
          "enum": [
            "in_app",
            "email",
            "sms",
            "chat",
            "push",
          ],
        },
        "ChannelSettings": {
          "extends": undefined,
          "properties": {
            "_integrationId": {
              "docs": "Id of the integration that is used for this channel",
              "type": "string",
            },
            "credentials": {
              "docs": "Subscriber credentials for channel",
              "type": "_InlinedType4",
            },
            "providerId": "ChannelSettingsProviderId",
          },
        },
        "ChannelSettingsProviderId": {
          "docs": "Subscriber credentials for channel",
          "enum": [
            "slack",
            "discord",
            "msteams",
            "fcm",
            "apns",
            "expo",
          ],
        },
        "CreateEnvironmentRequestDtoChannel": {
          "enum": [
            "in_app",
            "email",
            "sms",
            "chat",
            "push",
          ],
        },
        "CredentialsDto": {
          "extends": undefined,
          "properties": {
            "accountSid": "optional<string>",
            "apiKey": "optional<string>",
            "applicationId": "optional<string>",
            "clientId": "optional<string>",
            "domain": "optional<string>",
            "from": "optional<string>",
            "host": "optional<string>",
            "messageProfileId": "optional<string>",
            "password": "optional<string>",
            "port": "optional<string>",
            "projectName": "optional<string>",
            "region": "optional<string>",
            "secretKey": "optional<string>",
            "secure": "optional<boolean>",
            "senderName": "optional<string>",
            "token": "optional<string>",
            "user": "optional<string>",
          },
        },
        "DNSProperties": {
          "extends": undefined,
          "properties": {
            "inboundParseDomain": "optional<string>",
          },
        },
        "DeleteSubscriberResponseDtoStatus": {
          "docs": "The status enum for the performed action",
          "enum": [
            "deleted",
          ],
        },
        "EmailBlock": {
          "extends": undefined,
          "properties": {
            "content": "string",
            "styles": "optional<EmailBlockStyles>",
            "type": "EmailBlockType",
            "url": "optional<string>",
          },
        },
        "EmailBlockStyles": {
          "extends": undefined,
          "properties": {
            "textAlign": "optional<EmailBlockStylesTextAlign>",
          },
        },
        "EmailBlockStylesTextAlign": {
          "enum": [
            "left",
            "right",
            "center",
          ],
        },
        "EmailBlockType": {
          "enum": [
            "text",
            "button",
          ],
        },
        "EnvironmentResponseDto": {
          "extends": undefined,
          "properties": {
            "_id": "optional<string>",
            "_organizationId": "string",
            "_parentId": "string",
            "apiKeys": "list<ApiKey>",
            "identifier": "string",
            "name": "string",
            "widget": "WidgetSettings",
          },
        },
        "FeedResponseDto": {
          "extends": undefined,
          "properties": {
            "_environmentId": "string",
            "_id": "optional<string>",
            "_organizationId": "string",
            "identifier": "string",
            "name": "string",
          },
        },
        "FieldFilterPart": {
          "extends": undefined,
          "properties": {
            "field": "string",
            "on": "FieldFilterPartOn",
            "operator": "FieldFilterPartOperator",
            "value": "string",
          },
        },
        "FieldFilterPartOn": {
          "enum": [
            "subscriber",
            "payload",
          ],
        },
        "FieldFilterPartOperator": {
          "enum": [
            "LARGER",
            "SMALLER",
            "LARGER_EQUAL",
            "SMALLER_EQUAL",
            "EQUAL",
            "NOT_EQUAL",
            "ALL_IN",
            "ANY_IN",
            "NOT_IN",
            "BETWEEN",
            "NOT_BETWEEN",
            "LIKE",
            "NOT_LIKE",
            "IN",
          ],
        },
        "GetLayoutResponseDtoProperties": {
          "enum": [
            "in_app",
            "email",
            "sms",
            "chat",
            "push",
          ],
        },
        "IntegrationResponseDto": {
          "extends": undefined,
          "properties": {
            "_environmentId": "string",
            "_id": "optional<string>",
            "_organizationId": "string",
            "active": "boolean",
            "channel": "IntegrationResponseDtoChannelChannel",
            "credentials": "CredentialsDto",
            "deleted": "boolean",
            "deletedAt": "string",
            "deletedBy": "string",
            "providerId": "string",
          },
        },
        "IntegrationResponseDtoChannelChannel": {
          "enum": [
            "in_app",
            "email",
            "sms",
            "chat",
            "push",
          ],
        },
        "MarkMessageFields": {
          "extends": undefined,
          "properties": {
            "read": "optional<boolean>",
            "seen": "optional<boolean>",
          },
        },
        "MessageAction": {
          "extends": undefined,
          "properties": {
            "result": "MessageActionResult",
            "status": "optional<MessageActionType>",
          },
        },
        "MessageActionResult": {
          "extends": undefined,
          "properties": {
            "payload": "optional<map<string, unknown>>",
            "type": "optional<MessageActionResultType>",
          },
        },
        "MessageActionResultType": {
          "enum": [
            "primary",
            "secondary",
            "clicked",
          ],
        },
        "MessageActionType": {
          "enum": [
            "pending",
            "done",
          ],
        },
        "MessageCTA": {
          "extends": undefined,
          "properties": {
            "action": "optional<MessageAction>",
            "data": "MessageCTAData",
            "type": "MessageCTAType",
          },
        },
        "MessageCTAData": {
          "extends": undefined,
          "properties": {
            "url": "optional<string>",
          },
        },
        "MessageCTAType": {
          "enum": [
            "redirect",
          ],
        },
        "MessageResponseDto": {
          "extends": undefined,
          "properties": {
            "_environmentId": "string",
            "_feedId": "string",
            "_id": "optional<string>",
            "_messageTemplateId": "string",
            "_notificationId": "string",
            "_organizationId": "string",
            "_subscriberId": "string",
            "_templateId": "string",
            "channel": "MessageResponseDtoChannel",
            "content": "MessageResponseDtoContent",
            "createdAt": "optional<string>",
            "cta": "MessageCTA",
            "deviceTokens": "optional<list<string>>",
            "directWebhookUrl": "optional<string>",
            "email": "optional<string>",
            "errorId": "string",
            "errorText": "string",
            "lastSeenDate": "string",
            "overrides": {
              "docs": "Provider specific overrides used when triggering the notification",
              "type": "map<string, unknown>",
            },
            "payload": {
              "docs": "The payload that was used to send the notification trigger",
              "type": "map<string, unknown>",
            },
            "phone": "optional<string>",
            "providerId": "optional<string>",
            "seen": "boolean",
            "status": "MessageResponseDtoStatus",
            "subject": "optional<string>",
            "subscriber": "optional<SubscriberResponseDto>",
            "template": "optional<NotificationTemplateResponse>",
            "templateIdentifier": "optional<string>",
            "title": "optional<string>",
            "transactionId": "string",
          },
        },
        "MessageResponseDtoChannel": {
          "enum": [
            "in_app",
            "email",
            "sms",
            "chat",
            "push",
          ],
        },
        "MessageResponseDtoStatus": {
          "enum": [
            "sent",
            "error",
            "warning",
          ],
        },
        "MessageTemplate": {
          "extends": undefined,
          "properties": {},
        },
        "MessageTemplateDto": {
          "extends": undefined,
          "properties": {},
        },
        "NotificationChannel": {
          "extends": undefined,
          "properties": {
            "active": "optional<boolean>",
            "filters": "optional<list<StepFilter>>",
            "template": "optional<MessageTemplate>",
          },
        },
        "NotificationGroup": {
          "extends": undefined,
          "properties": {
            "_environmentId": "string",
            "_id": "optional<string>",
            "_organizationId": "string",
            "_parentId": "optional<string>",
            "name": "string",
          },
        },
        "NotificationGroupResponseDto": {
          "extends": undefined,
          "properties": {
            "_environmentId": "string",
            "_id": "optional<string>",
            "_organizationId": "string",
            "_parentId": "optional<string>",
            "name": "string",
          },
        },
        "NotificationStep": {
          "extends": undefined,
          "properties": {
            "_id": "optional<string>",
            "_parentId": "optional<string>",
            "_templateId": "optional<string>",
            "active": "optional<boolean>",
            "filters": "optional<list<StepFilter>>",
            "metadata": "optional<NotificationStepMetadata>",
            "replyCallback": "optional<map<string, unknown>>",
            "shouldStopOnFail": "optional<boolean>",
            "template": "optional<MessageTemplate>",
          },
        },
        "NotificationStepMetadata": {
          "extends": undefined,
          "properties": {
            "amount": "optional<double>",
            "backoffAmount": "optional<double>",
            "backoffUnit": "optional<NotificationStepMetadataBackofUnit>",
            "delayPath": "optional<string>",
            "digestKey": "optional<string>",
            "type": "NotificationStepMetadataType",
            "unit": "optional<NotificationStepMetadataUnit>",
            "updateMode": "optional<boolean>",
          },
        },
        "NotificationStepMetadataBackofUnit": {
          "enum": [
            "seconds",
            "minutes",
            "hours",
            "days",
          ],
        },
        "NotificationStepMetadataType": {
          "enum": [
            "regular",
            "backoff",
            "scheduled",
          ],
        },
        "NotificationStepMetadataUnit": {
          "enum": [
            "seconds",
            "minutes",
            "hours",
            "days",
          ],
        },
        "NotificationTemplateResponse": {
          "extends": undefined,
          "properties": {
            "_creatorId": "string",
            "_environmentId": "string",
            "_id": "optional<string>",
            "_notificationGroupId": "string",
            "_organizationId": "string",
            "_parentId": "optional<string>",
            "active": "boolean",
            "critical": "boolean",
            "deleted": "boolean",
            "deletedAt": "string",
            "deletedBy": "string",
            "description": "string",
            "draft": "boolean",
            "name": "string",
            "notificationGroup": "optional<NotificationGroup>",
            "preferenceSettings": "PreferenceChannels",
            "steps": "list<NotificationStep>",
            "tags": "list<string>",
            "triggers": "list<NotificationTrigger>",
          },
        },
        "NotificationTrigger": {
          "extends": undefined,
          "properties": {
            "identifier": "string",
            "subscriberVariables": "optional<list<NotificationTriggerVariable>>",
            "type": "string",
            "variables": "list<NotificationTriggerVariable>",
          },
        },
        "NotificationTriggerVariable": {
          "extends": undefined,
          "properties": {
            "name": "string",
          },
        },
        "Preference": {
          "extends": undefined,
          "properties": {
            "channels": {
              "docs": "Subscriber preferences for the different channels regarding this notification template",
              "type": "_InlinedType7",
            },
            "enabled": {
              "docs": "Sets if the notification template is fully enabled for all channels or not for the subscriber.",
              "type": "boolean",
            },
          },
        },
        "PreferenceChannels": {
          "extends": undefined,
          "properties": {
            "chat": "optional<boolean>",
            "email": "optional<boolean>",
            "in_app": "optional<boolean>",
            "push": "optional<boolean>",
            "sms": "optional<boolean>",
          },
        },
        "StepFilter": {
          "extends": undefined,
          "properties": {
            "children": "list<FieldFilterPart>",
            "isNegated": "boolean",
            "type": "StepFilterType",
            "value": "StepFilterValue",
          },
        },
        "StepFilterType": {
          "enum": [
            "BOOLEAN",
            "TEXT",
            "DATE",
            "NUMBER",
            "STATEMENT",
            "LIST",
            "MULTI_LIST",
            "GROUP",
          ],
        },
        "StepFilterValue": {
          "enum": [
            "AND",
            "OR",
          ],
        },
        "SubscriberPayloadDto": {
          "extends": undefined,
          "properties": {
            "avatar": "optional<string>",
            "email": "optional<string>",
            "firstName": "optional<string>",
            "lastName": "optional<string>",
            "locale": "optional<string>",
            "phone": "optional<string>",
          },
        },
        "SubscriberResponseDto": {
          "extends": undefined,
          "properties": {
            "__v": "optional<double>",
            "_environmentId": "string",
            "_id": {
              "docs": "The internal id novu generated for your subscriber, this is not the subscriberId matching your query. See \`subscriberId\` for that",
              "type": "optional<string>",
            },
            "_organizationId": "string",
            "avatar": "optional<string>",
            "channels": {
              "docs": "Channels settings for subscriber",
              "type": "optional<list<ChannelSettings>>",
            },
            "createdAt": "string",
            "deleted": "boolean",
            "email": "string",
            "firstName": "string",
            "isOnline": "optional<boolean>",
            "lastName": "string",
            "lastOnlineAt": "optional<string>",
            "locale": "optional<string>",
            "phone": "optional<string>",
            "subscriberId": {
              "docs": "The internal identifier you used to create this subscriber, usually correlates to the id the user in your systems",
              "type": "string",
            },
            "updatedAt": "string",
          },
        },
        "TemplateResponse": {
          "extends": undefined,
          "properties": {
            "_id": {
              "docs": "Unique identifier of the notification template",
              "type": "string",
            },
            "critical": {
              "docs": "Critical templates will always be delivered to the end user and should be hidden from the subscriber preferences screen",
              "type": "boolean",
            },
            "name": {
              "docs": "Name of the notification template",
              "type": "string",
            },
          },
        },
        "TopicPayloadDto": {
          "extends": undefined,
          "properties": {
            "topicKey": "string",
            "type": "TopicPayloadDtoType",
          },
        },
        "TopicPayloadDtoType": {
          "enum": [],
        },
        "TriggerEventRequestDto": {
          "extends": undefined,
          "properties": {
            "actor": "optional<TriggerEventRequestDtoActor>",
            "name": {
              "docs": "The trigger identifier of the template you wish to send. This identifier can be found on the template page.",
              "type": "string",
            },
            "overrides": {
              "docs": "This could be used to override provider specific configurations",
              "type": "optional<map<string, unknown>>",
            },
            "payload": {
              "docs": "The payload object is used to pass additional custom information that could be used to render the template, or perform routing rules based on it. 
      This data will also be available when fetching the notifications feed from the API to display certain parts of the UI.",
              "type": "map<string, unknown>",
            },
            "to": "TriggerEventRequestDtoTo",
            "transactionId": {
              "docs": "A unique identifier for this transaction, we will generated a UUID if not provided.",
              "type": "optional<string>",
            },
          },
        },
        "TriggerEventResponseDto": {
          "extends": undefined,
          "properties": {
            "acknowledged": {
              "docs": "If trigger was acknowledged or not",
              "type": "boolean",
            },
            "error": {
              "docs": "In case of an error, this field will contain the error message",
              "type": "optional<list<string>>",
            },
            "status": "TriggerEventResponseDtoStatus",
            "transactionId": {
              "docs": "Transaction id for trigger",
              "type": "optional<string>",
            },
          },
        },
        "TriggerEventResponseDtoStatus": {
          "docs": "Status for trigger",
          "enum": [
            "processed",
            "trigger_not_active",
            "subscriber_id_missing",
            "error",
          ],
        },
        "UpdateLayoutRequestDtoProperties": {
          "enum": [
            "in_app",
            "email",
            "sms",
            "chat",
            "push",
          ],
        },
        "UpdateSubscriberChannelRequestDtoProviderId": {
          "docs": "The provider identifier for the credentials",
          "enum": [
            "slack",
            "discord",
            "msteams",
            "fcm",
            "apns",
            "expo",
          ],
        },
        "UpdateSubscriberPreferenceResponseDto": {
          "extends": undefined,
          "properties": {
            "preference": {
              "docs": "The preferences of the subscriber regarding the related notification template",
              "type": "_InlinedType6",
            },
            "template": {
              "docs": "The notification template information and if it is critical or not",
              "type": "_InlinedType5",
            },
          },
        },
        "WidgetSettings": {
          "extends": undefined,
          "properties": {
            "notificationCenterEncryption": "boolean",
          },
        },
        "_InlinedType4": {
          "docs": "Subscriber credentials for channel",
          "extends": [
            "ChannelCredentials",
          ],
        },
        "_InlinedType5": {
          "docs": "The notification template information and if it is critical or not",
          "extends": [
            "TemplateResponse",
          ],
        },
        "_InlinedType6": {
          "docs": "The preferences of the subscriber regarding the related notification template",
          "extends": [
            "Preference",
          ],
        },
        "_InlinedType7": {
          "docs": "Subscriber preferences for the different channels regarding this notification template",
          "extends": [
            "PreferenceChannels",
          ],
        },
        "_InlinedType8": {
          "enum": [
            "in_app",
            "email",
            "sms",
            "chat",
            "push",
          ],
        },
      },
    },
    "environments.yml": {
      "imports": {
        "commons": "commons.yml",
      },
      "service": {
        "auth": false,
        "base-path": "/v1/environments",
        "endpoints": {
          "environmentsControllerCreateEnvironment": {
            "display-name": "Create environment",
            "docs": undefined,
            "method": "POST",
            "path": "",
            "request": {
              "body": "CreateEnvironmentRequestDto",
              "name": "EnvironmentsController_createEnvironmentRequest",
            },
          },
          "environmentsControllerGetCurrentEnvironment": {
            "display-name": "Get current environment",
            "docs": undefined,
            "method": "GET",
            "path": "/me",
            "request": {
              "name": "EnvironmentsController_getCurrentEnvironmentRequest",
            },
            "response": "commons.EnvironmentResponseDto",
          },
          "environmentsControllerGetMyEnvironments": {
            "display-name": "Get environments",
            "docs": undefined,
            "method": "GET",
            "path": "",
            "request": {
              "name": "EnvironmentsController_getMyEnvironmentsRequest",
            },
            "response": "list<commons.EnvironmentResponseDto>",
          },
          "environmentsControllerGetOrganizationApiKeys": {
            "display-name": "Get api keys",
            "docs": undefined,
            "method": "GET",
            "path": "/api-keys",
            "request": {
              "name": "EnvironmentsController_getOrganizationApiKeysRequest",
            },
            "response": "list<commons.ApiKey>",
          },
          "environmentsControllerRegenerateOrganizationApiKeys": {
            "display-name": "Regenerate api keys",
            "docs": undefined,
            "method": "POST",
            "path": "/api-keys/regenerate",
            "request": {
              "name": "EnvironmentsController_regenerateOrganizationApiKeysRequest",
            },
            "response": "list<commons.ApiKey>",
          },
          "environmentsControllerUpdateMyEnvironment": {
            "display-name": "Update env by id",
            "docs": undefined,
            "method": "PUT",
            "path": "/{environmentId}",
            "path-parameters": {
              "environmentId": "string",
            },
            "request": {
              "body": "UpdateEnvironmentRequestDto",
              "name": "EnvironmentsController_updateMyEnvironmentRequest",
            },
          },
          "environmentsControllerUpdateWidgetSettings": {
            "display-name": "Update widget settings",
            "docs": undefined,
            "method": "PUT",
            "path": "/widget/settings",
            "request": {
              "body": "UpdateWidgetSettingsRequestDto",
              "name": "EnvironmentsController_updateWidgetSettingsRequest",
            },
            "response": "commons.EnvironmentResponseDto",
          },
        },
        "path-parameters": undefined,
      },
      "types": {
        "CreateEnvironmentRequestDto": {
          "extends": undefined,
          "properties": {
            "name": "string",
            "parentId": "optional<string>",
          },
        },
        "UpdateEnvironmentRequestDto": {
          "extends": undefined,
          "properties": {
            "dns": "commons.DNSProperties",
            "identifier": "optional<string>",
            "name": "optional<string>",
            "parentId": "optional<string>",
          },
        },
        "UpdateWidgetSettingsRequestDto": {
          "extends": undefined,
          "properties": {
            "notificationCenterEncryption": "boolean",
          },
        },
      },
    },
    "events.yml": {
      "imports": {
        "commons": "commons.yml",
      },
      "service": {
        "auth": false,
        "base-path": "/v1/events/trigger",
        "endpoints": {
          "eventsControllerCancelDelayed": {
            "display-name": "Cancel triggered event",
            "docs": "
    Using a previously generated transactionId during the event trigger,
     will cancel any active or pending workflows. This is useful to cancel active digests, delays etc...
    ",
            "method": "DELETE",
            "path": "/{transactionId}",
            "path-parameters": {
              "transactionId": "string",
            },
            "request": {
              "name": "EventsController_cancelDelayedRequest",
            },
            "response": "boolean",
          },
          "eventsControllerTrackEvent": {
            "display-name": "Trigger event",
            "docs": "
    Trigger event is the main (and the only) way to send notification to subscribers. 
    The trigger identifier is used to match the particular template associated with it. 
    Additional information can be passed according the body interface below.
    ",
            "method": "POST",
            "path": "",
            "request": {
              "body": "commons.TriggerEventRequestDto",
              "name": "EventsController_trackEventRequest",
            },
          },
          "eventsControllerTrackEventToAll": {
            "display-name": "Broadcast event to all",
            "docs": "Trigger a broadcast event to all existing subscribers, could be used to send announcements, etc.
      In the future could be used to trigger events to a subset of subscribers based on defined filters.",
            "method": "POST",
            "path": "/broadcast",
            "request": {
              "body": "TriggerEventToAllRequestDto",
              "name": "EventsController_trackEventToAllRequest",
            },
          },
          "eventsControllerTriggerBulkEvents": {
            "display-name": "Bulk trigger event",
            "docs": "
      Using this endpoint you can trigger multiple events at once, to avoid multiple calls to the API.
      The bulk API is limited to 100 events per request.
    ",
            "method": "POST",
            "path": "/bulk",
            "request": {
              "body": "BulkTriggerEventDto",
              "name": "EventsController_triggerBulkEventsRequest",
            },
          },
        },
        "path-parameters": undefined,
      },
      "types": {
        "BulkTriggerEventDto": {
          "extends": undefined,
          "properties": {
            "events": "list<commons.TriggerEventRequestDto>",
          },
        },
        "TriggerEventToAllRequestDto": {
          "extends": undefined,
          "properties": {
            "actor": "optional<commons.TriggerEventToAllRequestDtoActor>",
            "name": {
              "docs": "The trigger identifier associated for the template you wish to send. This identifier can be found on the template page.",
              "type": "string",
            },
            "overrides": {
              "docs": "This could be used to override provider specific configurations",
              "type": "optional<map<string, unknown>>",
            },
            "payload": {
              "docs": "The payload object is used to pass additional custom information that could be used to render the template, or perform routing rules based on it. 
      This data will also be available when fetching the notifications feed from the API to display certain parts of the UI.",
              "type": "map<string, unknown>",
            },
            "transactionId": {
              "docs": "A unique identifier for this transaction, we will generated a UUID if not provided.",
              "type": "optional<string>",
            },
          },
        },
      },
    },
    "executionDetails.yml": {
      "service": {
        "auth": false,
        "base-path": "/v1/execution-details",
        "endpoints": {
          "executionDetailsControllerGetExecutionDetailsForNotification": {
            "display-name": "Get execution details",
            "docs": undefined,
            "method": "GET",
            "path": "",
            "request": {
              "name": "ExecutionDetailsController_getExecutionDetailsForNotificationRequest",
              "query-parameters": {
                "notificationId": "string",
                "subscriberId": "string",
              },
            },
            "response": "list<ExecutionDetailsResponseDto>",
          },
        },
        "path-parameters": undefined,
      },
      "types": {
        "ExecutionDetailsResponseDto": {
          "extends": undefined,
          "properties": {
            "_environmentId": "string",
            "_id": "optional<string>",
            "_jobId": "string",
            "_messageId": "optional<string>",
            "_notificationId": "string",
            "_notificationTemplateId": "string",
            "_organizationId": "string",
            "_subscriberId": "string",
            "channel": "optional<ExecutionDetailsResponseDtoChannel>",
            "createdAt": "optional<string>",
            "detail": "string",
            "isRetry": "boolean",
            "isTest": "boolean",
            "providerId": "optional<string>",
            "source": "ExecutionDetailsResponseDtoSource",
            "status": "ExecutionDetailsResponseDtoStatus",
            "transactionId": "string",
          },
        },
        "ExecutionDetailsResponseDtoChannel": {
          "enum": [
            "in_app",
            "email",
            "sms",
            "chat",
            "push",
            "digest",
            "trigger",
            "delay",
          ],
        },
        "ExecutionDetailsResponseDtoSource": {
          "enum": [
            "Credentials",
            "Internal",
            "Payload",
            "Webhook",
          ],
        },
        "ExecutionDetailsResponseDtoStatus": {
          "enum": [
            "Success",
            "Warning",
            "Failed",
            "Pending",
            "Queued",
            "ReadConfirmation",
          ],
        },
      },
    },
    "feeds.yml": {
      "service": {
        "auth": false,
        "base-path": "/v1/feeds",
        "endpoints": {
          "feedsControllerCreateFeed": {
            "display-name": "Create feed",
            "docs": undefined,
            "method": "POST",
            "path": "",
            "request": {
              "body": "CreateFeedRequestDto",
              "name": "FeedsController_createFeedRequest",
            },
          },
          "feedsControllerDeleteFeedById": {
            "display-name": "Delete feed",
            "docs": undefined,
            "method": "DELETE",
            "path": "/{feedId}",
            "path-parameters": {
              "feedId": "string",
            },
            "request": {
              "name": "FeedsController_deleteFeedByIdRequest",
            },
            "response": "list<commons.FeedResponseDto>",
          },
          "feedsControllerGetFeeds": {
            "display-name": "Get feeds",
            "docs": undefined,
            "method": "GET",
            "path": "",
            "request": {
              "name": "FeedsController_getFeedsRequest",
            },
            "response": "list<commons.FeedResponseDto>",
          },
        },
        "path-parameters": undefined,
      },
      "types": {
        "CreateFeedRequestDto": {
          "extends": undefined,
          "properties": {
            "name": "string",
          },
        },
      },
    },
    "inboundParse.yml": {
      "service": {
        "auth": false,
        "base-path": "/v1/inbound-parse/mx/status",
        "endpoints": {
          "inboundParseControllerGetMxRecordStatus": {
            "display-name": "Validate the mx record setup for the inbound parse functionality",
            "docs": undefined,
            "method": "GET",
            "path": "",
            "request": {
              "name": "InboundParseController_getMxRecordStatusRequest",
            },
            "response": "list<GetMxRecordResponseDto>",
          },
        },
        "path-parameters": undefined,
      },
      "types": {
        "GetMxRecordResponseDto": {
          "extends": undefined,
          "properties": {
            "mxRecordConfigured": "boolean",
          },
        },
      },
    },
    "integrations.yml": {
      "imports": {
        "commons": "commons.yml",
      },
      "service": {
        "auth": false,
        "base-path": "/v1/integrations",
        "endpoints": {
          "integrationsControllerCreateIntegration": {
            "display-name": "Create integration",
            "docs": undefined,
            "method": "POST",
            "path": "",
            "request": {
              "body": "CreateIntegrationRequestDto",
              "name": "IntegrationsController_createIntegrationRequest",
            },
          },
          "integrationsControllerGetActiveIntegrations": {
            "display-name": "Get active integrations",
            "docs": undefined,
            "method": "GET",
            "path": "/active",
            "request": {
              "name": "IntegrationsController_getActiveIntegrationsRequest",
            },
            "response": "list<commons.IntegrationResponseDto>",
          },
          "integrationsControllerGetInAppActivated": {
            "display-name": undefined,
            "docs": undefined,
            "method": "GET",
            "path": "/in-app/status",
            "request": {
              "name": "IntegrationsController_getInAppActivatedRequest",
            },
          },
          "integrationsControllerGetIntegrations": {
            "display-name": "Get integrations",
            "docs": undefined,
            "method": "GET",
            "path": "",
            "request": {
              "name": "IntegrationsController_getIntegrationsRequest",
            },
            "response": "list<commons.IntegrationResponseDto>",
          },
          "integrationsControllerGetProviderLimit": {
            "display-name": undefined,
            "docs": undefined,
            "method": "GET",
            "path": "/{channelType}/limit",
            "path-parameters": {
              "channelType": "string",
            },
            "request": {
              "name": "IntegrationsController_getProviderLimitRequest",
            },
          },
          "integrationsControllerGetWebhookSupportStatus": {
            "display-name": "Get webhook support status for provider",
            "docs": undefined,
            "method": "GET",
            "path": "/webhook/provider/{providerId}/status",
            "path-parameters": {
              "providerId": "string",
            },
            "request": {
              "name": "IntegrationsController_getWebhookSupportStatusRequest",
            },
          },
          "integrationsControllerRemoveIntegration": {
            "display-name": "Delete integration",
            "docs": undefined,
            "method": "DELETE",
            "path": "/{integrationId}",
            "path-parameters": {
              "integrationId": "string",
            },
            "request": {
              "name": "IntegrationsController_removeIntegrationRequest",
            },
            "response": "list<commons.IntegrationResponseDto>",
          },
          "integrationsControllerUpdateIntegrationById": {
            "display-name": "Update integration",
            "docs": undefined,
            "method": "PUT",
            "path": "/{integrationId}",
            "path-parameters": {
              "integrationId": "string",
            },
            "request": {
              "body": "UpdateIntegrationRequestDto",
              "name": "IntegrationsController_updateIntegrationByIdRequest",
            },
            "response": "commons.IntegrationResponseDto",
          },
        },
        "path-parameters": undefined,
      },
      "types": {
        "CreateIntegrationRequestDto": {
          "extends": undefined,
          "properties": {
            "active": "boolean",
            "channel": "commons.CreateEnvironmentRequestDtoChannel",
            "check": "boolean",
            "credentials": "commons.CredentialsDto",
            "providerId": "string",
          },
        },
        "UpdateIntegrationRequestDto": {
          "extends": undefined,
          "properties": {
            "active": "boolean",
            "check": "boolean",
            "credentials": "commons.CredentialsDto",
          },
        },
      },
    },
    "layouts.yml": {
      "imports": {
        "commons": "commons.yml",
      },
      "service": {
        "auth": false,
        "base-path": "/v1/layouts",
        "endpoints": {
          "layoutsControllerCreateLayout": {
            "display-name": "Layout creation",
            "docs": "Create a layout",
            "method": "POST",
            "path": "",
            "request": {
              "body": "CreateLayoutRequestDto",
              "name": "LayoutsController_createLayoutRequest",
            },
          },
          "layoutsControllerDeleteLayout": {
            "display-name": "Delete layout",
            "docs": "Execute a soft delete of a layout given a certain ID.",
            "method": "DELETE",
            "path": "/{layoutId}",
            "path-parameters": {
              "layoutId": "string",
            },
            "request": {
              "name": "LayoutsController_deleteLayoutRequest",
            },
          },
          "layoutsControllerFilterLayouts": {
            "display-name": "Filter layouts",
            "docs": "Returns a list of layouts that can be paginated using the \`page\` query parameter and filtered by the environment where it is executed from the organization the user belongs to.",
            "method": "GET",
            "path": "",
            "request": {
              "name": "LayoutsController_filterLayoutsRequest",
              "query-parameters": {
                "page": {
                  "docs": "Number of page for the pagination",
                  "type": "optional<double>",
                },
                "pageSize": {
                  "docs": "Size of page for the pagination",
                  "type": "optional<double>",
                },
                "sortBy": {
                  "docs": "Sort field. Currently only supported \`createdAt\`",
                  "type": "optional<string>",
                },
              },
            },
            "response": "FilterLayoutsResponseDto",
          },
          "layoutsControllerGetLayout": {
            "display-name": "Get layout",
            "docs": "Get a layout by its ID",
            "method": "GET",
            "path": "/{layoutId}",
            "path-parameters": {
              "layoutId": "string",
            },
            "request": {
              "name": "LayoutsController_getLayoutRequest",
            },
            "response": "GetLayoutResponseDto",
          },
          "layoutsControllerSetDefaultLayout": {
            "display-name": "Set default layout",
            "docs": "Sets the default layout for the environment and updates to non default to the existing default layout (if any).",
            "method": "POST",
            "path": "/{layoutId}/default",
            "path-parameters": {
              "layoutId": "string",
            },
            "request": {
              "name": "LayoutsController_setDefaultLayoutRequest",
            },
          },
          "layoutsControllerUpdateLayout": {
            "display-name": "Update a layout",
            "docs": "Update the name, content and variables of a layout. Also change it to be default or no.",
            "method": "PATCH",
            "path": "/{layoutId}",
            "path-parameters": {
              "layoutId": "string",
            },
            "request": {
              "body": "UpdateLayoutRequestDto",
              "name": "LayoutsController_updateLayoutRequest",
            },
            "response": "UpdateLayoutResponseDto",
          },
        },
        "path-parameters": undefined,
      },
      "types": {
        "CreateLayoutRequestDto": {
          "extends": undefined,
          "properties": {
            "content": {
              "docs": "User defined content for the layout.",
              "type": "string",
            },
            "description": {
              "docs": "User description of the layout",
              "type": "optional<string>",
            },
            "isDefault": {
              "docs": "Variable that defines if the layout is chosen as default when creating a layout.",
              "type": "optional<boolean>",
            },
            "name": {
              "docs": "User defined custom name and provided by the user that will name the Layout created.",
              "type": "string",
            },
            "variables": {
              "docs": "User defined variables to render in the layout placeholders.",
              "type": "optional<list<map<string, unknown>>>",
            },
          },
        },
        "CreateLayoutResponseDto": {
          "extends": undefined,
          "properties": {
            "_id": "string",
          },
        },
        "FilterLayoutsResponseDto": {
          "extends": undefined,
          "properties": {
            "data": "list<string>",
            "page": "double",
            "pageSize": "double",
            "totalCount": "double",
          },
        },
        "GetLayoutResponseDto": {
          "extends": undefined,
          "properties": {
            "_creatorId": "string",
            "_environmentId": "string",
            "_id": "optional<string>",
            "_organizationId": "string",
            "_parentId": "optional<string>",
            "channel": "commons.GetLayoutResponseDtoProperties",
            "content": "string",
            "contentType": "string",
            "createdAt": "optional<string>",
            "description": "optional<string>",
            "isDefault": "boolean",
            "isDeleted": "boolean",
            "name": "string",
            "updatedAt": "optional<string>",
            "variables": "optional<list<map<string, unknown>>>",
          },
        },
        "UpdateLayoutRequestDto": {
          "extends": undefined,
          "properties": {
            "content": {
              "docs": "User defined content for the layout.",
              "type": "optional<string>",
            },
            "description": {
              "docs": "User defined description of the layout",
              "type": "optional<string>",
            },
            "isDefault": {
              "docs": "Variable that defines if the layout is chosen as default when creating a layout.",
              "type": "optional<boolean>",
            },
            "name": {
              "docs": "User defined custom name and provided by the user that will name the Layout updated.",
              "type": "optional<string>",
            },
            "variables": {
              "docs": "User defined variables to render in the layout placeholders.",
              "type": "optional<list<map<string, unknown>>>",
            },
          },
        },
        "UpdateLayoutResponseDto": {
          "extends": undefined,
          "properties": {
            "_creatorId": "string",
            "_environmentId": "string",
            "_id": "optional<string>",
            "_organizationId": "string",
            "_parentId": "optional<string>",
            "channel": "commons.UpdateLayoutRequestDtoProperties",
            "content": "string",
            "contentType": "string",
            "createdAt": "optional<string>",
            "description": "optional<string>",
            "isDefault": "boolean",
            "isDeleted": "boolean",
            "name": "string",
            "updatedAt": "optional<string>",
            "variables": "optional<list<map<string, unknown>>>",
          },
        },
      },
    },
    "messages.yml": {
      "imports": {
        "commons": "commons.yml",
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "/v1/messages",
        "endpoints": {
          "messagesControllerDeleteMessage": {
            "display-name": "Delete message",
            "docs": "Deletes a message entity from the Novu platform",
            "method": "DELETE",
            "path": "/{messageId}",
            "path-parameters": {
              "messageId": "string",
            },
            "request": {
              "name": "MessagesController_deleteMessageRequest",
            },
            "response": "DeleteMessageResponseDto",
          },
          "messagesControllerGetMessages": {
            "display-name": "Get messages",
            "docs": "Returns a list of messages, could paginate using the \`page\` query parameter",
            "method": "GET",
            "path": "",
            "request": {
              "name": "MessagesController_getMessagesRequest",
              "query-parameters": {
                "channel": {
                  "docs": "The channel for the messages you wish to list",
                  "type": "optional<__package__.GetMessagesParametersSchema>",
                },
                "limit": {
                  "docs": "The number of messages to fetch, defaults to 10",
                  "type": "optional<double>",
                },
                "page": {
                  "docs": "The page to fetch, defaults to 0",
                  "type": "optional<double>",
                },
                "subscriberId": {
                  "docs": "The subscriberId for the subscriber you like to list messages for",
                  "type": "optional<string>",
                },
              },
            },
            "response": "commons.ActivitiesResponseDto",
          },
        },
        "path-parameters": undefined,
      },
      "types": {
        "DeleteMessageResponseDto": {
          "extends": undefined,
          "properties": {
            "acknowledged": {
              "docs": "A boolean stating the success of the action",
              "type": "boolean",
            },
            "status": "DeleteMessageResponseDtoStatus",
          },
        },
        "DeleteMessageResponseDtoStatus": {
          "docs": "The status enum for the performed action",
          "enum": [
            "deleted",
          ],
        },
      },
    },
    "notification.yml": {
      "imports": {
        "commons": "commons.yml",
      },
      "service": {
        "auth": false,
        "base-path": "/v1/notifications",
        "endpoints": {
          "notificationsControllerGetActivity": {
            "display-name": "Get notification",
            "docs": undefined,
            "method": "GET",
            "path": "/{notificationId}",
            "path-parameters": {
              "notificationId": "string",
            },
            "request": {
              "name": "NotificationsController_getActivityRequest",
            },
            "response": "commons.ActivityNotificationResponseDto",
          },
          "notificationsControllerGetActivityGraphStats": {
            "display-name": "Get notification graph statistics",
            "docs": undefined,
            "method": "GET",
            "path": "/graph/stats",
            "request": {
              "name": "NotificationsController_getActivityGraphStatsRequest",
              "query-parameters": {
                "days": "optional<double>",
              },
            },
            "response": "list<commons.ActivityGraphStatesResponse>",
          },
          "notificationsControllerGetActivityStats": {
            "display-name": "Get notification statistics",
            "docs": undefined,
            "method": "GET",
            "path": "/stats",
            "request": {
              "name": "NotificationsController_getActivityStatsRequest",
            },
            "response": "commons.ActivityStatsResponseDto",
          },
          "notificationsControllerGetNotifications": {
            "display-name": "Get notifications",
            "docs": undefined,
            "method": "GET",
            "path": "",
            "request": {
              "name": "NotificationsController_getNotificationsRequest",
              "query-parameters": {
                "page": "optional<double>",
                "search": "string",
                "transactionId": "optional<string>",
              },
            },
            "response": "commons.ActivitiesResponseDto",
          },
        },
        "path-parameters": undefined,
      },
    },
    "notificationGroups.yml": {
      "service": {
        "auth": false,
        "base-path": "/v1/notification-groups",
        "endpoints": {
          "notificationGroupsControllerCreateNotificationGroup": {
            "display-name": "Create notification group",
            "docs": undefined,
            "method": "POST",
            "path": "",
            "request": {
              "body": "CreateNotificationGroupRequestDto",
              "name": "NotificationGroupsController_createNotificationGroupRequest",
            },
          },
          "notificationGroupsControllerGetNotificationGroups": {
            "display-name": "Get notification groups",
            "docs": undefined,
            "method": "GET",
            "path": "",
            "request": {
              "name": "NotificationGroupsController_getNotificationGroupsRequest",
            },
            "response": "list<commons.NotificationGroupResponseDto>",
          },
        },
        "path-parameters": undefined,
      },
      "types": {
        "CreateNotificationGroupRequestDto": {
          "extends": undefined,
          "properties": {
            "name": "string",
          },
        },
      },
    },
    "notificationTemplates.yml": {
      "imports": {
        "commons": "commons.yml",
      },
      "service": {
        "auth": false,
        "base-path": "/v1/notification-templates",
        "endpoints": {
          "notificationTemplateControllerChangeActiveStatus": {
            "display-name": "Update notification template status",
            "docs": undefined,
            "method": "PUT",
            "path": "/{templateId}/status",
            "path-parameters": {
              "templateId": "string",
            },
            "request": {
              "body": "ChangeTemplateStatusRequestDto",
              "name": "NotificationTemplateController_changeActiveStatusRequest",
            },
            "response": "commons.NotificationTemplateResponse",
          },
          "notificationTemplateControllerCreateNotificationTemplateFromBlueprintById": {
            "display-name": undefined,
            "docs": undefined,
            "method": "POST",
            "path": "/{templateId}/blueprint",
            "path-parameters": {
              "templateId": "string",
            },
            "request": {
              "name": "NotificationTemplateController_createNotificationTemplateFromBlueprintByIdRequest",
            },
          },
          "notificationTemplateControllerCreateNotificationTemplates": {
            "display-name": "Create notification template",
            "docs": undefined,
            "method": "POST",
            "path": "",
            "request": {
              "body": "CreateNotificationTemplateRequestDto",
              "name": "NotificationTemplateController_createNotificationTemplatesRequest",
            },
          },
          "notificationTemplateControllerDeleteTemplateById": {
            "display-name": "Delete notification template",
            "docs": undefined,
            "method": "DELETE",
            "path": "/{templateId}",
            "path-parameters": {
              "templateId": "string",
            },
            "request": {
              "name": "NotificationTemplateController_deleteTemplateByIdRequest",
            },
            "response": "boolean",
          },
          "notificationTemplateControllerGetNotificationTemplateBlueprintById": {
            "display-name": undefined,
            "docs": undefined,
            "method": "GET",
            "path": "/{templateId}/blueprint",
            "path-parameters": {
              "templateId": "string",
            },
            "request": {
              "name": "NotificationTemplateController_getNotificationTemplateBlueprintByIdRequest",
            },
          },
          "notificationTemplateControllerGetNotificationTemplateById": {
            "display-name": "Get notification template",
            "docs": undefined,
            "method": "GET",
            "path": "/{templateId}",
            "path-parameters": {
              "templateId": "string",
            },
            "request": {
              "name": "NotificationTemplateController_getNotificationTemplateByIdRequest",
            },
            "response": "commons.NotificationTemplateResponse",
          },
          "notificationTemplateControllerGetNotificationTemplates": {
            "display-name": "Get notification templates",
            "docs": undefined,
            "method": "GET",
            "path": "",
            "request": {
              "name": "NotificationTemplateController_getNotificationTemplatesRequest",
              "query-parameters": {
                "limit": "optional<double>",
                "page": "optional<double>",
              },
            },
            "response": "commons.NotificationTemplateResponse",
          },
          "notificationTemplateControllerUpdateTemplateById": {
            "display-name": "Update notification template",
            "docs": undefined,
            "method": "PUT",
            "path": "/{templateId}",
            "path-parameters": {
              "templateId": "string",
            },
            "request": {
              "body": "UpdateNotificationTemplateRequestDto",
              "name": "NotificationTemplateController_updateTemplateByIdRequest",
            },
            "response": "commons.NotificationTemplateResponse",
          },
        },
        "path-parameters": undefined,
      },
      "types": {
        "ChangeTemplateStatusRequestDto": {
          "extends": undefined,
          "properties": {
            "active": "boolean",
          },
        },
        "CreateNotificationTemplateRequestDto": {
          "extends": undefined,
          "properties": {
            "active": "optional<boolean>",
            "critical": "optional<boolean>",
            "description": "optional<string>",
            "draft": "optional<boolean>",
            "name": "string",
            "notificationGroupId": "string",
            "preferenceSettings": "optional<commons.PreferenceChannels>",
            "steps": "list<commons.NotificationChannel>",
            "tags": "optional<list<string>>",
          },
        },
        "UpdateNotificationTemplateRequestDto": {
          "extends": undefined,
          "properties": {
            "active": "optional<boolean>",
            "critical": "optional<boolean>",
            "description": "optional<string>",
            "identifier": "optional<string>",
            "name": "string",
            "notificationGroupId": "string",
            "preferenceSettings": "optional<commons.PreferenceChannels>",
            "steps": "optional<list<commons.NotificationStep>>",
            "tags": "optional<list<string>>",
          },
        },
      },
    },
    "subscribers.yml": {
      "imports": {
        "commons": "commons.yml",
      },
      "service": {
        "auth": false,
        "base-path": "/v1/subscribers",
        "endpoints": {
          "subscribersControllerCreateSubscriber": {
            "display-name": "Create subscriber",
            "docs": "Creates a subscriber entity, in the Novu platform. The subscriber will be later used to receive notifications, and access notification feeds. Communication credentials such as email, phone number, and 3 rd party credentials i.e slack tokens could be later associated to this entity.",
            "method": "POST",
            "path": "",
            "request": {
              "body": "CreateSubscriberRequestDto",
              "name": "SubscribersController_createSubscriberRequest",
            },
          },
          "subscribersControllerGetNotificationsFeed": {
            "display-name": "Get a notification feed for a particular subscriber",
            "docs": undefined,
            "method": "GET",
            "path": "/{subscriberId}/notifications/feed",
            "path-parameters": {
              "subscriberId": "string",
            },
            "request": {
              "name": "SubscribersController_getNotificationsFeedRequest",
              "query-parameters": {
                "feedIdentifier": "string",
                "page": "optional<double>",
                "seen": "optional<boolean>",
              },
            },
            "response": "MessagesResponseDto",
          },
          "subscribersControllerGetSubscriber": {
            "display-name": "Get subscriber",
            "docs": "Get subscriber by your internal id used to identify the subscriber",
            "method": "GET",
            "path": "/{subscriberId}",
            "path-parameters": {
              "subscriberId": "string",
            },
            "request": {
              "name": "SubscribersController_getSubscriberRequest",
            },
            "response": "commons.SubscriberResponseDto",
          },
          "subscribersControllerGetSubscriberPreference": {
            "display-name": "Get subscriber preferences",
            "docs": undefined,
            "method": "GET",
            "path": "/{subscriberId}/preferences",
            "path-parameters": {
              "subscriberId": "string",
            },
            "request": {
              "name": "SubscribersController_getSubscriberPreferenceRequest",
            },
            "response": "list<commons.UpdateSubscriberPreferenceResponseDto>",
          },
          "subscribersControllerGetSubscribers": {
            "display-name": "Get subscribers",
            "docs": "Returns a list of subscribers, could paginated using the \`page\` query parameter",
            "method": "GET",
            "path": "",
            "request": {
              "name": "SubscribersController_getSubscribersRequest",
              "query-parameters": {
                "page": {
                  "docs": "The page to fetch, defaults to 0",
                  "type": "optional<double>",
                },
              },
            },
            "response": "SubscribersResponseDto",
          },
          "subscribersControllerGetUnseenCount": {
            "display-name": "Get the unseen notification count for subscribers feed",
            "docs": undefined,
            "method": "GET",
            "path": "/{subscriberId}/notifications/unseen",
            "path-parameters": {
              "subscriberId": "string",
            },
            "request": {
              "name": "SubscribersController_getUnseenCountRequest",
              "query-parameters": {
                "seen": "boolean",
              },
            },
            "response": "UnseenCountResponse",
          },
          "subscribersControllerMarkActionAsSeen": {
            "display-name": "Mark message action as seen",
            "docs": undefined,
            "method": "POST",
            "path": "/{subscriberId}/messages/{messageId}/actions/{type}",
            "path-parameters": {
              "messageId": "string",
              "subscriberId": "string",
              "type": "string",
            },
            "request": {
              "name": "SubscribersController_markActionAsSeenRequest",
            },
          },
          "subscribersControllerMarkMessageAs": {
            "display-name": "Mark a subscriber feed message as seen",
            "docs": undefined,
            "method": "POST",
            "path": "/{subscriberId}/messages/markAs",
            "path-parameters": {
              "subscriberId": "string",
            },
            "request": {
              "body": "MarkMessageAsRequestDto",
              "name": "SubscribersController_markMessageAsRequest",
            },
          },
          "subscribersControllerMarkMessageAsSeen": {
            "display-name": "Mark a subscriber feed message as seen",
            "docs": "This endpoint is deprecated please address /:subscriberId/messages/markAs instead",
            "method": "POST",
            "path": "/{subscriberId}/messages/{messageId}/seen",
            "path-parameters": {
              "messageId": "string",
              "subscriberId": "string",
            },
            "request": {
              "name": "SubscribersController_markMessageAsSeenRequest",
            },
          },
          "subscribersControllerRemoveSubscriber": {
            "display-name": "Delete subscriber",
            "docs": "Deletes a subscriber entity from the Novu platform",
            "method": "DELETE",
            "path": "/{subscriberId}",
            "path-parameters": {
              "subscriberId": "string",
            },
            "request": {
              "name": "SubscribersController_removeSubscriberRequest",
            },
            "response": "DeleteSubscriberResponseDto",
          },
          "subscribersControllerUpdateSubscriber": {
            "display-name": "Update subscriber",
            "docs": "Used to update the subscriber entity with new information",
            "method": "PUT",
            "path": "/{subscriberId}",
            "path-parameters": {
              "subscriberId": "string",
            },
            "request": {
              "body": "UpdateSubscriberRequestDto",
              "name": "SubscribersController_updateSubscriberRequest",
            },
            "response": "commons.SubscriberResponseDto",
          },
          "subscribersControllerUpdateSubscriberChannel": {
            "display-name": "Update subscriber credentials",
            "docs": "Subscriber credentials associated to the delivery methods such as slack and push tokens.",
            "method": "PUT",
            "path": "/{subscriberId}/credentials",
            "path-parameters": {
              "subscriberId": "string",
            },
            "request": {
              "body": "UpdateSubscriberChannelRequestDto",
              "name": "SubscribersController_updateSubscriberChannelRequest",
            },
            "response": "commons.SubscriberResponseDto",
          },
          "subscribersControllerUpdateSubscriberOnlineFlag": {
            "display-name": "Update subscriber online status",
            "docs": "Used to update the subscriber isOnline flag.",
            "method": "PATCH",
            "path": "/{subscriberId}/online-status",
            "path-parameters": {
              "subscriberId": "string",
            },
            "request": {
              "body": "UpdateSubscriberOnlineFlagRequestDto",
              "name": "SubscribersController_updateSubscriberOnlineFlagRequest",
            },
            "response": "commons.SubscriberResponseDto",
          },
          "subscribersControllerUpdateSubscriberPreference": {
            "display-name": "Update subscriber preference",
            "docs": undefined,
            "method": "PATCH",
            "path": "/{subscriberId}/preferences/{templateId}",
            "path-parameters": {
              "subscriberId": "string",
              "templateId": "string",
            },
            "request": {
              "body": "UpdateSubscriberPreferenceRequestDto",
              "name": "SubscribersController_updateSubscriberPreferenceRequest",
            },
            "response": "commons.UpdateSubscriberPreferenceResponseDto",
          },
        },
        "path-parameters": undefined,
      },
      "types": {
        "CreateSubscriberRequestDto": {
          "extends": undefined,
          "properties": {
            "avatar": {
              "docs": "An http url to the profile image of your subscriber",
              "type": "optional<string>",
            },
            "data": "optional<map<string, unknown>>",
            "email": "optional<string>",
            "firstName": "optional<string>",
            "lastName": "optional<string>",
            "locale": "optional<string>",
            "phone": "optional<string>",
            "subscriberId": {
              "docs": "The internal identifier you used to create this subscriber, usually correlates to the id the user in your systems",
              "type": "string",
            },
          },
        },
        "DeleteSubscriberResponseDto": {
          "extends": undefined,
          "properties": {
            "acknowledged": {
              "docs": "A boolean stating the success of the action",
              "type": "boolean",
            },
            "status": "commons.DeleteSubscriberResponseDtoStatus",
          },
        },
        "MarkMessageAsRequestDto": {
          "extends": undefined,
          "properties": {
            "mark": "commons.MarkMessageFields",
            "messageId": "commons.MarkMessageAsRequestDtoMessageID",
          },
        },
        "MessagesResponseDto": {
          "extends": undefined,
          "properties": {
            "data": "list<commons.MessageResponseDto>",
            "page": "double",
            "pageSize": "double",
            "totalCount": "double",
          },
        },
        "SubscribersResponseDto": {
          "extends": undefined,
          "properties": {
            "data": {
              "docs": "The list of subscribers matching the query",
              "type": "list<commons.SubscriberResponseDto>",
            },
            "page": {
              "docs": "The current page of the paginated response",
              "type": "double",
            },
            "pageSize": {
              "docs": "Number of subscribers on each page",
              "type": "double",
            },
            "totalCount": {
              "docs": "Total count of subscribers matching the query",
              "type": "double",
            },
          },
        },
        "UnseenCountResponse": {
          "extends": undefined,
          "properties": {
            "count": "double",
          },
        },
        "UpdateSubscriberChannelRequestDto": {
          "extends": undefined,
          "properties": {
            "credentials": {
              "docs": "Credentials payload for the specified provider",
              "type": "_InlinedType0",
            },
            "providerId": "commons.UpdateSubscriberChannelRequestDtoProviderId",
          },
        },
        "UpdateSubscriberOnlineFlagRequestDto": {
          "extends": undefined,
          "properties": {
            "isOnline": "boolean",
          },
        },
        "UpdateSubscriberPreferenceRequestDto": {
          "extends": undefined,
          "properties": {
            "channel": {
              "docs": "The subscriber preferences for every ChannelTypeEnum for the notification template assigned.",
              "type": "optional<_InlinedType1>",
            },
            "enabled": {
              "docs": "Sets if the notification template is fully enabled for all channels or not for the subscriber.",
              "type": "optional<boolean>",
            },
          },
        },
        "UpdateSubscriberRequestDto": {
          "extends": undefined,
          "properties": {
            "avatar": "optional<string>",
            "data": "optional<map<string, unknown>>",
            "email": "optional<string>",
            "firstName": "optional<string>",
            "lastName": "optional<string>",
            "locale": "optional<string>",
            "phone": "optional<string>",
          },
        },
        "_InlinedType0": {
          "docs": "Credentials payload for the specified provider",
          "extends": [
            "commons.ChannelCredentials",
          ],
        },
        "_InlinedType1": {
          "docs": "The subscriber preferences for every ChannelTypeEnum for the notification template assigned.",
          "extends": [
            "commons.ChannelPreference",
          ],
        },
      },
    },
    "topics.yml": {
      "service": {
        "auth": false,
        "base-path": "/v1/topics",
        "endpoints": {
          "topicsControllerAddSubscribers": {
            "display-name": "Subscribers addition",
            "docs": "Add subscribers to a topic by key",
            "method": "POST",
            "path": "/{topicKey}/subscribers",
            "path-parameters": {
              "topicKey": "string",
            },
            "request": {
              "body": "AddSubscribersRequestDto",
              "name": "TopicsController_addSubscribersRequest",
            },
          },
          "topicsControllerCreateTopic": {
            "display-name": "Topic creation",
            "docs": "Create a topic",
            "method": "POST",
            "path": "",
            "request": {
              "body": "CreateTopicRequestDto",
              "name": "TopicsController_createTopicRequest",
            },
          },
          "topicsControllerFilterTopics": {
            "display-name": "Filter topics",
            "docs": "Returns a list of topics that can be paginated using the \`page\` query parameter and filtered by the topic key with the \`key\` query parameter",
            "method": "GET",
            "path": "",
            "request": {
              "name": "TopicsController_filterTopicsRequest",
              "query-parameters": {
                "key": {
                  "docs": "Topic key",
                  "type": "optional<string>",
                },
                "page": {
                  "docs": "Number of page for the pagination",
                  "type": "optional<double>",
                },
                "pageSize": {
                  "docs": "Size of page for the pagination",
                  "type": "optional<double>",
                },
              },
            },
            "response": "FilterTopicsResponseDto",
          },
          "topicsControllerGetTopic": {
            "display-name": "Get topic",
            "docs": "Get a topic by its topic key",
            "method": "GET",
            "path": "/{topicKey}",
            "path-parameters": {
              "topicKey": "string",
            },
            "request": {
              "name": "TopicsController_getTopicRequest",
            },
            "response": "GetTopicResponseDto",
          },
          "topicsControllerRemoveSubscribers": {
            "display-name": "Subscribers removal",
            "docs": "Remove subscribers from a topic",
            "method": "POST",
            "path": "/{topicKey}/subscribers/removal",
            "path-parameters": {
              "topicKey": "string",
            },
            "request": {
              "body": "RemoveSubscribersRequestDto",
              "name": "TopicsController_removeSubscribersRequest",
            },
          },
          "topicsControllerRenameTopic": {
            "display-name": "Rename a topic",
            "docs": "Rename a topic by providing a new name",
            "method": "PATCH",
            "path": "/{topicKey}",
            "path-parameters": {
              "topicKey": "string",
            },
            "request": {
              "body": "RenameTopicRequestDto",
              "name": "TopicsController_renameTopicRequest",
            },
            "response": "RenameTopicResponseDto",
          },
        },
        "path-parameters": undefined,
      },
      "types": {
        "AddSubscribersRequestDto": {
          "extends": undefined,
          "properties": {
            "subscribers": {
              "docs": "List of subscriber identifiers that will be associated to the topic",
              "type": "list<string>",
            },
          },
        },
        "CreateTopicRequestDto": {
          "extends": undefined,
          "properties": {
            "key": {
              "docs": "User defined custom key and provided by the user that will be an unique identifier for the Topic created.",
              "type": "string",
            },
            "name": {
              "docs": "User defined custom name and provided by the user that will name the Topic created.",
              "type": "string",
            },
          },
        },
        "CreateTopicResponseDto": {
          "extends": undefined,
          "properties": {},
        },
        "FilterTopicsResponseDto": {
          "extends": undefined,
          "properties": {
            "data": "list<string>",
            "page": "double",
            "pageSize": "double",
            "totalCount": "double",
          },
        },
        "GetTopicResponseDto": {
          "extends": undefined,
          "properties": {
            "_environmentId": "string",
            "_id": "optional<string>",
            "_organizationId": "string",
            "key": "string",
            "name": "string",
            "subscribers": "list<string>",
          },
        },
        "RemoveSubscribersRequestDto": {
          "extends": undefined,
          "properties": {
            "subscribers": {
              "docs": "List of subscriber identifiers that will be removed to the topic",
              "type": "list<string>",
            },
          },
        },
        "RenameTopicRequestDto": {
          "extends": undefined,
          "properties": {
            "name": {
              "docs": "User defined custom name and provided by the user to rename the topic.",
              "type": "string",
            },
          },
        },
        "RenameTopicResponseDto": {
          "extends": undefined,
          "properties": {
            "_environmentId": "string",
            "_id": "optional<string>",
            "_organizationId": "string",
            "key": "string",
            "name": "string",
            "subscribers": "list<string>",
          },
        },
      },
    },
  },
}
`;
